{"version":3,"sources":["chart.tsx","types/index.ts","utils/api.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["fitWidth","props","type","width","initialData","data","ratio","chartType","transactions","indicator","sameDateByChartType","d1","d2","isSameOrAfter","isBefore","add","isSame","sma20","sma","id","options","windowSize","merge","d","c","accessor","sma50","stroke","buySell","algo","accumulator","date","i","length","transaction","moment","amount","longShort","defaultAnnotationProps","fontFamily","fontSize","opacity","onClick","console","log","bind","longAnnotationProps","fill","text","y","yScale","datum","low","tooltip","shortAnnotationProps","high","calculatedData","discontinuousTimeScaleProvider","inputDateAccessor","xScaleProvider","xScale","xAccessor","displayXAccessor","xExtents","last","Math","max","height","margin","left","right","top","bottom","seriesName","yExtents","axisAt","orient","ticks","yAccessor","with","LabelAnnotation","when","usingProps","Data","chart","this","m1","m5","m15","m30","h1","h4","w1","jsonArr","forEach","json","isSameOrBefore","push","toDate","open","close","volume","err","price","value","symbol","Indicator","convertToChartData","rowData","rowChartData","rowTransactionData","key","setChart","JSON","parse","setTransaction","fetchData","a","axios","url","method","baseURL","chartData","App","useState","chartStatus","setChartStatus","asyncData","useAsync","useEffect","loading","error","message","result","ButtonGroup","color","aria-label","Object","entries","map","Button","Typography","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ecba0060.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment, { Moment } from 'moment'\n//@ts-ignore\nimport { scaleTime } from \"d3-scale\";\n//@ts-ignore\nimport { utcDay, utcMinute, utcHour } from \"d3-time\";\n//@ts-ignore\nimport { timeFormat } from \"d3-time-format\";\n//@ts-ignore\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\n//@ts-ignore\nimport { CandlestickSeries, LineSeries } from \"react-stockcharts/lib/series\";\n//@ts-ignore\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\n//@ts-ignore\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\n//@ts-ignore\nimport { CurrentCoordinate } from \"react-stockcharts/lib/coordinates\";\n//@ts-ignore\nimport { last, timeIntervalBarWidth } from \"react-stockcharts/lib/utils\";\n//@ts-ignore\nimport { LabelAnnotation, Label, Annotate } from \"react-stockcharts/lib/annotation\";\n//@ts-ignore\nimport { ema, wma, sma, tma } from \"react-stockcharts/lib/indicator\";\n//@ts-ignore\nimport { discontinuousTimeScaleProvider } from \"react-stockcharts/lib/scale\";\n//@ts-ignore\nimport algo from \"react-stockcharts/lib/algorithm\";\nimport { OHLCV, ChartType, Indicator, Transaction, SMA } from \"./types\";\n\ninterface Props {\n    type: string\n    chartType: ChartType\n    width: number\n    data: OHLCV[]\n    transactions: Transaction[]\n    ratio: number\n    indicator: Indicator\n}\nlet CandleStickChart: React.FC<Props> = (props) => {\n\n    const { type, width, data: initialData, ratio, chartType, indicator, transactions } = props;\n\n    /*const getWidthByChartType = (type: ChartType) => {\n        switch (type) {\n            case 'm5':\n                return timeIntervalBarWidth(utcMinute.every(5))\n            case 'm15':\n                return timeIntervalBarWidth(utcMinute.every(15))\n            case 'h1':\n                return timeIntervalBarWidth(utcHour)\n            case 'h4':\n                return timeIntervalBarWidth(utcHour.every(4)) // 4.0だとなぜか細くなる\n            default:\n                return timeIntervalBarWidth(utcHour)\n        }\n    }*/\n\n    const sameDateByChartType = (type: ChartType, d1: Moment, d2: Moment) => {\n        switch (type) {\n            case 'm5':\n                return d2.isSameOrAfter(d1, 'minutes') && d2.isBefore(d1.add(5, 'minutes'), 'minutes')\n            case 'm15':\n                return d2.isSameOrAfter(d1, 'minutes') && d2.isBefore(d1.add(15, 'minutes'), 'minutes')\n            case 'h1':\n                return d2.isSameOrAfter(d1, 'hours') && d2.isBefore(d1.add(1, 'hours'), 'hours')\n            case 'h4':\n                return d2.isSameOrAfter(d1, 'hours') && d2.isBefore(d1.add(4, 'hours'), 'hours')\n            default:\n                return d1.isSame(d2, 'hours')\n        }\n    }\n\n    const createSMA = (data: SMA) => {\n        return sma()\n            .id(0)\n            .options({ windowSize: data.window })\n            .merge((d: any, c: any) => { d[\"sma\" + data.window] = c; })\n            .accessor((d: any) => d[\"sma\" + data.window]);\n    }\n    const sma20 = sma()\n        .id(0)\n        .options({ windowSize: 20 })\n        .merge((d: any, c: any) => { d.sma20 = c; })\n        .accessor((d: any) => d.sma20);\n\n    const sma50 = sma()\n        .options({ windowSize: 50, })\n        .merge((d: any, c: any) => { d.sma50 = c; }) // Required, if not provided, log a error\n        .accessor((d: any) => d.sma50) // Required, if not provided, log an error during calculation\n        .stroke(\"blue\"); // Optional\n\n    const buySell = algo()\n        .windowSize(2)\n        .accumulator(([prev, now]: any) => {\n            //console.log(\"now\", now, now.low, now.date)\n            const { date } = now;\n            for (let i = 0; i < transactions.length; i++) {\n                //console.log(\"now2\", now, now.low, now.date, transactions[i].date)\n                const transaction = transactions[i]\n                const isSame = sameDateByChartType(chartType, moment(date), moment(transaction.date))\n                if (isSame) {\n                    if (transaction.amount > 0) {\n                        return \"LONG\"\n                    } else if (transaction.amount < 0) {\n                        return \"SHORT\"\n                    }\n                }\n            }\n        })\n        .merge((d: any, c: any) => { d.longShort = c; });\n\n    const defaultAnnotationProps = {\n        fontFamily: \"Glyphicons Halflings\",\n        fontSize: 20,\n        opacity: 0.8,\n        onClick: console.log.bind(console),\n    };\n\n    const longAnnotationProps = {\n        ...defaultAnnotationProps,\n        fill: \"#006517\",\n        text: \"\\ue093\",\n        y: ({ yScale, datum }: any) => yScale(datum.low) + 20,\n        tooltip: \"Go long\",\n    };\n\n    const shortAnnotationProps = {\n        ...defaultAnnotationProps,\n        fill: \"#E20000\",\n        text: \"\\ue094\",\n        y: ({ yScale, datum }: any) => yScale(datum.high),\n        tooltip: \"Go short\",\n    };\n    //const xAccessor = (d: any) => d.date;\n    /*const xExtents = [\n        xAccessor(last(data)),\n        xAccessor(data[data.length - 100])\n    ];*/\n    const calculatedData = buySell(sma20(sma50(initialData)));\n    const xScaleProvider = discontinuousTimeScaleProvider\n        .inputDateAccessor((d: any) => d.date);\n    const {\n        data,\n        xScale,\n        xAccessor,\n        displayXAccessor,\n    } = xScaleProvider(calculatedData);\n    console.log(\"render: \", initialData, data, sma20.accessor(), sma20.stroke())\n    const start = xAccessor(last(data));\n    const end = xAccessor(data[Math.max(0, data.length - 150)]);\n    const xExtents = [start, end];\n\n\n    const createIndicatorLayers = () => {\n        const layers: any = []\n        indicator.sma.forEach((data) => {\n            layers.push(\n                <LineSeries yAccessor={sma20.accessor()} stroke={sma20.stroke()} />\n            )\n        })\n        return layers\n    }\n    return (\n        <ChartCanvas height={400}\n            ratio={ratio}\n            width={width}\n            margin={{ left: 50, right: 50, top: 10, bottom: 30 }}\n            type={type}\n            seriesName=\"MSFT\"\n            data={data}\n            xAccessor={xAccessor}\n            displayXAccessor={displayXAccessor}\n            xScale={xScale}\n            xExtents={xExtents}>\n\n            <Chart id={1} yExtents={[(d: any) => [d.high, d.low], sma20.accessor()]}>\n                <XAxis axisAt=\"bottom\" orient=\"bottom\" ticks={6} />\n                <YAxis axisAt=\"left\" orient=\"left\" ticks={5} />\n                {/*<CandlestickSeries width={timeIntervalBarWidth(utcDay)} />*/}\n                <CandlestickSeries />\n\n                <LineSeries yAccessor={sma20.accessor()} stroke={sma20.stroke()} />\n                <LineSeries yAccessor={sma50.accessor()} stroke={sma50.stroke()} />\n                <CurrentCoordinate yAccessor={sma20.accessor()} fill={sma20.stroke()} />\n                <Annotate with={LabelAnnotation} when={(d: any) => d.longShort === \"LONG\"}\n                    usingProps={longAnnotationProps} />\n                <Annotate with={LabelAnnotation} when={(d: any) => d.longShort === \"SHORT\"}\n                    usingProps={shortAnnotationProps} />\n            </Chart>\n        </ChartCanvas>\n    );\n\n}\n\nexport default fitWidth(CandleStickChart)\n","import moment, { Moment } from \"moment\";\nimport { v4 as uuid } from 'uuid';\n\nexport type ChartType = \"m1\" | \"m5\" | \"m15\" | \"m30\" | \"h1\" | \"h4\" | \"d1\" | \"w1\"\n\nexport class Data {\n    chart: {\n        m1: OHLCV[]\n        m5: OHLCV[]\n        m15: OHLCV[]\n        m30: OHLCV[]\n        h1: OHLCV[]\n        h4: OHLCV[]\n        d1: OHLCV[]\n        w1: OHLCV[]\n    }\n    transactions: Transaction[]\n\n    constructor() {\n        this.chart = {\n            m1: [],\n            m5: [],\n            m15: [],\n            m30: [],\n            h1: [],\n            h4: [],\n            d1: [],\n            w1: [],\n        }\n        this.transactions = []\n    }\n\n    setChart(jsonArr: object[], type: ChartType) {\n        try {\n            const data: OHLCV[] = []\n            jsonArr.forEach((json: any) => {\n                //console.log(\"date\", moment(json.date))\n                if (moment(json.date).isSameOrBefore('2016-03-30') && moment(json.date).isSameOrAfter('2016-03-18')) {\n\n                    data.push({\n                        date: moment(json.date).toDate(),\n                        open: json.open,\n                        high: json.high,\n                        low: json.low,\n                        close: json.close,\n                        volume: json.volume,\n                    } as OHLCV)\n                }\n            })\n            switch (type) {\n                case \"m1\":\n                    this.chart.m1 = data\n                    break;\n                case \"m5\":\n                    this.chart.m5 = data\n                    break;\n                case \"m15\":\n                    this.chart.m15 = data\n                    break;\n                case \"h1\":\n                    this.chart.h1 = data\n                    break;\n                case \"h4\":\n                    this.chart.h4 = data\n                    break;\n                case \"d1\":\n                    this.chart.d1 = data\n                    break;\n                case \"w1\":\n                    this.chart.w1 = data\n                    break;\n                default:\n                    break;\n            }\n            console.log(\"finish set chart\", data, type)\n        } catch (err) {\n            console.log(\"setChart Error\", err)\n        }\n\n    }\n\n    setTransaction(jsonArr: object[]) {\n        try {\n            const data: Transaction[] = []\n            jsonArr.forEach((json: any) => {\n                data.push({\n                    id: json.id,\n                    date: moment(json.date).toDate(),\n                    amount: json.amount,\n                    price: json.price,\n                    value: json.value,\n                    symbol: json.symbol,\n                } as Transaction)\n            })\n            this.transactions = data\n        } catch (err) {\n            console.log(\"setTransaction Error\", err)\n        }\n    }\n}\n\nexport class OHLCV {\n    date: Date\n    open: number\n    high: number\n    low: number\n    close: number\n    volume: number\n\n    constructor(date: Date, open: number, high: number, low: number, close: number, volume: number) {\n        this.date = date\n        this.open = open\n        this.high = high\n        this.low = low\n        this.close = close\n        this.volume = volume\n    }\n\n    setJson(json: any) {\n        try {\n            this.date = moment(json.date).toDate()\n            this.open = json.open\n            this.high = json.high\n            this.low = json.low\n            this.close = json.close\n            this.volume = json.volume\n        } catch (err) {\n            console.log(\"setOHLCV Error\", err)\n        }\n    }\n\n    toJson() {\n        return {\n            \"date\": this.date,\n            \"open\": this.open,\n            \"high\": this.high,\n            \"low\": this.low,\n            \"close\": this.close,\n            \"volume\": this.volume\n        }\n    }\n}\n\nexport class Transaction {\n    id: string\n    date: Date\n    amount: number\n    price: number\n    value: number  // - amount * price\n    symbol: string // 株式名や通貨ペアなど\n\n    constructor(date: Date, amount: number, price: number, value: number, symbol: string) {\n        this.id = uuid()\n        this.date = date\n        this.amount = amount\n        this.price = price\n        this.value = value\n        this.symbol = symbol\n    }\n\n    setJson(json: any) {\n        try {\n            this.id = uuid()\n            this.date = moment(json.date).toDate()\n            this.amount = json.amount\n            this.price = json.price\n            this.value = json.value\n            this.symbol = json.symbol\n        } catch (err) {\n            console.log(\"setTransaction Error\", err)\n        }\n    }\n\n    toJson() {\n        return {\n            \"id\": this.id,\n            \"date\": this.date,\n            \"amount\": this.amount,\n            \"price\": this.price,\n            \"value\": this.value,\n            \"symbol\": this.symbol\n        }\n    }\n}\n\n\nexport class Indicator {\n    sma: SMA[]\n    constructor() {\n        this.sma = []\n    }\n\n}\n\nexport interface SMA {\n    window: number\n}","import axios from \"axios\"\nimport { OHLCV, Data, ChartType } from \"../types\";\n\nconst convertToChartData = (rowData: any) => {\n    const data = new Data()\n    const keys: ChartType[] = [\"m1\", \"m5\", \"m15\", \"h1\", \"h4\", \"d1\"]\n    console.log(rowData)\n    const rowChartData = rowData[\"chart\"]\n    const rowTransactionData = rowData[\"transactions\"]\n    keys.forEach((key: ChartType) => {\n        if (rowChartData[key].length !== 0) {\n            console.log(key)\n            data.setChart(JSON.parse(rowChartData[key]), key)\n        }\n    })\n    if (rowTransactionData.length !== 0) {\n        data.setTransaction(JSON.parse(rowTransactionData))\n    }\n    return data\n}\n\nexport const fetchData = async () => {\n    console.log(\"tes2\")\n    const rowData = await axios(\n        {\n            url: \"/data\",\n            method: 'get',\n            baseURL: 'http://localhost:8000',\n        }\n    )\n    console.log(\"tes\", rowData)\n    const chartData = convertToChartData(rowData.data)\n    console.log(\"chart: \", chartData)\n    return chartData\n}","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\n//@ts-ignore\nimport { TypeChooser } from \"react-stockcharts/lib/helper\";\nimport Chart from './chart';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport { Typography } from '@material-ui/core';\nimport { Data, ChartType, OHLCV, Indicator } from './types';\nimport { fetchData } from './utils/api';\nimport { useAsync } from 'react-async-hook';\n\n\nconst App = () => {\n\n  //const [playStatus, setPlayStatus] = useState({ \"play\": false, \"id\": undefined, \"speed\": 1000 })\n  const [chartStatus, setChartStatus] = useState<{ type: ChartType }>({ type: \"h1\" })\n\n  const asyncData = useAsync(fetchData, []);\n  useEffect(() => {\n\n  }, [])\n\n  useEffect(() => {\n    console.log(\"recieve message\")\n    //socket.on(\"connect\", () => console.log(\"connected!\"));\n    //socket.on(\"transactions\", (data: any) => console.log(\"transactions\", data));\n    //getDataSet()\n    //emittest()\n  }, [])\n\n  // useRunCommandの終了処理\n  /*useEffect(() => {\n    if (status.Type === \"FINISHED\" && status.Progress === 100) {\n      console.log(\"get data\", dataset)\n      setData(dataset)\n    }\n  }, [status]);*/\n\n  /*useEffect(() => {\n    if (playStatus.play === true && playStatus.id === undefined) {\n      console.log(\"useEffect\")\n      const id = setInterval(() => {\n        setData((preData: Data) => {\n          const tgtChart = preData.Chart[chartStatus.type]\n          const tgtdata = tgtChart[tgtChart.length - 1]\n          console.log(preData, tgtdata.date, moment(tgtdata.date).add(1, \"days\").toDate())\n          const nextData: Data = preData\n          nextData.Chart[chartStatus.type].push({\n            date: moment(tgtdata.date).add(1, \"days\"),\n            open: tgtdata.open,\n            high: tgtdata.high,\n            low: tgtdata.low,\n            close: tgtdata.close,\n            volume: tgtdata.volume,\n          } as OHLCV)\n          return nextData\n        })\n      }, playStatus.speed);\n      setPlayStatus((preStatus: any) => {\n        return { ...preStatus, id: id, play: true }\n      })\n    }\n  }, [playStatus]);\n\n  const play = () => {\n    console.log(\"play\")\n    setPlayStatus((preStatus: any) => {\n      return { ...preStatus, play: true }\n    })\n  }\n\n  const stop = () => {\n    console.log(\"stop\")\n    if (playStatus.id != undefined) {\n      clearInterval(playStatus.id)\n      setPlayStatus((preStatus: any) => {\n        return { ...preStatus, id: undefined, play: false }\n      })\n    }\n  }\n\n  const speedUp = () => {\n    console.log(\"speedup\")\n    setPlayStatus((preStatus: any) => {\n      clearInterval(playStatus.id)\n      return { ...preStatus, speed: preStatus.speed / 2, id: undefined }\n    })\n  }\n\n  const speedDown = () => {\n    console.log(\"speeddown\")\n    setPlayStatus((preStatus: any) => {\n      clearInterval(playStatus.id)\n      return { ...preStatus, speed: preStatus.speed * 2, id: undefined }\n    })\n  }*/\n\n  console.log(\"status: \", asyncData)\n  if (asyncData.loading) {\n    return <div>Loading...</div>\n  }\n\n  /*return (\n    <div>\n      {asyncHero.loading && <div>Loading</div>}\n      {asyncHero.error && <div>Error: {asyncHero.error.message}</div>}\n      {asyncHero.result && (\n        <div>\n          <div>Success!</div>\n          <div>Name: {asyncHero.result.Chart.h4.length}</div>\n        </div>\n      )}\n    </div>\n  )*/\n\n\n  return (\n    <div>\n      {asyncData.loading && <div>Loading</div>}\n      {asyncData.error && <div>Error: {asyncData.error.message}</div>}\n      {asyncData.result && (\n        <div>\n          <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n            {Object.entries(asyncData?.result?.chart).map(([key, value]) => {\n\n              if (value.length !== 0) {\n                switch (key) {\n                  case \"m1\":\n                    return (<Button onClick={() => setChartStatus({ ...chartStatus, type: \"m1\" })}>5M</Button>)\n                  case \"m5\":\n                    return (<Button onClick={() => setChartStatus({ ...chartStatus, type: \"m5\" })}>5M</Button>)\n                  case \"m15\":\n                    return (<Button onClick={() => setChartStatus({ ...chartStatus, type: \"m15\" })}>15M</Button>)\n                  case \"m15\":\n                    return (<Button onClick={() => setChartStatus({ ...chartStatus, type: \"m30\" })}>30M</Button>)\n                  case \"h1\":\n                    return (<Button onClick={() => setChartStatus({ ...chartStatus, type: \"h1\" })}>1H</Button>)\n                  case \"h4\":\n                    return (<Button onClick={() => setChartStatus({ ...chartStatus, type: \"h4\" })}>4H</Button>)\n                  case \"d1\":\n                    return (<Button onClick={() => setChartStatus({ ...chartStatus, type: \"d1\" })}>1D</Button>)\n                  case \"w1\":\n                    return (<Button onClick={() => setChartStatus({ ...chartStatus, type: \"w1\" })}>1W</Button>)\n                  default:\n                    break;\n                }\n              }\n            })}\n          </ButtonGroup>\n          {/*<ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n        <IconButton onClick={stop} color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n          <Stop />\n        </IconButton>\n        <IconButton onClick={speedDown} color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n          <SkipPrevious />\n        </IconButton>\n        <IconButton onClick={play} color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n          <PlayArrow />\n        </IconButton>\n        <IconButton onClick={speedUp} color=\"primary\" aria-label=\"upload picture\" component=\"span\">\n          <SkipNext />\n        </IconButton>\n      </ButtonGroup>*/}\n          <Typography>{\"chartType: \" + chartStatus.type}</Typography>\n          <TypeChooser>\n            {(type: any) => <Chart type={type} data={asyncData.result?.chart[chartStatus.type]} chartType={chartStatus.type} indicator={new Indicator()} transactions={asyncData.result?.transactions} />}\n          </TypeChooser>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}