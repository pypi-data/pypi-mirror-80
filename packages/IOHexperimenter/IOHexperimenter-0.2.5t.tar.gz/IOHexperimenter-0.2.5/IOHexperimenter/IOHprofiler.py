# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _IOHprofiler
else:
    import _IOHprofiler

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _IOHprofiler.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IOHprofiler.delete_SwigPyIterator

    def value(self):
        r"""value(self) -> PyObject *"""
        return _IOHprofiler.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _IOHprofiler.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(self, n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _IOHprofiler.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _IOHprofiler.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _IOHprofiler.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(self) -> SwigPyIterator"""
        return _IOHprofiler.SwigPyIterator_copy(self)

    def next(self):
        r"""next(self) -> PyObject *"""
        return _IOHprofiler.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(self) -> PyObject *"""
        return _IOHprofiler.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(self) -> PyObject *"""
        return _IOHprofiler.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _IOHprofiler.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _IOHprofiler.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(self, x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _IOHprofiler.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _IOHprofiler.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _IOHprofiler.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _IOHprofiler.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(self, n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(self, x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _IOHprofiler.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _IOHprofiler:
_IOHprofiler.SwigPyIterator_swigregister(SwigPyIterator)

class intvec(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _IOHprofiler.intvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _IOHprofiler.intvec___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _IOHprofiler.intvec___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< int >::size_type"""
        return _IOHprofiler.intvec___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> intvec

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _IOHprofiler.intvec___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.intvec___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _IOHprofiler.intvec___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _IOHprofiler.intvec___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> intvec

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _IOHprofiler.intvec___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _IOHprofiler.intvec___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< int >::value_type"""
        return _IOHprofiler.intvec_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _IOHprofiler.intvec_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _IOHprofiler.intvec_empty(self)

    def size(self):
        r"""size(self) -> std::vector< int >::size_type"""
        return _IOHprofiler.intvec_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _IOHprofiler.intvec_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< int >::iterator"""
        return _IOHprofiler.intvec_begin(self)

    def end(self):
        r"""end(self) -> std::vector< int >::iterator"""
        return _IOHprofiler.intvec_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< int >::reverse_iterator"""
        return _IOHprofiler.intvec_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< int >::reverse_iterator"""
        return _IOHprofiler.intvec_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _IOHprofiler.intvec_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< int >::allocator_type"""
        return _IOHprofiler.intvec_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _IOHprofiler.intvec_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(self, first, last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _IOHprofiler.intvec_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> intvec
        __init__(self, other) -> intvec

        Parameters
        ----------
        other: std::vector< int > const &

        __init__(self, size) -> intvec

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(self, size, value) -> intvec

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        _IOHprofiler.intvec_swiginit(self, _IOHprofiler.new_intvec(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _IOHprofiler.intvec_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< int >::value_type const &"""
        return _IOHprofiler.intvec_front(self)

    def back(self):
        r"""back(self) -> std::vector< int >::value_type const &"""
        return _IOHprofiler.intvec_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _IOHprofiler.intvec_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _IOHprofiler.intvec_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _IOHprofiler.intvec_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _IOHprofiler.intvec_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< int >::size_type"""
        return _IOHprofiler.intvec_capacity(self)
    __swig_destroy__ = _IOHprofiler.delete_intvec

# Register intvec in _IOHprofiler:
_IOHprofiler.intvec_swigregister(intvec)

class doublevec(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _IOHprofiler.doublevec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _IOHprofiler.doublevec___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _IOHprofiler.doublevec___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< double >::size_type"""
        return _IOHprofiler.doublevec___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> doublevec

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _IOHprofiler.doublevec___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.doublevec___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _IOHprofiler.doublevec___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _IOHprofiler.doublevec___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> doublevec

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _IOHprofiler.doublevec___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _IOHprofiler.doublevec___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< double >::value_type"""
        return _IOHprofiler.doublevec_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _IOHprofiler.doublevec_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _IOHprofiler.doublevec_empty(self)

    def size(self):
        r"""size(self) -> std::vector< double >::size_type"""
        return _IOHprofiler.doublevec_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _IOHprofiler.doublevec_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< double >::iterator"""
        return _IOHprofiler.doublevec_begin(self)

    def end(self):
        r"""end(self) -> std::vector< double >::iterator"""
        return _IOHprofiler.doublevec_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< double >::reverse_iterator"""
        return _IOHprofiler.doublevec_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< double >::reverse_iterator"""
        return _IOHprofiler.doublevec_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _IOHprofiler.doublevec_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< double >::allocator_type"""
        return _IOHprofiler.doublevec_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _IOHprofiler.doublevec_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(self, first, last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _IOHprofiler.doublevec_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> doublevec
        __init__(self, other) -> doublevec

        Parameters
        ----------
        other: std::vector< double > const &

        __init__(self, size) -> doublevec

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(self, size, value) -> doublevec

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        _IOHprofiler.doublevec_swiginit(self, _IOHprofiler.new_doublevec(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _IOHprofiler.doublevec_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< double >::value_type const &"""
        return _IOHprofiler.doublevec_front(self)

    def back(self):
        r"""back(self) -> std::vector< double >::value_type const &"""
        return _IOHprofiler.doublevec_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _IOHprofiler.doublevec_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _IOHprofiler.doublevec_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _IOHprofiler.doublevec_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _IOHprofiler.doublevec_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< double >::size_type"""
        return _IOHprofiler.doublevec_capacity(self)
    __swig_destroy__ = _IOHprofiler.delete_doublevec

# Register doublevec in _IOHprofiler:
_IOHprofiler.doublevec_swigregister(doublevec)

class stringvec(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _IOHprofiler.stringvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _IOHprofiler.stringvec___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _IOHprofiler.stringvec___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< std::string >::size_type"""
        return _IOHprofiler.stringvec___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> stringvec

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _IOHprofiler.stringvec___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _IOHprofiler.stringvec___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _IOHprofiler.stringvec___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _IOHprofiler.stringvec___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> stringvec

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _IOHprofiler.stringvec___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _IOHprofiler.stringvec___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< std::string >::value_type"""
        return _IOHprofiler.stringvec_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _IOHprofiler.stringvec_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _IOHprofiler.stringvec_empty(self)

    def size(self):
        r"""size(self) -> std::vector< std::string >::size_type"""
        return _IOHprofiler.stringvec_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _IOHprofiler.stringvec_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< std::string >::iterator"""
        return _IOHprofiler.stringvec_begin(self)

    def end(self):
        r"""end(self) -> std::vector< std::string >::iterator"""
        return _IOHprofiler.stringvec_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< std::string >::reverse_iterator"""
        return _IOHprofiler.stringvec_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< std::string >::reverse_iterator"""
        return _IOHprofiler.stringvec_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _IOHprofiler.stringvec_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< std::string >::allocator_type"""
        return _IOHprofiler.stringvec_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _IOHprofiler.stringvec_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(self, first, last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _IOHprofiler.stringvec_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> stringvec
        __init__(self, other) -> stringvec

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(self, size) -> stringvec

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(self, size, value) -> stringvec

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _IOHprofiler.stringvec_swiginit(self, _IOHprofiler.new_stringvec(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _IOHprofiler.stringvec_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< std::string >::value_type const &"""
        return _IOHprofiler.stringvec_front(self)

    def back(self):
        r"""back(self) -> std::vector< std::string >::value_type const &"""
        return _IOHprofiler.stringvec_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _IOHprofiler.stringvec_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _IOHprofiler.stringvec_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _IOHprofiler.stringvec_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _IOHprofiler.stringvec_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< std::string >::size_type"""
        return _IOHprofiler.stringvec_capacity(self)
    __swig_destroy__ = _IOHprofiler.delete_stringvec

# Register stringvec in _IOHprofiler:
_IOHprofiler.stringvec_swigregister(stringvec)

MAXLINESIZE = _IOHprofiler.MAXLINESIZE

MAXKEYNUMBER = _IOHprofiler.MAXKEYNUMBER

class _Dict(object):
    r"""Proxy of C++ _Dict class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> _Dict"""
        _IOHprofiler._Dict_swiginit(self, _IOHprofiler.new__Dict())
    __swig_destroy__ = _IOHprofiler.delete__Dict
    n = property(_IOHprofiler._Dict_n_get, _IOHprofiler._Dict_n_set, doc=r"""n""")
    size = property(_IOHprofiler._Dict_size_get, _IOHprofiler._Dict_size_set, doc=r"""size""")
    section = property(_IOHprofiler._Dict_section_get, _IOHprofiler._Dict_section_set, doc=r"""section""")
    value = property(_IOHprofiler._Dict_value_get, _IOHprofiler._Dict_value_set, doc=r"""value""")
    key = property(_IOHprofiler._Dict_key_get, _IOHprofiler._Dict_key_set, doc=r"""key""")

# Register _Dict in _IOHprofiler:
_IOHprofiler._Dict_swigregister(_Dict)
cvar = _IOHprofiler.cvar

EMPTY = _IOHprofiler.EMPTY

COMMENT = _IOHprofiler.COMMENT

SECTION = _IOHprofiler.SECTION

VALUE = _IOHprofiler.VALUE

CON_ERROR = _IOHprofiler.CON_ERROR

class IOHprofiler_configuration(object):
    r"""Proxy of C++ IOHprofiler_configuration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> IOHprofiler_configuration"""
        _IOHprofiler.IOHprofiler_configuration_swiginit(self, _IOHprofiler.new_IOHprofiler_configuration())

    def set_Dict(self, dict, section, key, value):
        r"""
        set_Dict(self, dict, section, key, value) -> int

        Parameters
        ----------
        dict: _Dict &
        section: std::string const
        key: std::string const
        value: std::string const

        """
        return _IOHprofiler.IOHprofiler_configuration_set_Dict(self, dict, section, key, value)

    def get_Dict_String(self, dict, section, key):
        r"""
        get_Dict_String(self, dict, section, key) -> std::string

        Parameters
        ----------
        dict: _Dict const
        section: std::string const
        key: std::string const

        """
        return _IOHprofiler.IOHprofiler_configuration_get_Dict_String(self, dict, section, key)

    def get_Dict_int_vector(self, dict, section, key, _min, _max):
        r"""
        get_Dict_int_vector(self, dict, section, key, _min, _max) -> intvec

        Parameters
        ----------
        dict: _Dict const
        section: std::string const
        key: std::string const
        _min: int const
        _max: int const

        """
        return _IOHprofiler.IOHprofiler_configuration_get_Dict_int_vector(self, dict, section, key, _min, _max)

    def get_Dict_Int(self, dict, section, key):
        r"""
        get_Dict_Int(self, dict, section, key) -> int

        Parameters
        ----------
        dict: _Dict const
        section: std::string const
        key: std::string const

        """
        return _IOHprofiler.IOHprofiler_configuration_get_Dict_Int(self, dict, section, key)

    def get_Dict_bool(self, dict, section, key):
        r"""
        get_Dict_bool(self, dict, section, key) -> bool

        Parameters
        ----------
        dict: _Dict const
        section: std::string const
        key: std::string const

        """
        return _IOHprofiler.IOHprofiler_configuration_get_Dict_bool(self, dict, section, key)

    def add_Line(self, input_line, section, key, value):
        r"""
        add_Line(self, input_line, section, key, value) -> linecontent

        Parameters
        ----------
        input_line: std::string const
        section: std::string &
        key: std::string &
        value: std::string &

        """
        return _IOHprofiler.IOHprofiler_configuration_add_Line(self, input_line, section, key, value)

    def load(self, filename):
        r"""
        load(self, filename) -> _Dict

        Parameters
        ----------
        filename: std::string const

        """
        return _IOHprofiler.IOHprofiler_configuration_load(self, filename)

    def readcfg(self, filename):
        r"""
        readcfg(self, filename)

        Parameters
        ----------
        filename: std::string

        """
        return _IOHprofiler.IOHprofiler_configuration_readcfg(self, filename)

    def get_suite_name(self):
        r"""get_suite_name(self) -> std::string"""
        return _IOHprofiler.IOHprofiler_configuration_get_suite_name(self)

    def get_problem_id(self):
        r"""get_problem_id(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_configuration_get_problem_id(self)

    def get_instance_id(self):
        r"""get_instance_id(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_configuration_get_instance_id(self)

    def get_dimension(self):
        r"""get_dimension(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_configuration_get_dimension(self)

    def get_output_directory(self):
        r"""get_output_directory(self) -> std::string"""
        return _IOHprofiler.IOHprofiler_configuration_get_output_directory(self)

    def get_result_folder(self):
        r"""get_result_folder(self) -> std::string"""
        return _IOHprofiler.IOHprofiler_configuration_get_result_folder(self)

    def get_algorithm_info(self):
        r"""get_algorithm_info(self) -> std::string"""
        return _IOHprofiler.IOHprofiler_configuration_get_algorithm_info(self)

    def get_algorithm_name(self):
        r"""get_algorithm_name(self) -> std::string"""
        return _IOHprofiler.IOHprofiler_configuration_get_algorithm_name(self)

    def get_complete_triggers(self):
        r"""get_complete_triggers(self) -> bool"""
        return _IOHprofiler.IOHprofiler_configuration_get_complete_triggers(self)

    def get_update_triggers(self):
        r"""get_update_triggers(self) -> bool"""
        return _IOHprofiler.IOHprofiler_configuration_get_update_triggers(self)

    def get_base_evaluation_triggers(self):
        r"""get_base_evaluation_triggers(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_configuration_get_base_evaluation_triggers(self)

    def get_number_target_triggers(self):
        r"""get_number_target_triggers(self) -> int"""
        return _IOHprofiler.IOHprofiler_configuration_get_number_target_triggers(self)

    def get_number_interval_triggers(self):
        r"""get_number_interval_triggers(self) -> int"""
        return _IOHprofiler.IOHprofiler_configuration_get_number_interval_triggers(self)
    __swig_destroy__ = _IOHprofiler.delete_IOHprofiler_configuration

# Register IOHprofiler_configuration in _IOHprofiler:
_IOHprofiler.IOHprofiler_configuration_swigregister(IOHprofiler_configuration)

class IOHprofiler_observer(object):
    r"""Proxy of C++ IOHprofiler_observer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> IOHprofiler_observer"""
        _IOHprofiler.IOHprofiler_observer_swiginit(self, _IOHprofiler.new_IOHprofiler_observer())
    __swig_destroy__ = _IOHprofiler.delete_IOHprofiler_observer

    def set_complete_flag(self, complete_flag):
        r"""
        set_complete_flag(self, complete_flag)

        Parameters
        ----------
        complete_flag: bool

        """
        return _IOHprofiler.IOHprofiler_observer_set_complete_flag(self, complete_flag)

    def complete_status(self):
        r"""complete_status(self) -> bool"""
        return _IOHprofiler.IOHprofiler_observer_complete_status(self)

    def complete_trigger(self):
        r"""complete_trigger(self) -> bool"""
        return _IOHprofiler.IOHprofiler_observer_complete_trigger(self)

    def set_interval(self, interval):
        r"""
        set_interval(self, interval)

        Parameters
        ----------
        interval: int

        """
        return _IOHprofiler.IOHprofiler_observer_set_interval(self, interval)

    def interval_status(self):
        r"""interval_status(self) -> bool"""
        return _IOHprofiler.IOHprofiler_observer_interval_status(self)

    def interval_trigger(self, evaluations):
        r"""
        interval_trigger(self, evaluations) -> bool

        Parameters
        ----------
        evaluations: size_t

        """
        return _IOHprofiler.IOHprofiler_observer_interval_trigger(self, evaluations)

    def set_update_flag(self, update_flag):
        r"""
        set_update_flag(self, update_flag)

        Parameters
        ----------
        update_flag: bool

        """
        return _IOHprofiler.IOHprofiler_observer_set_update_flag(self, update_flag)

    def update_trigger(self, fitness, optimization_type):
        r"""
        update_trigger(self, fitness, optimization_type) -> bool

        Parameters
        ----------
        fitness: double
        optimization_type: enum IOH_optimization_type

        """
        return _IOHprofiler.IOHprofiler_observer_update_trigger(self, fitness, optimization_type)

    def update_status(self):
        r"""update_status(self) -> bool"""
        return _IOHprofiler.IOHprofiler_observer_update_status(self)

    def set_time_points(self, time_points, number_of_evaluations, time_points_exp_base1=10, time_points_exp_base2=10):
        r"""
        set_time_points(self, time_points, number_of_evaluations, time_points_exp_base1=10, time_points_exp_base2=10)

        Parameters
        ----------
        time_points: std::vector< int,std::allocator< int > > const &
        number_of_evaluations: int const
        time_points_exp_base1: int const
        time_points_exp_base2: int const

        """
        return _IOHprofiler.IOHprofiler_observer_set_time_points(self, time_points, number_of_evaluations, time_points_exp_base1, time_points_exp_base2)

    def time_points_status(self):
        r"""time_points_status(self) -> bool"""
        return _IOHprofiler.IOHprofiler_observer_time_points_status(self)

    def time_points_trigger(self, evaluations):
        r"""
        time_points_trigger(self, evaluations) -> bool

        Parameters
        ----------
        evaluations: size_t

        """
        return _IOHprofiler.IOHprofiler_observer_time_points_trigger(self, evaluations)

    def reset_observer(self, optimization_type):
        r"""
        reset_observer(self, optimization_type)

        Parameters
        ----------
        optimization_type: enum IOH_optimization_type const

        """
        return _IOHprofiler.IOHprofiler_observer_reset_observer(self, optimization_type)

    def do_log(self, log_info):
        r"""
        do_log(self, log_info)

        Parameters
        ----------
        log_info: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_observer_do_log(self, log_info)

    def track_problem(self, *args):
        r"""
        track_problem(self, problem)

        Parameters
        ----------
        problem: IOHprofiler_problem< int > const &

        track_problem(self, problem)

        Parameters
        ----------
        problem: IOHprofiler_problem< double > const &

        """
        return _IOHprofiler.IOHprofiler_observer_track_problem(self, *args)

# Register IOHprofiler_observer in _IOHprofiler:
_IOHprofiler.IOHprofiler_observer_swigregister(IOHprofiler_observer)

class IOHprofiler_Problem_int(object):
    r"""Proxy of C++ IOHprofiler_problem< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, instance_id=DEFAULT_INSTANCE, dimension=DEFAULT_DIMENSION) -> IOHprofiler_Problem_int

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.IOHprofiler_Problem_int_swiginit(self, _IOHprofiler.new_IOHprofiler_Problem_int(*args))
    __swig_destroy__ = _IOHprofiler.delete_IOHprofiler_Problem_int

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_int_internal_evaluate(self, x)

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.IOHprofiler_Problem_int_prepare_problem(self)

    def evaluate(self, x):
        r"""
        evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > >

        """
        return _IOHprofiler.IOHprofiler_Problem_int_evaluate(self, x)

    def customize_optimal(self):
        r"""customize_optimal(self)"""
        return _IOHprofiler.IOHprofiler_Problem_int_customize_optimal(self)

    def calc_optimal(self):
        r"""calc_optimal(self)"""
        return _IOHprofiler.IOHprofiler_Problem_int_calc_optimal(self)

    def reset_problem(self):
        r"""reset_problem(self)"""
        return _IOHprofiler.IOHprofiler_Problem_int_reset_problem(self)

    def loggerCOCOInfo(self):
        r"""loggerCOCOInfo(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_int_loggerCOCOInfo(self)

    def loggerInfo(self):
        r"""loggerInfo(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_int_loggerInfo(self)

    def IOHprofiler_hit_optimal(self):
        r"""IOHprofiler_hit_optimal(self) -> bool"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_hit_optimal(self)

    def IOHprofiler_get_problem_id(self):
        r"""IOHprofiler_get_problem_id(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_problem_id(self)

    def IOHprofiler_set_problem_id(self, problem_id):
        r"""
        IOHprofiler_set_problem_id(self, problem_id)

        Parameters
        ----------
        problem_id: int

        """
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_problem_id(self, problem_id)

    def IOHprofiler_get_instance_id(self):
        r"""IOHprofiler_get_instance_id(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_instance_id(self)

    def IOHprofiler_set_instance_id(self, instance_id):
        r"""
        IOHprofiler_set_instance_id(self, instance_id)

        Parameters
        ----------
        instance_id: int

        """
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_instance_id(self, instance_id)

    def IOHprofiler_get_problem_name(self):
        r"""IOHprofiler_get_problem_name(self) -> std::string"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_problem_name(self)

    def IOHprofiler_set_problem_name(self, problem_name):
        r"""
        IOHprofiler_set_problem_name(self, problem_name)

        Parameters
        ----------
        problem_name: std::string

        """
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_problem_name(self, problem_name)

    def IOHprofiler_get_problem_type(self):
        r"""IOHprofiler_get_problem_type(self) -> std::string"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_problem_type(self)

    def IOHprofiler_set_problem_type(self, problem_type):
        r"""
        IOHprofiler_set_problem_type(self, problem_type)

        Parameters
        ----------
        problem_type: std::string

        """
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_problem_type(self, problem_type)

    def IOHprofiler_get_lowerbound(self):
        r"""IOHprofiler_get_lowerbound(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_lowerbound(self)

    def IOHprofiler_set_lowerbound(self, *args):
        r"""
        IOHprofiler_set_lowerbound(self, lowerbound)

        Parameters
        ----------
        lowerbound: int

        IOHprofiler_set_lowerbound(self, lowerbound)

        Parameters
        ----------
        lowerbound: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_lowerbound(self, *args)

    def IOHprofiler_get_upperbound(self):
        r"""IOHprofiler_get_upperbound(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_upperbound(self)

    def IOHprofiler_set_upperbound(self, *args):
        r"""
        IOHprofiler_set_upperbound(self, upperbound)

        Parameters
        ----------
        upperbound: int

        IOHprofiler_set_upperbound(self, upperbound)

        Parameters
        ----------
        upperbound: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_upperbound(self, *args)

    def IOHprofiler_get_number_of_variables(self):
        r"""IOHprofiler_get_number_of_variables(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_number_of_variables(self)

    def IOHprofiler_set_number_of_variables(self, *args):
        r"""
        IOHprofiler_set_number_of_variables(self, number_of_variables)

        Parameters
        ----------
        number_of_variables: int const

        IOHprofiler_set_number_of_variables(self, number_of_variables, best_variables)

        Parameters
        ----------
        number_of_variables: int const
        best_variables: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_number_of_variables(self, *args)

    def IOHprofiler_get_number_of_objectives(self):
        r"""IOHprofiler_get_number_of_objectives(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_number_of_objectives(self)

    def IOHprofiler_set_number_of_objectives(self, number_of_objectives):
        r"""
        IOHprofiler_set_number_of_objectives(self, number_of_objectives)

        Parameters
        ----------
        number_of_objectives: int const

        """
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_number_of_objectives(self, number_of_objectives)

    def IOHprofiler_get_raw_objectives(self):
        r"""IOHprofiler_get_raw_objectives(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_raw_objectives(self)

    def IOHprofiler_get_transformed_objectives(self):
        r"""IOHprofiler_get_transformed_objectives(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_transformed_objectives(self)

    def IOHprofiler_get_transformed_number_of_variables(self):
        r"""IOHprofiler_get_transformed_number_of_variables(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_transformed_number_of_variables(self)

    def IOHprofiler_get_transformed_variables(self):
        r"""IOHprofiler_get_transformed_variables(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_transformed_variables(self)

    def IOHprofiler_get_best_variables(self):
        r"""IOHprofiler_get_best_variables(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_best_variables(self)

    def IOHprofiler_set_best_variables(self, *args):
        r"""
        IOHprofiler_set_best_variables(self, best_variables)

        Parameters
        ----------
        best_variables: int const

        IOHprofiler_set_best_variables(self, best_variables)

        Parameters
        ----------
        best_variables: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_best_variables(self, *args)

    def IOHprofiler_get_optimal(self):
        r"""IOHprofiler_get_optimal(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_optimal(self)

    def IOHprofiler_set_optimal(self, *args):
        r"""
        IOHprofiler_set_optimal(self, optimal)

        Parameters
        ----------
        optimal: double const

        IOHprofiler_set_optimal(self, optimal)

        Parameters
        ----------
        optimal: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_optimal(self, *args)

    def IOHprofiler_evaluate_optimal(self, *args):
        r"""
        IOHprofiler_evaluate_optimal(self, best_variables)

        Parameters
        ----------
        best_variables: std::vector< int,std::allocator< int > >

        IOHprofiler_evaluate_optimal(self)
        """
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_evaluate_optimal(self, *args)

    def IOHprofiler_get_evaluations(self):
        r"""IOHprofiler_get_evaluations(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_evaluations(self)

    def IOHprofiler_get_best_so_far_raw_objectives(self):
        r"""IOHprofiler_get_best_so_far_raw_objectives(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_best_so_far_raw_objectives(self)

    def IOHprofiler_get_best_so_far_raw_evaluations(self):
        r"""IOHprofiler_get_best_so_far_raw_evaluations(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_best_so_far_raw_evaluations(self)

    def IOHprofiler_get_best_so_far_transformed_objectives(self):
        r"""IOHprofiler_get_best_so_far_transformed_objectives(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_best_so_far_transformed_objectives(self)

    def IOHprofiler_get_best_so_far_transformed_evaluations(self):
        r"""IOHprofiler_get_best_so_far_transformed_evaluations(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_best_so_far_transformed_evaluations(self)

    def IOHprofiler_get_optimization_type(self):
        r"""IOHprofiler_get_optimization_type(self) -> IOH_optimization_type"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_get_optimization_type(self)

    def IOHprofiler_set_as_maximization(self):
        r"""IOHprofiler_set_as_maximization(self)"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_as_maximization(self)

    def IOHprofiler_set_as_minimization(self):
        r"""IOHprofiler_set_as_minimization(self)"""
        return _IOHprofiler.IOHprofiler_Problem_int_IOHprofiler_set_as_minimization(self)

# Register IOHprofiler_Problem_int in _IOHprofiler:
_IOHprofiler.IOHprofiler_Problem_int_swigregister(IOHprofiler_Problem_int)

class IOHprofiler_Problem_double(object):
    r"""Proxy of C++ IOHprofiler_problem< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, instance_id=DEFAULT_INSTANCE, dimension=DEFAULT_DIMENSION) -> IOHprofiler_Problem_double

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.IOHprofiler_Problem_double_swiginit(self, _IOHprofiler.new_IOHprofiler_Problem_double(*args))
    __swig_destroy__ = _IOHprofiler.delete_IOHprofiler_Problem_double

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_double_internal_evaluate(self, x)

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.IOHprofiler_Problem_double_prepare_problem(self)

    def evaluate(self, x):
        r"""
        evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > >

        """
        return _IOHprofiler.IOHprofiler_Problem_double_evaluate(self, x)

    def customize_optimal(self):
        r"""customize_optimal(self)"""
        return _IOHprofiler.IOHprofiler_Problem_double_customize_optimal(self)

    def calc_optimal(self):
        r"""calc_optimal(self)"""
        return _IOHprofiler.IOHprofiler_Problem_double_calc_optimal(self)

    def reset_problem(self):
        r"""reset_problem(self)"""
        return _IOHprofiler.IOHprofiler_Problem_double_reset_problem(self)

    def loggerCOCOInfo(self):
        r"""loggerCOCOInfo(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_double_loggerCOCOInfo(self)

    def loggerInfo(self):
        r"""loggerInfo(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_double_loggerInfo(self)

    def IOHprofiler_hit_optimal(self):
        r"""IOHprofiler_hit_optimal(self) -> bool"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_hit_optimal(self)

    def IOHprofiler_get_problem_id(self):
        r"""IOHprofiler_get_problem_id(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_problem_id(self)

    def IOHprofiler_set_problem_id(self, problem_id):
        r"""
        IOHprofiler_set_problem_id(self, problem_id)

        Parameters
        ----------
        problem_id: int

        """
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_problem_id(self, problem_id)

    def IOHprofiler_get_instance_id(self):
        r"""IOHprofiler_get_instance_id(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_instance_id(self)

    def IOHprofiler_set_instance_id(self, instance_id):
        r"""
        IOHprofiler_set_instance_id(self, instance_id)

        Parameters
        ----------
        instance_id: int

        """
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_instance_id(self, instance_id)

    def IOHprofiler_get_problem_name(self):
        r"""IOHprofiler_get_problem_name(self) -> std::string"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_problem_name(self)

    def IOHprofiler_set_problem_name(self, problem_name):
        r"""
        IOHprofiler_set_problem_name(self, problem_name)

        Parameters
        ----------
        problem_name: std::string

        """
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_problem_name(self, problem_name)

    def IOHprofiler_get_problem_type(self):
        r"""IOHprofiler_get_problem_type(self) -> std::string"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_problem_type(self)

    def IOHprofiler_set_problem_type(self, problem_type):
        r"""
        IOHprofiler_set_problem_type(self, problem_type)

        Parameters
        ----------
        problem_type: std::string

        """
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_problem_type(self, problem_type)

    def IOHprofiler_get_lowerbound(self):
        r"""IOHprofiler_get_lowerbound(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_lowerbound(self)

    def IOHprofiler_set_lowerbound(self, *args):
        r"""
        IOHprofiler_set_lowerbound(self, lowerbound)

        Parameters
        ----------
        lowerbound: int

        IOHprofiler_set_lowerbound(self, lowerbound)

        Parameters
        ----------
        lowerbound: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_lowerbound(self, *args)

    def IOHprofiler_get_upperbound(self):
        r"""IOHprofiler_get_upperbound(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_upperbound(self)

    def IOHprofiler_set_upperbound(self, *args):
        r"""
        IOHprofiler_set_upperbound(self, upperbound)

        Parameters
        ----------
        upperbound: int

        IOHprofiler_set_upperbound(self, upperbound)

        Parameters
        ----------
        upperbound: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_upperbound(self, *args)

    def IOHprofiler_get_number_of_variables(self):
        r"""IOHprofiler_get_number_of_variables(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_number_of_variables(self)

    def IOHprofiler_set_number_of_variables(self, *args):
        r"""
        IOHprofiler_set_number_of_variables(self, number_of_variables)

        Parameters
        ----------
        number_of_variables: int const

        IOHprofiler_set_number_of_variables(self, number_of_variables, best_variables)

        Parameters
        ----------
        number_of_variables: int const
        best_variables: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_number_of_variables(self, *args)

    def IOHprofiler_get_number_of_objectives(self):
        r"""IOHprofiler_get_number_of_objectives(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_number_of_objectives(self)

    def IOHprofiler_set_number_of_objectives(self, number_of_objectives):
        r"""
        IOHprofiler_set_number_of_objectives(self, number_of_objectives)

        Parameters
        ----------
        number_of_objectives: int const

        """
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_number_of_objectives(self, number_of_objectives)

    def IOHprofiler_get_raw_objectives(self):
        r"""IOHprofiler_get_raw_objectives(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_raw_objectives(self)

    def IOHprofiler_get_transformed_objectives(self):
        r"""IOHprofiler_get_transformed_objectives(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_transformed_objectives(self)

    def IOHprofiler_get_transformed_number_of_variables(self):
        r"""IOHprofiler_get_transformed_number_of_variables(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_transformed_number_of_variables(self)

    def IOHprofiler_get_transformed_variables(self):
        r"""IOHprofiler_get_transformed_variables(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_transformed_variables(self)

    def IOHprofiler_get_best_variables(self):
        r"""IOHprofiler_get_best_variables(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_best_variables(self)

    def IOHprofiler_set_best_variables(self, *args):
        r"""
        IOHprofiler_set_best_variables(self, best_variables)

        Parameters
        ----------
        best_variables: double const

        IOHprofiler_set_best_variables(self, best_variables)

        Parameters
        ----------
        best_variables: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_best_variables(self, *args)

    def IOHprofiler_get_optimal(self):
        r"""IOHprofiler_get_optimal(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_optimal(self)

    def IOHprofiler_set_optimal(self, *args):
        r"""
        IOHprofiler_set_optimal(self, optimal)

        Parameters
        ----------
        optimal: double const

        IOHprofiler_set_optimal(self, optimal)

        Parameters
        ----------
        optimal: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_optimal(self, *args)

    def IOHprofiler_evaluate_optimal(self, *args):
        r"""
        IOHprofiler_evaluate_optimal(self, best_variables)

        Parameters
        ----------
        best_variables: std::vector< double,std::allocator< double > >

        IOHprofiler_evaluate_optimal(self)
        """
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_evaluate_optimal(self, *args)

    def IOHprofiler_get_evaluations(self):
        r"""IOHprofiler_get_evaluations(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_evaluations(self)

    def IOHprofiler_get_best_so_far_raw_objectives(self):
        r"""IOHprofiler_get_best_so_far_raw_objectives(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_best_so_far_raw_objectives(self)

    def IOHprofiler_get_best_so_far_raw_evaluations(self):
        r"""IOHprofiler_get_best_so_far_raw_evaluations(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_best_so_far_raw_evaluations(self)

    def IOHprofiler_get_best_so_far_transformed_objectives(self):
        r"""IOHprofiler_get_best_so_far_transformed_objectives(self) -> doublevec"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_best_so_far_transformed_objectives(self)

    def IOHprofiler_get_best_so_far_transformed_evaluations(self):
        r"""IOHprofiler_get_best_so_far_transformed_evaluations(self) -> int"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_best_so_far_transformed_evaluations(self)

    def IOHprofiler_get_optimization_type(self):
        r"""IOHprofiler_get_optimization_type(self) -> IOH_optimization_type"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_get_optimization_type(self)

    def IOHprofiler_set_as_maximization(self):
        r"""IOHprofiler_set_as_maximization(self)"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_as_maximization(self)

    def IOHprofiler_set_as_minimization(self):
        r"""IOHprofiler_set_as_minimization(self)"""
        return _IOHprofiler.IOHprofiler_Problem_double_IOHprofiler_set_as_minimization(self)

# Register IOHprofiler_Problem_double in _IOHprofiler:
_IOHprofiler.IOHprofiler_Problem_double_swigregister(IOHprofiler_Problem_double)

class intProblemPtr(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< IOHprofiler_problem< int > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _IOHprofiler.intProblemPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _IOHprofiler.intProblemPtr___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _IOHprofiler.intProblemPtr___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::size_type"""
        return _IOHprofiler.intProblemPtr___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> intProblemPtr

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::difference_type
        j: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::difference_type

        """
        return _IOHprofiler.intProblemPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::difference_type
        j: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::difference_type
        j: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::difference_type
        v: std::vector< std::shared_ptr< IOHprofiler_problem< int > >,std::allocator< std::shared_ptr< IOHprofiler_problem< int > > > > const &

        """
        return _IOHprofiler.intProblemPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::difference_type
        j: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::difference_type

        """
        return _IOHprofiler.intProblemPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _IOHprofiler.intProblemPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> intProblemPtr

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::difference_type

        """
        return _IOHprofiler.intProblemPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< IOHprofiler_problem< int > >,std::allocator< std::shared_ptr< IOHprofiler_problem< int > > > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::difference_type
        x: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type const &

        """
        return _IOHprofiler.intProblemPtr___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type"""
        return _IOHprofiler.intProblemPtr_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type const &

        """
        return _IOHprofiler.intProblemPtr_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _IOHprofiler.intProblemPtr_empty(self)

    def size(self):
        r"""size(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::size_type"""
        return _IOHprofiler.intProblemPtr_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< IOHprofiler_problem< int > > > &

        """
        return _IOHprofiler.intProblemPtr_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::iterator"""
        return _IOHprofiler.intProblemPtr_begin(self)

    def end(self):
        r"""end(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::iterator"""
        return _IOHprofiler.intProblemPtr_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::reverse_iterator"""
        return _IOHprofiler.intProblemPtr_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::reverse_iterator"""
        return _IOHprofiler.intProblemPtr_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _IOHprofiler.intProblemPtr_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::allocator_type"""
        return _IOHprofiler.intProblemPtr_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _IOHprofiler.intProblemPtr_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::iterator

        erase(self, first, last) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::iterator
        last: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::iterator

        """
        return _IOHprofiler.intProblemPtr_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> intProblemPtr
        __init__(self, other) -> intProblemPtr

        Parameters
        ----------
        other: std::vector< std::shared_ptr< IOHprofiler_problem< int > > > const &

        __init__(self, size) -> intProblemPtr

        Parameters
        ----------
        size: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::size_type

        __init__(self, size, value) -> intProblemPtr

        Parameters
        ----------
        size: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::size_type
        value: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type const &

        """
        _IOHprofiler.intProblemPtr_swiginit(self, _IOHprofiler.new_intProblemPtr(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type const &

        """
        return _IOHprofiler.intProblemPtr_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type const &"""
        return _IOHprofiler.intProblemPtr_front(self)

    def back(self):
        r"""back(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type const &"""
        return _IOHprofiler.intProblemPtr_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::size_type
        x: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type const &

        """
        return _IOHprofiler.intProblemPtr_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::size_type
        x: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type const &

        """
        return _IOHprofiler.intProblemPtr_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::iterator
        x: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::iterator
        n: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::size_type
        x: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::value_type const &

        """
        return _IOHprofiler.intProblemPtr_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::size_type

        """
        return _IOHprofiler.intProblemPtr_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< int > > >::size_type"""
        return _IOHprofiler.intProblemPtr_capacity(self)
    __swig_destroy__ = _IOHprofiler.delete_intProblemPtr

# Register intProblemPtr in _IOHprofiler:
_IOHprofiler.intProblemPtr_swigregister(intProblemPtr)

class doubleProblemPtr(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< IOHprofiler_problem< double > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _IOHprofiler.doubleProblemPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _IOHprofiler.doubleProblemPtr___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _IOHprofiler.doubleProblemPtr___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::size_type"""
        return _IOHprofiler.doubleProblemPtr___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> doubleProblemPtr

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::difference_type
        j: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::difference_type

        """
        return _IOHprofiler.doubleProblemPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::difference_type
        j: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::difference_type
        j: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::difference_type
        v: std::vector< std::shared_ptr< IOHprofiler_problem< double > >,std::allocator< std::shared_ptr< IOHprofiler_problem< double > > > > const &

        """
        return _IOHprofiler.doubleProblemPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::difference_type
        j: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::difference_type

        """
        return _IOHprofiler.doubleProblemPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _IOHprofiler.doubleProblemPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> doubleProblemPtr

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(self, i) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::difference_type

        """
        return _IOHprofiler.doubleProblemPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< IOHprofiler_problem< double > >,std::allocator< std::shared_ptr< IOHprofiler_problem< double > > > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::difference_type
        x: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type const &

        """
        return _IOHprofiler.doubleProblemPtr___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type"""
        return _IOHprofiler.doubleProblemPtr_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type const &

        """
        return _IOHprofiler.doubleProblemPtr_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _IOHprofiler.doubleProblemPtr_empty(self)

    def size(self):
        r"""size(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::size_type"""
        return _IOHprofiler.doubleProblemPtr_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< IOHprofiler_problem< double > > > &

        """
        return _IOHprofiler.doubleProblemPtr_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::iterator"""
        return _IOHprofiler.doubleProblemPtr_begin(self)

    def end(self):
        r"""end(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::iterator"""
        return _IOHprofiler.doubleProblemPtr_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::reverse_iterator"""
        return _IOHprofiler.doubleProblemPtr_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::reverse_iterator"""
        return _IOHprofiler.doubleProblemPtr_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _IOHprofiler.doubleProblemPtr_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::allocator_type"""
        return _IOHprofiler.doubleProblemPtr_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _IOHprofiler.doubleProblemPtr_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::iterator

        erase(self, first, last) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::iterator
        last: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::iterator

        """
        return _IOHprofiler.doubleProblemPtr_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> doubleProblemPtr
        __init__(self, other) -> doubleProblemPtr

        Parameters
        ----------
        other: std::vector< std::shared_ptr< IOHprofiler_problem< double > > > const &

        __init__(self, size) -> doubleProblemPtr

        Parameters
        ----------
        size: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::size_type

        __init__(self, size, value) -> doubleProblemPtr

        Parameters
        ----------
        size: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::size_type
        value: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type const &

        """
        _IOHprofiler.doubleProblemPtr_swiginit(self, _IOHprofiler.new_doubleProblemPtr(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type const &

        """
        return _IOHprofiler.doubleProblemPtr_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type const &"""
        return _IOHprofiler.doubleProblemPtr_front(self)

    def back(self):
        r"""back(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type const &"""
        return _IOHprofiler.doubleProblemPtr_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::size_type
        x: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type const &

        """
        return _IOHprofiler.doubleProblemPtr_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::size_type
        x: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type const &

        """
        return _IOHprofiler.doubleProblemPtr_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::iterator
        x: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::iterator
        n: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::size_type
        x: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::value_type const &

        """
        return _IOHprofiler.doubleProblemPtr_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::size_type

        """
        return _IOHprofiler.doubleProblemPtr_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< std::shared_ptr< IOHprofiler_problem< double > > >::size_type"""
        return _IOHprofiler.doubleProblemPtr_capacity(self)
    __swig_destroy__ = _IOHprofiler.delete_doubleProblemPtr

# Register doubleProblemPtr in _IOHprofiler:
_IOHprofiler.doubleProblemPtr_swigregister(doubleProblemPtr)

IOH_PI = _IOHprofiler.IOH_PI

DEFAULT_SEED = _IOHprofiler.DEFAULT_SEED

RND_MULTIPLIER = _IOHprofiler.RND_MULTIPLIER

RND_MODULUS = _IOHprofiler.RND_MODULUS

RND_MODULUS_DIV = _IOHprofiler.RND_MODULUS_DIV

RND_MOD_MULTIPLIER = _IOHprofiler.RND_MOD_MULTIPLIER

IOHPROFILER_SHORT_LAG = _IOHprofiler.IOHPROFILER_SHORT_LAG

IOHPROFILER_LONG_LAG = _IOHprofiler.IOHPROFILER_LONG_LAG

class IOHprofiler_random(object):
    r"""Proxy of C++ IOHprofiler_random class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=1000):
        r"""
        __init__(self, seed=1000) -> IOHprofiler_random

        Parameters
        ----------
        seed: uint32_t

        """
        _IOHprofiler.IOHprofiler_random_swiginit(self, _IOHprofiler.new_IOHprofiler_random(seed))

    def IOHprofiler_random_generate(self):
        r"""IOHprofiler_random_generate(self)"""
        return _IOHprofiler.IOHprofiler_random_IOHprofiler_random_generate(self)

    @staticmethod
    def _lcg_rand(inseed):
        r"""
        _lcg_rand(inseed) -> long

        Parameters
        ----------
        inseed: long const &

        """
        return _IOHprofiler.IOHprofiler_random__lcg_rand(inseed)

    @staticmethod
    def IOHprofiler_gauss(N, inseed):
        r"""
        IOHprofiler_gauss(N, inseed) -> doublevec

        Parameters
        ----------
        N: size_t const
        inseed: long const

        """
        return _IOHprofiler.IOHprofiler_random_IOHprofiler_gauss(N, inseed)

    def IOHprofiler_uniform_rand(self, *args):
        r"""
        IOHprofiler_uniform_rand(self, N, inseed, rand_vec)

        Parameters
        ----------
        N: size_t const &
        inseed: long const &
        rand_vec: std::vector< double,std::allocator< double > > &

        IOHprofiler_uniform_rand(self) -> double
        """
        return _IOHprofiler.IOHprofiler_random_IOHprofiler_uniform_rand(self, *args)

    def IOHprofiler_normal_rand(self):
        r"""IOHprofiler_normal_rand(self) -> double"""
        return _IOHprofiler.IOHprofiler_random_IOHprofiler_normal_rand(self)
    __swig_destroy__ = _IOHprofiler.delete_IOHprofiler_random

# Register IOHprofiler_random in _IOHprofiler:
_IOHprofiler.IOHprofiler_random_swigregister(IOHprofiler_random)

def IOHprofiler_random__lcg_rand(inseed):
    r"""
    IOHprofiler_random__lcg_rand(inseed) -> long

    Parameters
    ----------
    inseed: long const &

    """
    return _IOHprofiler.IOHprofiler_random__lcg_rand(inseed)

def IOHprofiler_random_IOHprofiler_gauss(N, inseed):
    r"""
    IOHprofiler_random_IOHprofiler_gauss(N, inseed) -> doublevec

    Parameters
    ----------
    N: size_t const
    inseed: long const

    """
    return _IOHprofiler.IOHprofiler_random_IOHprofiler_gauss(N, inseed)


def strstrip(s):
    r"""
    strstrip(s) -> std::string

    Parameters
    ----------
    s: std::string

    """
    return _IOHprofiler.strstrip(s)

def get_int_vector_parse_string(input, _min, _max):
    r"""
    get_int_vector_parse_string(input, _min, _max) -> intvec

    Parameters
    ----------
    input: std::string
    _min: int const
    _max: int const

    """
    return _IOHprofiler.get_int_vector_parse_string(input, _min, _max)
class IOHprofiler_transformation(object):
    r"""Proxy of C++ IOHprofiler_transformation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def variables_transformation(self, *args):
        r"""
        variables_transformation(self, x, problem_id, instance_id, problem_type)

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > &
        problem_id: int const
        instance_id: int const
        problem_type: std::string const

        variables_transformation(self, x, problem_id, instance_id, problem_type)

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > &
        problem_id: int const
        instance_id: int const
        problem_type: std::string const

        """
        return _IOHprofiler.IOHprofiler_transformation_variables_transformation(self, *args)

    def objectives_transformation(self, *args):
        r"""
        objectives_transformation(self, x, y, problem_id, instance_id, problem_type)

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &
        y: std::vector< double,std::allocator< double > > &
        problem_id: int const
        instance_id: int const
        problem_type: std::string const

        objectives_transformation(self, x, y, problem_id, instance_id, problem_type)

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &
        y: std::vector< double,std::allocator< double > > &
        problem_id: int const
        instance_id: int const
        problem_type: std::string const

        """
        return _IOHprofiler.IOHprofiler_transformation_objectives_transformation(self, *args)

    @staticmethod
    def xor_compute(x1, x2):
        r"""
        xor_compute(x1, x2) -> int

        Parameters
        ----------
        x1: int const
        x2: int const

        """
        return _IOHprofiler.IOHprofiler_transformation_xor_compute(x1, x2)

    def transform_vars_xor(self, x, seed):
        r"""
        transform_vars_xor(self, x, seed)

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > &
        seed: int const

        """
        return _IOHprofiler.IOHprofiler_transformation_transform_vars_xor(self, x, seed)

    @staticmethod
    def sigma_compute(x, pos):
        r"""
        sigma_compute(x, pos) -> int

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &
        pos: int const

        """
        return _IOHprofiler.IOHprofiler_transformation_sigma_compute(x, pos)

    def transform_vars_sigma(self, x, seed):
        r"""
        transform_vars_sigma(self, x, seed)

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > &
        seed: int const

        """
        return _IOHprofiler.IOHprofiler_transformation_transform_vars_sigma(self, x, seed)

    def transform_obj_scale(self, *args):
        r"""
        transform_obj_scale(self, y, seed)

        Parameters
        ----------
        y: std::vector< double,std::allocator< double > > &
        seed: int const

        transform_obj_scale(self, y, seed)

        Parameters
        ----------
        y: double &
        seed: int const

        """
        return _IOHprofiler.IOHprofiler_transformation_transform_obj_scale(self, *args)

    def transform_obj_shift(self, *args):
        r"""
        transform_obj_shift(self, y, seed)

        Parameters
        ----------
        y: std::vector< double,std::allocator< double > > &
        seed: int const

        transform_obj_shift(self, y, seed)

        Parameters
        ----------
        y: double &
        seed: int const

        """
        return _IOHprofiler.IOHprofiler_transformation_transform_obj_shift(self, *args)

    def __init__(self):
        r"""__init__(self) -> IOHprofiler_transformation"""
        _IOHprofiler.IOHprofiler_transformation_swiginit(self, _IOHprofiler.new_IOHprofiler_transformation())
    __swig_destroy__ = _IOHprofiler.delete_IOHprofiler_transformation

# Register IOHprofiler_transformation in _IOHprofiler:
_IOHprofiler.IOHprofiler_transformation_swigregister(IOHprofiler_transformation)

def IOHprofiler_transformation_xor_compute(x1, x2):
    r"""
    IOHprofiler_transformation_xor_compute(x1, x2) -> int

    Parameters
    ----------
    x1: int const
    x2: int const

    """
    return _IOHprofiler.IOHprofiler_transformation_xor_compute(x1, x2)

def IOHprofiler_transformation_sigma_compute(x, pos):
    r"""
    IOHprofiler_transformation_sigma_compute(x, pos) -> int

    Parameters
    ----------
    x: std::vector< int,std::allocator< int > > const &
    pos: int const

    """
    return _IOHprofiler.IOHprofiler_transformation_sigma_compute(x, pos)

SUITE_BBOB2009_MAX_DIM = _IOHprofiler.SUITE_BBOB2009_MAX_DIM


def bbob2009_fmin(a, b):
    r"""
    bbob2009_fmin(a, b) -> double

    Parameters
    ----------
    a: double
    b: double

    """
    return _IOHprofiler.bbob2009_fmin(a, b)

def bbob2009_fmax(a, b):
    r"""
    bbob2009_fmax(a, b) -> double

    Parameters
    ----------
    a: double
    b: double

    """
    return _IOHprofiler.bbob2009_fmax(a, b)

def bbob2009_round(x):
    r"""
    bbob2009_round(x) -> double

    Parameters
    ----------
    x: double

    """
    return _IOHprofiler.bbob2009_round(x)

def bbob2009_unif(r, N, inseed):
    r"""
    bbob2009_unif(r, N, inseed)

    Parameters
    ----------
    r: std::vector< double,std::allocator< double > > &
    N: size_t
    inseed: long

    """
    return _IOHprofiler.bbob2009_unif(r, N, inseed)

def bbob2009_reshape(B, vector, m, n):
    r"""
    bbob2009_reshape(B, vector, m, n)

    Parameters
    ----------
    B: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &
    vector: std::vector< double,std::allocator< double > > const &
    m: size_t const
    n: size_t const

    """
    return _IOHprofiler.bbob2009_reshape(B, vector, m, n)

def bbob2009_gauss(g, N, seed):
    r"""
    bbob2009_gauss(g, N, seed)

    Parameters
    ----------
    g: std::vector< double,std::allocator< double > > &
    N: size_t const
    seed: long const

    """
    return _IOHprofiler.bbob2009_gauss(g, N, seed)

def bbob2009_compute_rotation(B, seed, DIM):
    r"""
    bbob2009_compute_rotation(B, seed, DIM)

    Parameters
    ----------
    B: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &
    seed: long const
    DIM: size_t const

    """
    return _IOHprofiler.bbob2009_compute_rotation(B, seed, DIM)

def bbob2009_copy_rotation_matrix(rot, M, b, DIM):
    r"""
    bbob2009_copy_rotation_matrix(rot, M, b, DIM)

    Parameters
    ----------
    rot: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &
    M: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &
    b: std::vector< double,std::allocator< double > > &
    DIM: size_t const

    """
    return _IOHprofiler.bbob2009_copy_rotation_matrix(rot, M, b, DIM)

def bbob2009_compute_xopt(xopt, seed, DIM):
    r"""
    bbob2009_compute_xopt(xopt, seed, DIM)

    Parameters
    ----------
    xopt: std::vector< double,std::allocator< double > > &
    seed: long const
    DIM: size_t const

    """
    return _IOHprofiler.bbob2009_compute_xopt(xopt, seed, DIM)

def bbob2009_compute_fopt(function, instance):
    r"""
    bbob2009_compute_fopt(function, instance) -> double

    Parameters
    ----------
    function: size_t const
    instance: size_t const

    """
    return _IOHprofiler.bbob2009_compute_fopt(function, instance)

def dummy(number_of_variables, select_rate, inseed):
    r"""
    dummy(number_of_variables, select_rate, inseed) -> intvec

    Parameters
    ----------
    number_of_variables: int
    select_rate: double
    inseed: long

    """
    return _IOHprofiler.dummy(number_of_variables, select_rate, inseed)

def neutrality(variables, mu):
    r"""
    neutrality(variables, mu) -> intvec

    Parameters
    ----------
    variables: std::vector< int,std::allocator< int > > const &
    mu: int

    """
    return _IOHprofiler.neutrality(variables, mu)

def epistasis(variables, v):
    r"""
    epistasis(variables, v) -> intvec

    Parameters
    ----------
    variables: std::vector< int,std::allocator< int > > const &
    v: int

    """
    return _IOHprofiler.epistasis(variables, v)

def ruggedness1(y, number_of_variables):
    r"""
    ruggedness1(y, number_of_variables) -> double

    Parameters
    ----------
    y: double
    number_of_variables: int

    """
    return _IOHprofiler.ruggedness1(y, number_of_variables)

def ruggedness2(y, number_of_variables):
    r"""
    ruggedness2(y, number_of_variables) -> double

    Parameters
    ----------
    y: double
    number_of_variables: int

    """
    return _IOHprofiler.ruggedness2(y, number_of_variables)

def ruggedness3(number_of_variables):
    r"""
    ruggedness3(number_of_variables) -> doublevec

    Parameters
    ----------
    number_of_variables: int

    """
    return _IOHprofiler.ruggedness3(number_of_variables)

def layer_neutrality_compute(xIn, xOut, mu):
    r"""
    layer_neutrality_compute(xIn, xOut, mu)

    Parameters
    ----------
    xIn: std::vector< int,std::allocator< int > > const &
    xOut: std::vector< int,std::allocator< int > > &
    mu: int const

    """
    return _IOHprofiler.layer_neutrality_compute(xIn, xOut, mu)

def base_epistasis(xIn, start, nu, xOut):
    r"""
    base_epistasis(xIn, start, nu, xOut)

    Parameters
    ----------
    xIn: std::vector< int,std::allocator< int > > const &
    start: int const
    nu: int const
    xOut: std::vector< int,std::allocator< int > > &

    """
    return _IOHprofiler.base_epistasis(xIn, start, nu, xOut)

def epistasis_compute(xIn, xOut, nu):
    r"""
    epistasis_compute(xIn, xOut, nu)

    Parameters
    ----------
    xIn: std::vector< int,std::allocator< int > > const &
    xOut: std::vector< int,std::allocator< int > > &
    nu: int const

    """
    return _IOHprofiler.epistasis_compute(xIn, xOut, nu)

def layer_epistasis_compute(x, epistasis_x, block_size):
    r"""
    layer_epistasis_compute(x, epistasis_x, block_size)

    Parameters
    ----------
    x: std::vector< int,std::allocator< int > > const &
    epistasis_x: std::vector< int,std::allocator< int > > &
    block_size: int const

    """
    return _IOHprofiler.layer_epistasis_compute(x, epistasis_x, block_size)

def max_gamma(q):
    r"""
    max_gamma(q) -> int

    Parameters
    ----------
    q: int

    """
    return _IOHprofiler.max_gamma(q)

def ruggedness_raw(gamma, q):
    r"""
    ruggedness_raw(gamma, q) -> intvec

    Parameters
    ----------
    gamma: int
    q: int

    """
    return _IOHprofiler.ruggedness_raw(gamma, q)

def ruggedness_translate(gamma, q):
    r"""
    ruggedness_translate(gamma, q) -> int

    Parameters
    ----------
    gamma: int
    q: int

    """
    return _IOHprofiler.ruggedness_translate(gamma, q)

def layer_compute_ruggedness(y, dimension, gamma):
    r"""
    layer_compute_ruggedness(y, dimension, gamma) -> double

    Parameters
    ----------
    y: double const
    dimension: size_t
    gamma: int

    """
    return _IOHprofiler.layer_compute_ruggedness(y, dimension, gamma)
class IOHprofiler_csv_logger(IOHprofiler_observer):
    r"""Proxy of C++ IOHprofiler_csv_logger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> IOHprofiler_csv_logger
        __init__(self, directory, folder_name, alg_name, alg_info) -> IOHprofiler_csv_logger

        Parameters
        ----------
        directory: std::string
        folder_name: std::string
        alg_name: std::string
        alg_info: std::string

        """
        _IOHprofiler.IOHprofiler_csv_logger_swiginit(self, _IOHprofiler.new_IOHprofiler_csv_logger(*args))
    __swig_destroy__ = _IOHprofiler.delete_IOHprofiler_csv_logger

    def folder_exist(self, folder_name):
        r"""
        folder_exist(self, folder_name) -> bool

        Parameters
        ----------
        folder_name: std::string

        """
        return _IOHprofiler.IOHprofiler_csv_logger_folder_exist(self, folder_name)

    def activate_logger(self):
        r"""activate_logger(self)"""
        return _IOHprofiler.IOHprofiler_csv_logger_activate_logger(self)

    def clear_logger(self):
        r"""clear_logger(self)"""
        return _IOHprofiler.IOHprofiler_csv_logger_clear_logger(self)

    def add_dynamic_attribute(self, *args):
        r"""
        add_dynamic_attribute(self, attributes)

        Parameters
        ----------
        attributes: std::vector< std::shared_ptr< double >,std::allocator< std::shared_ptr< double > > > const &

        add_dynamic_attribute(self, attributes, attributes_name)

        Parameters
        ----------
        attributes: std::vector< std::shared_ptr< double >,std::allocator< std::shared_ptr< double > > > const &
        attributes_name: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _IOHprofiler.IOHprofiler_csv_logger_add_dynamic_attribute(self, *args)

    def set_dynamic_attributes_name(self, *args):
        r"""
        set_dynamic_attributes_name(self, attributes_name)

        Parameters
        ----------
        attributes_name: std::vector< std::string,std::allocator< std::string > > const &

        set_dynamic_attributes_name(self, attributes_name, initial_attributes)

        Parameters
        ----------
        attributes_name: std::vector< std::string,std::allocator< std::string > > const &
        initial_attributes: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_csv_logger_set_dynamic_attributes_name(self, *args)

    def set_dynamic_attributes(self, attributes_name, attributes):
        r"""
        set_dynamic_attributes(self, attributes_name, attributes)

        Parameters
        ----------
        attributes_name: std::vector< std::string,std::allocator< std::string > > const &
        attributes: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_csv_logger_set_dynamic_attributes(self, attributes_name, attributes)

    def add_attribute(self, *args):
        r"""
        add_attribute(self, arg2, arg3)

        Parameters
        ----------
        arg2: std::string
        arg3: int

        add_attribute(self, arg2, arg3)

        Parameters
        ----------
        arg2: std::string
        arg3: double

        add_attribute(self, arg2, arg3)

        Parameters
        ----------
        arg2: std::string
        arg3: float

        add_attribute(self, arg2, arg3)

        Parameters
        ----------
        arg2: std::string
        arg3: std::string

        """
        return _IOHprofiler.IOHprofiler_csv_logger_add_attribute(self, *args)

    def delete_attribute(self, arg2):
        r"""
        delete_attribute(self, arg2)

        Parameters
        ----------
        arg2: std::string

        """
        return _IOHprofiler.IOHprofiler_csv_logger_delete_attribute(self, arg2)

    def track_problem(self, *args):
        r"""
        track_problem(self, problem_id, dimension, instance, problem_name, maximization_minimization_flag)

        Parameters
        ----------
        problem_id: int const
        dimension: int const
        instance: int const
        problem_name: std::string const
        maximization_minimization_flag: enum IOH_optimization_type const

        track_problem(self, problem)

        Parameters
        ----------
        problem: IOHprofiler_problem< int > const &

        track_problem(self, problem)

        Parameters
        ----------
        problem: IOHprofiler_problem< double > const &

        """
        return _IOHprofiler.IOHprofiler_csv_logger_track_problem(self, *args)

    def track_suite(self, suite_name):
        r"""
        track_suite(self, suite_name)

        Parameters
        ----------
        suite_name: std::string

        """
        return _IOHprofiler.IOHprofiler_csv_logger_track_suite(self, suite_name)

    def openInfo(self, problem_id, dimension, problem_name):
        r"""
        openInfo(self, problem_id, dimension, problem_name)

        Parameters
        ----------
        problem_id: int
        dimension: int
        problem_name: std::string

        """
        return _IOHprofiler.IOHprofiler_csv_logger_openInfo(self, problem_id, dimension, problem_name)

    def write_info(self, instance, best_y, best_transformed_y, evaluations, last_y, last_transformed_y, last_evaluations):
        r"""
        write_info(self, instance, best_y, best_transformed_y, evaluations, last_y, last_transformed_y, last_evaluations)

        Parameters
        ----------
        instance: int
        best_y: double
        best_transformed_y: double
        evaluations: int
        last_y: double
        last_transformed_y: double
        last_evaluations: int

        """
        return _IOHprofiler.IOHprofiler_csv_logger_write_info(self, instance, best_y, best_transformed_y, evaluations, last_y, last_transformed_y, last_evaluations)

    def do_log(self, log_info):
        r"""
        do_log(self, log_info)

        Parameters
        ----------
        log_info: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_csv_logger_do_log(self, log_info)

    def write_line(self, *args):
        r"""
        write_line(self, evaluations, y, best_so_far_y, transformed_y, best_so_far_transformed_y)

        Parameters
        ----------
        evaluations: size_t const
        y: double const
        best_so_far_y: double const
        transformed_y: double const
        best_so_far_transformed_y: double const

        write_line(self, log_info)

        Parameters
        ----------
        log_info: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_csv_logger_write_line(self, *args)

    def update_logger_info(self, optimal_evaluations, y, transformed_y):
        r"""
        update_logger_info(self, optimal_evaluations, y, transformed_y)

        Parameters
        ----------
        optimal_evaluations: size_t
        y: double
        transformed_y: double

        """
        return _IOHprofiler.IOHprofiler_csv_logger_update_logger_info(self, optimal_evaluations, y, transformed_y)

    def set_parameters_name(self, *args):
        r"""
        set_parameters_name(self, parameters_name)

        Parameters
        ----------
        parameters_name: std::vector< std::string,std::allocator< std::string > > const &

        set_parameters_name(self, parameters_name, initial_parameters)

        Parameters
        ----------
        parameters_name: std::vector< std::string,std::allocator< std::string > > const &
        initial_parameters: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_csv_logger_set_parameters_name(self, *args)

    def set_parameters(self, *args):
        r"""
        set_parameters(self, parameters)

        Parameters
        ----------
        parameters: std::vector< std::shared_ptr< double >,std::allocator< std::shared_ptr< double > > > const &

        set_parameters(self, parameters, parameters_name)

        Parameters
        ----------
        parameters: std::vector< std::shared_ptr< double >,std::allocator< std::shared_ptr< double > > > const &
        parameters_name: std::vector< std::string,std::allocator< std::string > > const &

        set_parameters(self, parameters_name, parameters)

        Parameters
        ----------
        parameters_name: std::vector< std::string,std::allocator< std::string > > const &
        parameters: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.IOHprofiler_csv_logger_set_parameters(self, *args)

# Register IOHprofiler_csv_logger in _IOHprofiler:
_IOHprofiler.IOHprofiler_csv_logger_swigregister(IOHprofiler_csv_logger)
coco_pi = cvar.coco_pi

IOHprofiler_PATH_MAX = _IOHprofiler.IOHprofiler_PATH_MAX

IOHprofiler_MAX_DIMENSION = _IOHprofiler.IOHprofiler_MAX_DIMENSION

DEFAULT_PROBLEM_ID = _IOHprofiler.DEFAULT_PROBLEM_ID

DEFAULT_INSTANCE = _IOHprofiler.DEFAULT_INSTANCE

DEFAULT_DIMENSION = _IOHprofiler.DEFAULT_DIMENSION

MAX_BUFFER_SIZE = _IOHprofiler.MAX_BUFFER_SIZE

IOH_optimization_type_Minimization = _IOHprofiler.IOH_optimization_type_Minimization

IOH_optimization_type_Maximization = _IOHprofiler.IOH_optimization_type_Maximization


def IOH_error(error_info):
    r"""
    IOH_error(error_info)

    Parameters
    ----------
    error_info: std::string

    """
    return _IOHprofiler.IOH_error(error_info)

def IOH_warning(warning_info):
    r"""
    IOH_warning(warning_info)

    Parameters
    ----------
    warning_info: std::string

    """
    return _IOHprofiler.IOH_warning(warning_info)

def IOH_log(*args):
    r"""
    IOH_log(log_info)

    Parameters
    ----------
    log_info: std::string

    IOH_log(log_info, log_stream)

    Parameters
    ----------
    log_info: std::string
    log_stream: std::ofstream &

    """
    return _IOHprofiler.IOH_log(*args)

def transform_obj_norm_by_dim_evaluate(dimension, y):
    r"""
    transform_obj_norm_by_dim_evaluate(dimension, y)

    Parameters
    ----------
    dimension: int const
    y: std::vector< double,std::allocator< double > > &

    """
    return _IOHprofiler.transform_obj_norm_by_dim_evaluate(dimension, y)

def transform_obj_oscillate_evaluate(y):
    r"""
    transform_obj_oscillate_evaluate(y)

    Parameters
    ----------
    y: std::vector< double,std::allocator< double > > &

    """
    return _IOHprofiler.transform_obj_oscillate_evaluate(y)

def transform_obj_penalize_evaluate(x, lower_bounds, upper_bounds, factor, y):
    r"""
    transform_obj_penalize_evaluate(x, lower_bounds, upper_bounds, factor, y)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > const &
    lower_bounds: double const
    upper_bounds: double const
    factor: double const
    y: std::vector< double,std::allocator< double > > &

    """
    return _IOHprofiler.transform_obj_penalize_evaluate(x, lower_bounds, upper_bounds, factor, y)

def transform_obj_power_evaluate(y, exponent):
    r"""
    transform_obj_power_evaluate(y, exponent)

    Parameters
    ----------
    y: std::vector< double,std::allocator< double > > &
    exponent: double const

    """
    return _IOHprofiler.transform_obj_power_evaluate(y, exponent)

def transform_obj_scale_evaluate_function(y, factor):
    r"""
    transform_obj_scale_evaluate_function(y, factor)

    Parameters
    ----------
    y: std::vector< double,std::allocator< double > > &
    factor: double const

    """
    return _IOHprofiler.transform_obj_scale_evaluate_function(y, factor)

def transform_obj_shift_evaluate_function(y, offset):
    r"""
    transform_obj_shift_evaluate_function(y, offset)

    Parameters
    ----------
    y: std::vector< double,std::allocator< double > > &
    offset: double const

    """
    return _IOHprofiler.transform_obj_shift_evaluate_function(y, offset)

def transform_vars_affine_evaluate_function(x, M, b):
    r"""
    transform_vars_affine_evaluate_function(x, M, b)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > &
    M: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &
    b: std::vector< double,std::allocator< double > > const &

    """
    return _IOHprofiler.transform_vars_affine_evaluate_function(x, M, b)

def transform_vars_asymmetric_evaluate_function(x, beta):
    r"""
    transform_vars_asymmetric_evaluate_function(x, beta)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > &
    beta: double const

    """
    return _IOHprofiler.transform_vars_asymmetric_evaluate_function(x, beta)

def transform_vars_brs_evaluate(x):
    r"""
    transform_vars_brs_evaluate(x)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > &

    """
    return _IOHprofiler.transform_vars_brs_evaluate(x)

def transform_vars_conditioning_evaluate(x, alpha):
    r"""
    transform_vars_conditioning_evaluate(x, alpha)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > &
    alpha: double const

    """
    return _IOHprofiler.transform_vars_conditioning_evaluate(x, alpha)

def transform_vars_oscillate_evaluate_function(x):
    r"""
    transform_vars_oscillate_evaluate_function(x)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > &

    """
    return _IOHprofiler.transform_vars_oscillate_evaluate_function(x)

def transform_vars_scale_evaluate(x, factor):
    r"""
    transform_vars_scale_evaluate(x, factor)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > &
    factor: double const

    """
    return _IOHprofiler.transform_vars_scale_evaluate(x, factor)

def transform_vars_shift_evaluate_function(x, offset):
    r"""
    transform_vars_shift_evaluate_function(x, offset)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > &
    offset: std::vector< double,std::allocator< double > > const &

    """
    return _IOHprofiler.transform_vars_shift_evaluate_function(x, offset)

def transform_vars_x_hat_evaluate(x, seed):
    r"""
    transform_vars_x_hat_evaluate(x, seed)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > &
    seed: long const

    """
    return _IOHprofiler.transform_vars_x_hat_evaluate(x, seed)

def transform_vars_x_hat_generic_evaluate(x, sign_vector):
    r"""
    transform_vars_x_hat_generic_evaluate(x, sign_vector)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > &
    sign_vector: std::vector< double,std::allocator< double > > const &

    """
    return _IOHprofiler.transform_vars_x_hat_generic_evaluate(x, sign_vector)

def transform_vars_z_hat_evaluate(x, xopt):
    r"""
    transform_vars_z_hat_evaluate(x, xopt)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > &
    xopt: std::vector< double,std::allocator< double > > const &

    """
    return _IOHprofiler.transform_vars_z_hat_evaluate(x, xopt)
class Coco_Transformation_Data(object):
    r"""Proxy of C++ Coco_Transformation_Data class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    raw_x = property(_IOHprofiler.Coco_Transformation_Data_raw_x_get, _IOHprofiler.Coco_Transformation_Data_raw_x_set, doc=r"""raw_x""")
    xopt = property(_IOHprofiler.Coco_Transformation_Data_xopt_get, _IOHprofiler.Coco_Transformation_Data_xopt_set, doc=r"""xopt""")
    tmp1 = property(_IOHprofiler.Coco_Transformation_Data_tmp1_get, _IOHprofiler.Coco_Transformation_Data_tmp1_set, doc=r"""tmp1""")
    tmp2 = property(_IOHprofiler.Coco_Transformation_Data_tmp2_get, _IOHprofiler.Coco_Transformation_Data_tmp2_set, doc=r"""tmp2""")
    fopt = property(_IOHprofiler.Coco_Transformation_Data_fopt_get, _IOHprofiler.Coco_Transformation_Data_fopt_set, doc=r"""fopt""")
    penalty_factor = property(_IOHprofiler.Coco_Transformation_Data_penalty_factor_get, _IOHprofiler.Coco_Transformation_Data_penalty_factor_set, doc=r"""penalty_factor""")
    factor = property(_IOHprofiler.Coco_Transformation_Data_factor_get, _IOHprofiler.Coco_Transformation_Data_factor_set, doc=r"""factor""")
    lower_bound = property(_IOHprofiler.Coco_Transformation_Data_lower_bound_get, _IOHprofiler.Coco_Transformation_Data_lower_bound_set, doc=r"""lower_bound""")
    upper_bound = property(_IOHprofiler.Coco_Transformation_Data_upper_bound_get, _IOHprofiler.Coco_Transformation_Data_upper_bound_set, doc=r"""upper_bound""")
    M = property(_IOHprofiler.Coco_Transformation_Data_M_get, _IOHprofiler.Coco_Transformation_Data_M_set, doc=r"""M""")
    b = property(_IOHprofiler.Coco_Transformation_Data_b_get, _IOHprofiler.Coco_Transformation_Data_b_set, doc=r"""b""")
    M1 = property(_IOHprofiler.Coco_Transformation_Data_M1_get, _IOHprofiler.Coco_Transformation_Data_M1_set, doc=r"""M1""")
    b1 = property(_IOHprofiler.Coco_Transformation_Data_b1_get, _IOHprofiler.Coco_Transformation_Data_b1_set, doc=r"""b1""")
    rot1 = property(_IOHprofiler.Coco_Transformation_Data_rot1_get, _IOHprofiler.Coco_Transformation_Data_rot1_set, doc=r"""rot1""")
    rot2 = property(_IOHprofiler.Coco_Transformation_Data_rot2_get, _IOHprofiler.Coco_Transformation_Data_rot2_set, doc=r"""rot2""")
    datax = property(_IOHprofiler.Coco_Transformation_Data_datax_get, _IOHprofiler.Coco_Transformation_Data_datax_set, doc=r"""datax""")
    dataxx = property(_IOHprofiler.Coco_Transformation_Data_dataxx_get, _IOHprofiler.Coco_Transformation_Data_dataxx_set, doc=r"""dataxx""")
    minus_one = property(_IOHprofiler.Coco_Transformation_Data_minus_one_get, _IOHprofiler.Coco_Transformation_Data_minus_one_set, doc=r"""minus_one""")
    condition = property(_IOHprofiler.Coco_Transformation_Data_condition_get, _IOHprofiler.Coco_Transformation_Data_condition_set, doc=r"""condition""")
    rseed = property(_IOHprofiler.Coco_Transformation_Data_rseed_get, _IOHprofiler.Coco_Transformation_Data_rseed_set, doc=r"""rseed""")

    def __init__(self):
        r"""__init__(self) -> Coco_Transformation_Data"""
        _IOHprofiler.Coco_Transformation_Data_swiginit(self, _IOHprofiler.new_Coco_Transformation_Data())
    __swig_destroy__ = _IOHprofiler.delete_Coco_Transformation_Data

# Register Coco_Transformation_Data in _IOHprofiler:
_IOHprofiler.Coco_Transformation_Data_swigregister(Coco_Transformation_Data)


def coco_tranformation_vars(x, problem_id):
    r"""
    coco_tranformation_vars(x, problem_id)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > &
    problem_id: int const

    """
    return _IOHprofiler.coco_tranformation_vars(x, problem_id)

def coco_tranformation_objs(x, y, problem_id):
    r"""
    coco_tranformation_objs(x, y, problem_id)

    Parameters
    ----------
    x: std::vector< double,std::allocator< double > > const &
    y: std::vector< double,std::allocator< double > > &
    problem_id: int const

    """
    return _IOHprofiler.coco_tranformation_objs(x, y, problem_id)
class Attractive_Sector(IOHprofiler_Problem_double):
    r"""Proxy of C++ Attractive_Sector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Attractive_Sector

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Attractive_Sector_swiginit(self, _IOHprofiler.new_Attractive_Sector(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Attractive_Sector

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Attractive_Sector_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Attractive_Sector_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Attractive_Sector

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Attractive_Sector_createInstance(instance_id, dimension)

# Register Attractive_Sector in _IOHprofiler:
_IOHprofiler.Attractive_Sector_swigregister(Attractive_Sector)

def Attractive_Sector_createInstance(instance_id=1, dimension=4):
    r"""
    Attractive_Sector_createInstance(instance_id=1, dimension=4) -> Attractive_Sector

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Attractive_Sector_createInstance(instance_id, dimension)

class Bent_Cigar(IOHprofiler_Problem_double):
    r"""Proxy of C++ Bent_Cigar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Bent_Cigar

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Bent_Cigar_swiginit(self, _IOHprofiler.new_Bent_Cigar(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Bent_Cigar

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Bent_Cigar_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Bent_Cigar_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Bent_Cigar

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Bent_Cigar_createInstance(instance_id, dimension)

# Register Bent_Cigar in _IOHprofiler:
_IOHprofiler.Bent_Cigar_swigregister(Bent_Cigar)

def Bent_Cigar_createInstance(instance_id=1, dimension=4):
    r"""
    Bent_Cigar_createInstance(instance_id=1, dimension=4) -> Bent_Cigar

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Bent_Cigar_createInstance(instance_id, dimension)

class Bueche_Rastrigin(IOHprofiler_Problem_double):
    r"""Proxy of C++ Bueche_Rastrigin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Bueche_Rastrigin

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Bueche_Rastrigin_swiginit(self, _IOHprofiler.new_Bueche_Rastrigin(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Bueche_Rastrigin

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Bueche_Rastrigin_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Bueche_Rastrigin_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Bueche_Rastrigin

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Bueche_Rastrigin_createInstance(instance_id, dimension)

# Register Bueche_Rastrigin in _IOHprofiler:
_IOHprofiler.Bueche_Rastrigin_swigregister(Bueche_Rastrigin)

def Bueche_Rastrigin_createInstance(instance_id=1, dimension=4):
    r"""
    Bueche_Rastrigin_createInstance(instance_id=1, dimension=4) -> Bueche_Rastrigin

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Bueche_Rastrigin_createInstance(instance_id, dimension)

class Different_Powers(IOHprofiler_Problem_double):
    r"""Proxy of C++ Different_Powers class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Different_Powers

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Different_Powers_swiginit(self, _IOHprofiler.new_Different_Powers(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Different_Powers

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Different_Powers_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Different_Powers_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Different_Powers

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Different_Powers_createInstance(instance_id, dimension)

# Register Different_Powers in _IOHprofiler:
_IOHprofiler.Different_Powers_swigregister(Different_Powers)

def Different_Powers_createInstance(instance_id=1, dimension=4):
    r"""
    Different_Powers_createInstance(instance_id=1, dimension=4) -> Different_Powers

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Different_Powers_createInstance(instance_id, dimension)

class Discus(IOHprofiler_Problem_double):
    r"""Proxy of C++ Discus class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Discus

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Discus_swiginit(self, _IOHprofiler.new_Discus(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Discus

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Discus_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Discus_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Discus

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Discus_createInstance(instance_id, dimension)

# Register Discus in _IOHprofiler:
_IOHprofiler.Discus_swigregister(Discus)

def Discus_createInstance(instance_id=1, dimension=4):
    r"""
    Discus_createInstance(instance_id=1, dimension=4) -> Discus

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Discus_createInstance(instance_id, dimension)

class Ellipsoid(IOHprofiler_Problem_double):
    r"""Proxy of C++ Ellipsoid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Ellipsoid

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Ellipsoid_swiginit(self, _IOHprofiler.new_Ellipsoid(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Ellipsoid

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Ellipsoid_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Ellipsoid_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Ellipsoid

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Ellipsoid_createInstance(instance_id, dimension)

# Register Ellipsoid in _IOHprofiler:
_IOHprofiler.Ellipsoid_swigregister(Ellipsoid)

def Ellipsoid_createInstance(instance_id=1, dimension=4):
    r"""
    Ellipsoid_createInstance(instance_id=1, dimension=4) -> Ellipsoid

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Ellipsoid_createInstance(instance_id, dimension)

class Ellipsoid_Rotated(IOHprofiler_Problem_double):
    r"""Proxy of C++ Ellipsoid_Rotated class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Ellipsoid_Rotated

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Ellipsoid_Rotated_swiginit(self, _IOHprofiler.new_Ellipsoid_Rotated(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Ellipsoid_Rotated

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Ellipsoid_Rotated_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Ellipsoid_Rotated_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Ellipsoid_Rotated

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Ellipsoid_Rotated_createInstance(instance_id, dimension)

# Register Ellipsoid_Rotated in _IOHprofiler:
_IOHprofiler.Ellipsoid_Rotated_swigregister(Ellipsoid_Rotated)

def Ellipsoid_Rotated_createInstance(instance_id=1, dimension=4):
    r"""
    Ellipsoid_Rotated_createInstance(instance_id=1, dimension=4) -> Ellipsoid_Rotated

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Ellipsoid_Rotated_createInstance(instance_id, dimension)

class F_GALLAGHER_PERMUTATION_T1(object):
    r"""Proxy of C++ f_gallagher_permutation_t1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_IOHprofiler.F_GALLAGHER_PERMUTATION_T1_value_get, _IOHprofiler.F_GALLAGHER_PERMUTATION_T1_value_set, doc=r"""value""")
    index = property(_IOHprofiler.F_GALLAGHER_PERMUTATION_T1_index_get, _IOHprofiler.F_GALLAGHER_PERMUTATION_T1_index_set, doc=r"""index""")

    def __init__(self):
        r"""__init__(self) -> F_GALLAGHER_PERMUTATION_T1"""
        _IOHprofiler.F_GALLAGHER_PERMUTATION_T1_swiginit(self, _IOHprofiler.new_F_GALLAGHER_PERMUTATION_T1())
    __swig_destroy__ = _IOHprofiler.delete_F_GALLAGHER_PERMUTATION_T1

# Register F_GALLAGHER_PERMUTATION_T1 in _IOHprofiler:
_IOHprofiler.F_GALLAGHER_PERMUTATION_T1_swigregister(F_GALLAGHER_PERMUTATION_T1)


def f_gallagher_compare_doubles1(a, b):
    r"""
    f_gallagher_compare_doubles1(a, b) -> int

    Parameters
    ----------
    a: void const *
    b: void const *

    """
    return _IOHprofiler.f_gallagher_compare_doubles1(a, b)
class Gallagher101(IOHprofiler_Problem_double):
    r"""Proxy of C++ Gallagher101 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Gallagher101

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Gallagher101_swiginit(self, _IOHprofiler.new_Gallagher101(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Gallagher101
    xopt = property(_IOHprofiler.Gallagher101_xopt_get, _IOHprofiler.Gallagher101_xopt_set, doc=r"""xopt""")
    number_of_peaks = property(_IOHprofiler.Gallagher101_number_of_peaks_get, doc=r"""number_of_peaks""")
    rotation = property(_IOHprofiler.Gallagher101_rotation_get, _IOHprofiler.Gallagher101_rotation_set, doc=r"""rotation""")
    arr_scales = property(_IOHprofiler.Gallagher101_arr_scales_get, _IOHprofiler.Gallagher101_arr_scales_set, doc=r"""arr_scales""")
    x_local = property(_IOHprofiler.Gallagher101_x_local_get, _IOHprofiler.Gallagher101_x_local_set, doc=r"""x_local""")
    peak_values = property(_IOHprofiler.Gallagher101_peak_values_get, _IOHprofiler.Gallagher101_peak_values_set, doc=r"""peak_values""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Gallagher101_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Gallagher101_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Gallagher101

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Gallagher101_createInstance(instance_id, dimension)

# Register Gallagher101 in _IOHprofiler:
_IOHprofiler.Gallagher101_swigregister(Gallagher101)

def Gallagher101_createInstance(instance_id=1, dimension=4):
    r"""
    Gallagher101_createInstance(instance_id=1, dimension=4) -> Gallagher101

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Gallagher101_createInstance(instance_id, dimension)

class F_GALLAGHER_PERMUTATION_T(object):
    r"""Proxy of C++ f_gallagher_permutation_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_IOHprofiler.F_GALLAGHER_PERMUTATION_T_value_get, _IOHprofiler.F_GALLAGHER_PERMUTATION_T_value_set, doc=r"""value""")
    index = property(_IOHprofiler.F_GALLAGHER_PERMUTATION_T_index_get, _IOHprofiler.F_GALLAGHER_PERMUTATION_T_index_set, doc=r"""index""")

    def __init__(self):
        r"""__init__(self) -> F_GALLAGHER_PERMUTATION_T"""
        _IOHprofiler.F_GALLAGHER_PERMUTATION_T_swiginit(self, _IOHprofiler.new_F_GALLAGHER_PERMUTATION_T())
    __swig_destroy__ = _IOHprofiler.delete_F_GALLAGHER_PERMUTATION_T

# Register F_GALLAGHER_PERMUTATION_T in _IOHprofiler:
_IOHprofiler.F_GALLAGHER_PERMUTATION_T_swigregister(F_GALLAGHER_PERMUTATION_T)


def f_gallagher_compare_doubles(a, b):
    r"""
    f_gallagher_compare_doubles(a, b) -> int

    Parameters
    ----------
    a: void const *
    b: void const *

    """
    return _IOHprofiler.f_gallagher_compare_doubles(a, b)
class Gallagher21(IOHprofiler_Problem_double):
    r"""Proxy of C++ Gallagher21 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Gallagher21

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Gallagher21_swiginit(self, _IOHprofiler.new_Gallagher21(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Gallagher21
    xopt = property(_IOHprofiler.Gallagher21_xopt_get, _IOHprofiler.Gallagher21_xopt_set, doc=r"""xopt""")
    number_of_peaks = property(_IOHprofiler.Gallagher21_number_of_peaks_get, doc=r"""number_of_peaks""")
    rotation = property(_IOHprofiler.Gallagher21_rotation_get, _IOHprofiler.Gallagher21_rotation_set, doc=r"""rotation""")
    arr_scales = property(_IOHprofiler.Gallagher21_arr_scales_get, _IOHprofiler.Gallagher21_arr_scales_set, doc=r"""arr_scales""")
    x_local = property(_IOHprofiler.Gallagher21_x_local_get, _IOHprofiler.Gallagher21_x_local_set, doc=r"""x_local""")
    peak_values = property(_IOHprofiler.Gallagher21_peak_values_get, _IOHprofiler.Gallagher21_peak_values_set, doc=r"""peak_values""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Gallagher21_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Gallagher21_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Gallagher21

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Gallagher21_createInstance(instance_id, dimension)

# Register Gallagher21 in _IOHprofiler:
_IOHprofiler.Gallagher21_swigregister(Gallagher21)

def Gallagher21_createInstance(instance_id=1, dimension=4):
    r"""
    Gallagher21_createInstance(instance_id=1, dimension=4) -> Gallagher21

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Gallagher21_createInstance(instance_id, dimension)

class Griewank_RosenBrock(IOHprofiler_Problem_double):
    r"""Proxy of C++ Griewank_RosenBrock class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Griewank_RosenBrock

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Griewank_RosenBrock_swiginit(self, _IOHprofiler.new_Griewank_RosenBrock(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Griewank_RosenBrock
    scales = property(_IOHprofiler.Griewank_RosenBrock_scales_get, _IOHprofiler.Griewank_RosenBrock_scales_set, doc=r"""scales""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Griewank_RosenBrock_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Griewank_RosenBrock_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Griewank_RosenBrock

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Griewank_RosenBrock_createInstance(instance_id, dimension)

# Register Griewank_RosenBrock in _IOHprofiler:
_IOHprofiler.Griewank_RosenBrock_swigregister(Griewank_RosenBrock)

def Griewank_RosenBrock_createInstance(instance_id=1, dimension=4):
    r"""
    Griewank_RosenBrock_createInstance(instance_id=1, dimension=4) -> Griewank_RosenBrock

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Griewank_RosenBrock_createInstance(instance_id, dimension)

class Rastrigin(IOHprofiler_Problem_double):
    r"""Proxy of C++ Rastrigin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Rastrigin

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Rastrigin_swiginit(self, _IOHprofiler.new_Rastrigin(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Rastrigin

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Rastrigin_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Rastrigin_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Rastrigin

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Rastrigin_createInstance(instance_id, dimension)

# Register Rastrigin in _IOHprofiler:
_IOHprofiler.Rastrigin_swigregister(Rastrigin)

def Rastrigin_createInstance(instance_id=1, dimension=4):
    r"""
    Rastrigin_createInstance(instance_id=1, dimension=4) -> Rastrigin

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Rastrigin_createInstance(instance_id, dimension)

class Rastrigin_Rotated(IOHprofiler_Problem_double):
    r"""Proxy of C++ Rastrigin_Rotated class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Rastrigin_Rotated

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Rastrigin_Rotated_swiginit(self, _IOHprofiler.new_Rastrigin_Rotated(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Rastrigin_Rotated

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Rastrigin_Rotated_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Rastrigin_Rotated_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Rastrigin_Rotated

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Rastrigin_Rotated_createInstance(instance_id, dimension)

# Register Rastrigin_Rotated in _IOHprofiler:
_IOHprofiler.Rastrigin_Rotated_swigregister(Rastrigin_Rotated)

def Rastrigin_Rotated_createInstance(instance_id=1, dimension=4):
    r"""
    Rastrigin_Rotated_createInstance(instance_id=1, dimension=4) -> Rastrigin_Rotated

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Rastrigin_Rotated_createInstance(instance_id, dimension)

class Rosenbrock(IOHprofiler_Problem_double):
    r"""Proxy of C++ Rosenbrock class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Rosenbrock

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Rosenbrock_swiginit(self, _IOHprofiler.new_Rosenbrock(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Rosenbrock

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Rosenbrock_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Rosenbrock_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Rosenbrock

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Rosenbrock_createInstance(instance_id, dimension)

# Register Rosenbrock in _IOHprofiler:
_IOHprofiler.Rosenbrock_swigregister(Rosenbrock)

def Rosenbrock_createInstance(instance_id=1, dimension=4):
    r"""
    Rosenbrock_createInstance(instance_id=1, dimension=4) -> Rosenbrock

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Rosenbrock_createInstance(instance_id, dimension)

class Rosenbrock_Rotated(IOHprofiler_Problem_double):
    r"""Proxy of C++ Rosenbrock_Rotated class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Rosenbrock_Rotated

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Rosenbrock_Rotated_swiginit(self, _IOHprofiler.new_Rosenbrock_Rotated(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Rosenbrock_Rotated

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Rosenbrock_Rotated_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Rosenbrock_Rotated_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Rosenbrock_Rotated

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Rosenbrock_Rotated_createInstance(instance_id, dimension)

# Register Rosenbrock_Rotated in _IOHprofiler:
_IOHprofiler.Rosenbrock_Rotated_swigregister(Rosenbrock_Rotated)

def Rosenbrock_Rotated_createInstance(instance_id=1, dimension=4):
    r"""
    Rosenbrock_Rotated_createInstance(instance_id=1, dimension=4) -> Rosenbrock_Rotated

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Rosenbrock_Rotated_createInstance(instance_id, dimension)

class Schaffers1000(IOHprofiler_Problem_double):
    r"""Proxy of C++ Schaffers1000 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Schaffers1000

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Schaffers1000_swiginit(self, _IOHprofiler.new_Schaffers1000(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Schaffers1000
    conditioning = property(_IOHprofiler.Schaffers1000_conditioning_get, doc=r"""conditioning""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Schaffers1000_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Schaffers1000_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Schaffers1000

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Schaffers1000_createInstance(instance_id, dimension)

# Register Schaffers1000 in _IOHprofiler:
_IOHprofiler.Schaffers1000_swigregister(Schaffers1000)

def Schaffers1000_createInstance(instance_id=1, dimension=4):
    r"""
    Schaffers1000_createInstance(instance_id=1, dimension=4) -> Schaffers1000

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Schaffers1000_createInstance(instance_id, dimension)

class Schaffers10(IOHprofiler_Problem_double):
    r"""Proxy of C++ Schaffers10 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Schaffers10

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Schaffers10_swiginit(self, _IOHprofiler.new_Schaffers10(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Schaffers10
    conditioning = property(_IOHprofiler.Schaffers10_conditioning_get, doc=r"""conditioning""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Schaffers10_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Schaffers10_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Schaffers10

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Schaffers10_createInstance(instance_id, dimension)

# Register Schaffers10 in _IOHprofiler:
_IOHprofiler.Schaffers10_swigregister(Schaffers10)

def Schaffers10_createInstance(instance_id=1, dimension=4):
    r"""
    Schaffers10_createInstance(instance_id=1, dimension=4) -> Schaffers10

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Schaffers10_createInstance(instance_id, dimension)

class Schwefel(IOHprofiler_Problem_double):
    r"""Proxy of C++ Schwefel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Schwefel

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Schwefel_swiginit(self, _IOHprofiler.new_Schwefel(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Schwefel

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Schwefel_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Schwefel_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Schwefel

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Schwefel_createInstance(instance_id, dimension)

# Register Schwefel in _IOHprofiler:
_IOHprofiler.Schwefel_swigregister(Schwefel)

def Schwefel_createInstance(instance_id=1, dimension=4):
    r"""
    Schwefel_createInstance(instance_id=1, dimension=4) -> Schwefel

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Schwefel_createInstance(instance_id, dimension)

class Sharp_Ridge(IOHprofiler_Problem_double):
    r"""Proxy of C++ Sharp_Ridge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Sharp_Ridge

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Sharp_Ridge_swiginit(self, _IOHprofiler.new_Sharp_Ridge(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Sharp_Ridge

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Sharp_Ridge_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Sharp_Ridge_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Sharp_Ridge

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Sharp_Ridge_createInstance(instance_id, dimension)

# Register Sharp_Ridge in _IOHprofiler:
_IOHprofiler.Sharp_Ridge_swigregister(Sharp_Ridge)

def Sharp_Ridge_createInstance(instance_id=1, dimension=4):
    r"""
    Sharp_Ridge_createInstance(instance_id=1, dimension=4) -> Sharp_Ridge

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Sharp_Ridge_createInstance(instance_id, dimension)

class Sphere(IOHprofiler_Problem_double):
    r"""Proxy of C++ Sphere class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Sphere

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Sphere_swiginit(self, _IOHprofiler.new_Sphere(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Sphere

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Sphere_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Sphere_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Sphere

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Sphere_createInstance(instance_id, dimension)

# Register Sphere in _IOHprofiler:
_IOHprofiler.Sphere_swigregister(Sphere)

def Sphere_createInstance(instance_id=1, dimension=4):
    r"""
    Sphere_createInstance(instance_id=1, dimension=4) -> Sphere

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Sphere_createInstance(instance_id, dimension)

class Step_Ellipsoid(IOHprofiler_Problem_double):
    r"""Proxy of C++ Step_Ellipsoid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Step_Ellipsoid

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Step_Ellipsoid_swiginit(self, _IOHprofiler.new_Step_Ellipsoid(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Step_Ellipsoid
    xopt = property(_IOHprofiler.Step_Ellipsoid_xopt_get, _IOHprofiler.Step_Ellipsoid_xopt_set, doc=r"""xopt""")
    fopt = property(_IOHprofiler.Step_Ellipsoid_fopt_get, _IOHprofiler.Step_Ellipsoid_fopt_set, doc=r"""fopt""")
    rot1 = property(_IOHprofiler.Step_Ellipsoid_rot1_get, _IOHprofiler.Step_Ellipsoid_rot1_set, doc=r"""rot1""")
    rot2 = property(_IOHprofiler.Step_Ellipsoid_rot2_get, _IOHprofiler.Step_Ellipsoid_rot2_set, doc=r"""rot2""")
    datax = property(_IOHprofiler.Step_Ellipsoid_datax_get, _IOHprofiler.Step_Ellipsoid_datax_set, doc=r"""datax""")
    dataxx = property(_IOHprofiler.Step_Ellipsoid_dataxx_get, _IOHprofiler.Step_Ellipsoid_dataxx_set, doc=r"""dataxx""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Step_Ellipsoid_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Step_Ellipsoid_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Step_Ellipsoid

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Step_Ellipsoid_createInstance(instance_id, dimension)

# Register Step_Ellipsoid in _IOHprofiler:
_IOHprofiler.Step_Ellipsoid_swigregister(Step_Ellipsoid)

def Step_Ellipsoid_createInstance(instance_id=1, dimension=4):
    r"""
    Step_Ellipsoid_createInstance(instance_id=1, dimension=4) -> Step_Ellipsoid

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Step_Ellipsoid_createInstance(instance_id, dimension)

F_WEIERSTRASS_SUMMANDS = _IOHprofiler.F_WEIERSTRASS_SUMMANDS

class Weierstrass(IOHprofiler_Problem_double):
    r"""Proxy of C++ Weierstrass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Weierstrass

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Weierstrass_swiginit(self, _IOHprofiler.new_Weierstrass(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Weierstrass
    condition = property(_IOHprofiler.Weierstrass_condition_get, doc=r"""condition""")
    f0 = property(_IOHprofiler.Weierstrass_f0_get, _IOHprofiler.Weierstrass_f0_set, doc=r"""f0""")
    ak = property(_IOHprofiler.Weierstrass_ak_get, _IOHprofiler.Weierstrass_ak_set, doc=r"""ak""")
    bk = property(_IOHprofiler.Weierstrass_bk_get, _IOHprofiler.Weierstrass_bk_set, doc=r"""bk""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Weierstrass_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Weierstrass_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Weierstrass

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Weierstrass_createInstance(instance_id, dimension)

# Register Weierstrass in _IOHprofiler:
_IOHprofiler.Weierstrass_swigregister(Weierstrass)

def Weierstrass_createInstance(instance_id=1, dimension=4):
    r"""
    Weierstrass_createInstance(instance_id=1, dimension=4) -> Weierstrass

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Weierstrass_createInstance(instance_id, dimension)

class Linear_Slope(IOHprofiler_Problem_double):
    r"""Proxy of C++ Linear_Slope class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Linear_Slope

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Linear_Slope_swiginit(self, _IOHprofiler.new_Linear_Slope(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Linear_Slope

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Linear_Slope_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Linear_Slope_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Linear_Slope

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Linear_Slope_createInstance(instance_id, dimension)

# Register Linear_Slope in _IOHprofiler:
_IOHprofiler.Linear_Slope_swigregister(Linear_Slope)

def Linear_Slope_createInstance(instance_id=1, dimension=4):
    r"""
    Linear_Slope_createInstance(instance_id=1, dimension=4) -> Linear_Slope

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Linear_Slope_createInstance(instance_id, dimension)

class Lunacek_Bi_Rastrigin(IOHprofiler_Problem_double):
    r"""Proxy of C++ Lunacek_Bi_Rastrigin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Lunacek_Bi_Rastrigin

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Lunacek_Bi_Rastrigin_swiginit(self, _IOHprofiler.new_Lunacek_Bi_Rastrigin(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Lunacek_Bi_Rastrigin

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Lunacek_Bi_Rastrigin_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Lunacek_Bi_Rastrigin_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Lunacek_Bi_Rastrigin

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Lunacek_Bi_Rastrigin_createInstance(instance_id, dimension)

# Register Lunacek_Bi_Rastrigin in _IOHprofiler:
_IOHprofiler.Lunacek_Bi_Rastrigin_swigregister(Lunacek_Bi_Rastrigin)

def Lunacek_Bi_Rastrigin_createInstance(instance_id=1, dimension=4):
    r"""
    Lunacek_Bi_Rastrigin_createInstance(instance_id=1, dimension=4) -> Lunacek_Bi_Rastrigin

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Lunacek_Bi_Rastrigin_createInstance(instance_id, dimension)

class Katsuura(IOHprofiler_Problem_double):
    r"""Proxy of C++ Katsuura class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Katsuura

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Katsuura_swiginit(self, _IOHprofiler.new_Katsuura(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Katsuura

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.Katsuura_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< double,std::allocator< double > > const &

        """
        return _IOHprofiler.Katsuura_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Katsuura

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Katsuura_createInstance(instance_id, dimension)

# Register Katsuura in _IOHprofiler:
_IOHprofiler.Katsuura_swigregister(Katsuura)

def Katsuura_createInstance(instance_id=1, dimension=4):
    r"""
    Katsuura_createInstance(instance_id=1, dimension=4) -> Katsuura

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Katsuura_createInstance(instance_id, dimension)

class Ising_Ring(IOHprofiler_Problem_int):
    r"""Proxy of C++ Ising_Ring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id, dimension):
        r"""
        __init__(self, instance_id, dimension) -> Ising_Ring

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Ising_Ring_swiginit(self, _IOHprofiler.new_Ising_Ring(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Ising_Ring

    def modulo_ising_ring(self, x, N):
        r"""
        modulo_ising_ring(self, x, N) -> int

        Parameters
        ----------
        x: int
        N: int

        """
        return _IOHprofiler.Ising_Ring_modulo_ising_ring(self, x, N)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.Ising_Ring_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Ising_Ring

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Ising_Ring_createInstance(instance_id, dimension)

# Register Ising_Ring in _IOHprofiler:
_IOHprofiler.Ising_Ring_swigregister(Ising_Ring)

def Ising_Ring_createInstance(instance_id=1, dimension=4):
    r"""
    Ising_Ring_createInstance(instance_id=1, dimension=4) -> Ising_Ring

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Ising_Ring_createInstance(instance_id, dimension)

class Ising_Torus(IOHprofiler_Problem_int):
    r"""Proxy of C++ Ising_Torus class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Ising_Torus

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Ising_Torus_swiginit(self, _IOHprofiler.new_Ising_Torus(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Ising_Torus

    def modulo_ising_torus(self, x, N):
        r"""
        modulo_ising_torus(self, x, N) -> int

        Parameters
        ----------
        x: int
        N: int

        """
        return _IOHprofiler.Ising_Torus_modulo_ising_torus(self, x, N)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.Ising_Torus_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Ising_Torus

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Ising_Torus_createInstance(instance_id, dimension)

# Register Ising_Torus in _IOHprofiler:
_IOHprofiler.Ising_Torus_swigregister(Ising_Torus)

def Ising_Torus_createInstance(instance_id=1, dimension=4):
    r"""
    Ising_Torus_createInstance(instance_id=1, dimension=4) -> Ising_Torus

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Ising_Torus_createInstance(instance_id, dimension)

class Ising_Triangular(IOHprofiler_Problem_int):
    r"""Proxy of C++ Ising_Triangular class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Ising_Triangular

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Ising_Triangular_swiginit(self, _IOHprofiler.new_Ising_Triangular(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Ising_Triangular

    def modulo_ising_triangular(self, x, N):
        r"""
        modulo_ising_triangular(self, x, N) -> int

        Parameters
        ----------
        x: int
        N: int

        """
        return _IOHprofiler.Ising_Triangular_modulo_ising_triangular(self, x, N)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.Ising_Triangular_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Ising_Triangular

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Ising_Triangular_createInstance(instance_id, dimension)

# Register Ising_Triangular in _IOHprofiler:
_IOHprofiler.Ising_Triangular_swigregister(Ising_Triangular)

def Ising_Triangular_createInstance(instance_id=1, dimension=4):
    r"""
    Ising_Triangular_createInstance(instance_id=1, dimension=4) -> Ising_Triangular

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Ising_Triangular_createInstance(instance_id, dimension)

class LABS(IOHprofiler_Problem_int):
    r"""Proxy of C++ LABS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> LABS

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.LABS_swiginit(self, _IOHprofiler.new_LABS(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_LABS

    def correlation(self, x, n, k):
        r"""
        correlation(self, x, n, k) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const
        n: int const
        k: int

        """
        return _IOHprofiler.LABS_correlation(self, x, n, k)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.LABS_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> LABS

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.LABS_createInstance(instance_id, dimension)

# Register LABS in _IOHprofiler:
_IOHprofiler.LABS_swigregister(LABS)

def LABS_createInstance(instance_id=1, dimension=4):
    r"""
    LABS_createInstance(instance_id=1, dimension=4) -> LABS

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.LABS_createInstance(instance_id, dimension)

class LeadingOnes_Dummy1(IOHprofiler_Problem_int):
    r"""Proxy of C++ LeadingOnes_Dummy1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> LeadingOnes_Dummy1

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.LeadingOnes_Dummy1_swiginit(self, _IOHprofiler.new_LeadingOnes_Dummy1(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_LeadingOnes_Dummy1
    info = property(_IOHprofiler.LeadingOnes_Dummy1_info_get, _IOHprofiler.LeadingOnes_Dummy1_info_set, doc=r"""info""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.LeadingOnes_Dummy1_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.LeadingOnes_Dummy1_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> LeadingOnes_Dummy1

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.LeadingOnes_Dummy1_createInstance(instance_id, dimension)

# Register LeadingOnes_Dummy1 in _IOHprofiler:
_IOHprofiler.LeadingOnes_Dummy1_swigregister(LeadingOnes_Dummy1)

def LeadingOnes_Dummy1_createInstance(instance_id=1, dimension=4):
    r"""
    LeadingOnes_Dummy1_createInstance(instance_id=1, dimension=4) -> LeadingOnes_Dummy1

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.LeadingOnes_Dummy1_createInstance(instance_id, dimension)

class LeadingOnes_Dummy2(IOHprofiler_Problem_int):
    r"""Proxy of C++ LeadingOnes_Dummy2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> LeadingOnes_Dummy2

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.LeadingOnes_Dummy2_swiginit(self, _IOHprofiler.new_LeadingOnes_Dummy2(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_LeadingOnes_Dummy2
    info = property(_IOHprofiler.LeadingOnes_Dummy2_info_get, _IOHprofiler.LeadingOnes_Dummy2_info_set, doc=r"""info""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.LeadingOnes_Dummy2_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.LeadingOnes_Dummy2_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> LeadingOnes_Dummy2

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.LeadingOnes_Dummy2_createInstance(instance_id, dimension)

# Register LeadingOnes_Dummy2 in _IOHprofiler:
_IOHprofiler.LeadingOnes_Dummy2_swigregister(LeadingOnes_Dummy2)

def LeadingOnes_Dummy2_createInstance(instance_id=1, dimension=4):
    r"""
    LeadingOnes_Dummy2_createInstance(instance_id=1, dimension=4) -> LeadingOnes_Dummy2

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.LeadingOnes_Dummy2_createInstance(instance_id, dimension)

class LeadingOnes_Epistasis(IOHprofiler_Problem_int):
    r"""Proxy of C++ LeadingOnes_Epistasis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> LeadingOnes_Epistasis

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.LeadingOnes_Epistasis_swiginit(self, _IOHprofiler.new_LeadingOnes_Epistasis(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_LeadingOnes_Epistasis

    def customize_optimal(self):
        r"""customize_optimal(self)"""
        return _IOHprofiler.LeadingOnes_Epistasis_customize_optimal(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.LeadingOnes_Epistasis_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> LeadingOnes_Epistasis

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.LeadingOnes_Epistasis_createInstance(instance_id, dimension)

# Register LeadingOnes_Epistasis in _IOHprofiler:
_IOHprofiler.LeadingOnes_Epistasis_swigregister(LeadingOnes_Epistasis)

def LeadingOnes_Epistasis_createInstance(instance_id=1, dimension=4):
    r"""
    LeadingOnes_Epistasis_createInstance(instance_id=1, dimension=4) -> LeadingOnes_Epistasis

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.LeadingOnes_Epistasis_createInstance(instance_id, dimension)

class LeadingOnes(IOHprofiler_Problem_int):
    r"""Proxy of C++ LeadingOnes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> LeadingOnes

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.LeadingOnes_swiginit(self, _IOHprofiler.new_LeadingOnes(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_LeadingOnes

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.LeadingOnes_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> LeadingOnes

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.LeadingOnes_createInstance(instance_id, dimension)

# Register LeadingOnes in _IOHprofiler:
_IOHprofiler.LeadingOnes_swigregister(LeadingOnes)

def LeadingOnes_createInstance(instance_id=1, dimension=4):
    r"""
    LeadingOnes_createInstance(instance_id=1, dimension=4) -> LeadingOnes

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.LeadingOnes_createInstance(instance_id, dimension)

class LeadingOnes_Neutrality(IOHprofiler_Problem_int):
    r"""Proxy of C++ LeadingOnes_Neutrality class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> LeadingOnes_Neutrality

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.LeadingOnes_Neutrality_swiginit(self, _IOHprofiler.new_LeadingOnes_Neutrality(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_LeadingOnes_Neutrality

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.LeadingOnes_Neutrality_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> LeadingOnes_Neutrality

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.LeadingOnes_Neutrality_createInstance(instance_id, dimension)

# Register LeadingOnes_Neutrality in _IOHprofiler:
_IOHprofiler.LeadingOnes_Neutrality_swigregister(LeadingOnes_Neutrality)

def LeadingOnes_Neutrality_createInstance(instance_id=1, dimension=4):
    r"""
    LeadingOnes_Neutrality_createInstance(instance_id=1, dimension=4) -> LeadingOnes_Neutrality

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.LeadingOnes_Neutrality_createInstance(instance_id, dimension)

class LeadingOnes_Ruggedness1(IOHprofiler_Problem_int):
    r"""Proxy of C++ LeadingOnes_Ruggedness1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> LeadingOnes_Ruggedness1

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.LeadingOnes_Ruggedness1_swiginit(self, _IOHprofiler.new_LeadingOnes_Ruggedness1(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_LeadingOnes_Ruggedness1

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.LeadingOnes_Ruggedness1_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> LeadingOnes_Ruggedness1

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.LeadingOnes_Ruggedness1_createInstance(instance_id, dimension)

# Register LeadingOnes_Ruggedness1 in _IOHprofiler:
_IOHprofiler.LeadingOnes_Ruggedness1_swigregister(LeadingOnes_Ruggedness1)

def LeadingOnes_Ruggedness1_createInstance(instance_id=1, dimension=4):
    r"""
    LeadingOnes_Ruggedness1_createInstance(instance_id=1, dimension=4) -> LeadingOnes_Ruggedness1

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.LeadingOnes_Ruggedness1_createInstance(instance_id, dimension)

class LeadingOnes_Ruggedness2(IOHprofiler_Problem_int):
    r"""Proxy of C++ LeadingOnes_Ruggedness2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> LeadingOnes_Ruggedness2

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.LeadingOnes_Ruggedness2_swiginit(self, _IOHprofiler.new_LeadingOnes_Ruggedness2(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_LeadingOnes_Ruggedness2

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.LeadingOnes_Ruggedness2_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> LeadingOnes_Ruggedness2

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.LeadingOnes_Ruggedness2_createInstance(instance_id, dimension)

# Register LeadingOnes_Ruggedness2 in _IOHprofiler:
_IOHprofiler.LeadingOnes_Ruggedness2_swigregister(LeadingOnes_Ruggedness2)

def LeadingOnes_Ruggedness2_createInstance(instance_id=1, dimension=4):
    r"""
    LeadingOnes_Ruggedness2_createInstance(instance_id=1, dimension=4) -> LeadingOnes_Ruggedness2

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.LeadingOnes_Ruggedness2_createInstance(instance_id, dimension)

class LeadingOnes_Ruggedness3(IOHprofiler_Problem_int):
    r"""Proxy of C++ LeadingOnes_Ruggedness3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> LeadingOnes_Ruggedness3

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.LeadingOnes_Ruggedness3_swiginit(self, _IOHprofiler.new_LeadingOnes_Ruggedness3(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_LeadingOnes_Ruggedness3

    def Initilize_problem(self, dimension):
        r"""
        Initilize_problem(self, dimension)

        Parameters
        ----------
        dimension: int

        """
        return _IOHprofiler.LeadingOnes_Ruggedness3_Initilize_problem(self, dimension)
    info = property(_IOHprofiler.LeadingOnes_Ruggedness3_info_get, _IOHprofiler.LeadingOnes_Ruggedness3_info_set, doc=r"""info""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.LeadingOnes_Ruggedness3_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.LeadingOnes_Ruggedness3_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> LeadingOnes_Ruggedness3

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.LeadingOnes_Ruggedness3_createInstance(instance_id, dimension)

# Register LeadingOnes_Ruggedness3 in _IOHprofiler:
_IOHprofiler.LeadingOnes_Ruggedness3_swigregister(LeadingOnes_Ruggedness3)

def LeadingOnes_Ruggedness3_createInstance(instance_id=1, dimension=4):
    r"""
    LeadingOnes_Ruggedness3_createInstance(instance_id=1, dimension=4) -> LeadingOnes_Ruggedness3

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.LeadingOnes_Ruggedness3_createInstance(instance_id, dimension)

class Linear(IOHprofiler_Problem_int):
    r"""Proxy of C++ Linear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> Linear

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.Linear_swiginit(self, _IOHprofiler.new_Linear(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_Linear

    def Initilize_problem(self, dimension):
        r"""
        Initilize_problem(self, dimension)

        Parameters
        ----------
        dimension: int

        """
        return _IOHprofiler.Linear_Initilize_problem(self, dimension)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.Linear_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> Linear

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.Linear_createInstance(instance_id, dimension)

# Register Linear in _IOHprofiler:
_IOHprofiler.Linear_swigregister(Linear)

def Linear_createInstance(instance_id=1, dimension=4):
    r"""
    Linear_createInstance(instance_id=1, dimension=4) -> Linear

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.Linear_createInstance(instance_id, dimension)

class MIS(IOHprofiler_Problem_int):
    r"""Proxy of C++ MIS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> MIS

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.MIS_swiginit(self, _IOHprofiler.new_MIS(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_MIS

    def isEdge(self, i, j, problem_size):
        r"""
        isEdge(self, i, j, problem_size) -> int

        Parameters
        ----------
        i: int
        j: int
        problem_size: size_t

        """
        return _IOHprofiler.MIS_isEdge(self, i, j, problem_size)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.MIS_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> MIS

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.MIS_createInstance(instance_id, dimension)

# Register MIS in _IOHprofiler:
_IOHprofiler.MIS_swigregister(MIS)

def MIS_createInstance(instance_id=1, dimension=4):
    r"""
    MIS_createInstance(instance_id=1, dimension=4) -> MIS

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.MIS_createInstance(instance_id, dimension)

class NQueens(IOHprofiler_Problem_int):
    r"""Proxy of C++ NQueens class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> NQueens

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.NQueens_swiginit(self, _IOHprofiler.new_NQueens(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_NQueens

    def customize_optimal(self):
        r"""customize_optimal(self)"""
        return _IOHprofiler.NQueens_customize_optimal(self)

    def _max(self, element1, element2):
        r"""
        _max(self, element1, element2) -> double

        Parameters
        ----------
        element1: double
        element2: double

        """
        return _IOHprofiler.NQueens__max(self, element1, element2)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.NQueens_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> NQueens

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.NQueens_createInstance(instance_id, dimension)

# Register NQueens in _IOHprofiler:
_IOHprofiler.NQueens_swigregister(NQueens)

def NQueens_createInstance(instance_id=1, dimension=4):
    r"""
    NQueens_createInstance(instance_id=1, dimension=4) -> NQueens

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.NQueens_createInstance(instance_id, dimension)

class OneMax_Dummy1(IOHprofiler_Problem_int):
    r"""Proxy of C++ OneMax_Dummy1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> OneMax_Dummy1

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.OneMax_Dummy1_swiginit(self, _IOHprofiler.new_OneMax_Dummy1(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_OneMax_Dummy1
    info = property(_IOHprofiler.OneMax_Dummy1_info_get, _IOHprofiler.OneMax_Dummy1_info_set, doc=r"""info""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.OneMax_Dummy1_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.OneMax_Dummy1_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> OneMax_Dummy1

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.OneMax_Dummy1_createInstance(instance_id, dimension)

# Register OneMax_Dummy1 in _IOHprofiler:
_IOHprofiler.OneMax_Dummy1_swigregister(OneMax_Dummy1)

def OneMax_Dummy1_createInstance(instance_id=1, dimension=4):
    r"""
    OneMax_Dummy1_createInstance(instance_id=1, dimension=4) -> OneMax_Dummy1

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.OneMax_Dummy1_createInstance(instance_id, dimension)

class OneMax_Dummy2(IOHprofiler_Problem_int):
    r"""Proxy of C++ OneMax_Dummy2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> OneMax_Dummy2

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.OneMax_Dummy2_swiginit(self, _IOHprofiler.new_OneMax_Dummy2(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_OneMax_Dummy2
    info = property(_IOHprofiler.OneMax_Dummy2_info_get, _IOHprofiler.OneMax_Dummy2_info_set, doc=r"""info""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.OneMax_Dummy2_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.OneMax_Dummy2_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> OneMax_Dummy2

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.OneMax_Dummy2_createInstance(instance_id, dimension)

# Register OneMax_Dummy2 in _IOHprofiler:
_IOHprofiler.OneMax_Dummy2_swigregister(OneMax_Dummy2)

def OneMax_Dummy2_createInstance(instance_id=1, dimension=4):
    r"""
    OneMax_Dummy2_createInstance(instance_id=1, dimension=4) -> OneMax_Dummy2

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.OneMax_Dummy2_createInstance(instance_id, dimension)

class OneMax_Epistasis(IOHprofiler_Problem_int):
    r"""Proxy of C++ OneMax_Epistasis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> OneMax_Epistasis

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.OneMax_Epistasis_swiginit(self, _IOHprofiler.new_OneMax_Epistasis(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_OneMax_Epistasis

    def customize_optimal(self):
        r"""customize_optimal(self)"""
        return _IOHprofiler.OneMax_Epistasis_customize_optimal(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.OneMax_Epistasis_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> OneMax_Epistasis

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.OneMax_Epistasis_createInstance(instance_id, dimension)

# Register OneMax_Epistasis in _IOHprofiler:
_IOHprofiler.OneMax_Epistasis_swigregister(OneMax_Epistasis)

def OneMax_Epistasis_createInstance(instance_id=1, dimension=4):
    r"""
    OneMax_Epistasis_createInstance(instance_id=1, dimension=4) -> OneMax_Epistasis

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.OneMax_Epistasis_createInstance(instance_id, dimension)

class OneMax(IOHprofiler_Problem_int):
    r"""Proxy of C++ OneMax class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> OneMax

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.OneMax_swiginit(self, _IOHprofiler.new_OneMax(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_OneMax

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.OneMax_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> OneMax

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.OneMax_createInstance(instance_id, dimension)

# Register OneMax in _IOHprofiler:
_IOHprofiler.OneMax_swigregister(OneMax)

def OneMax_createInstance(instance_id=1, dimension=4):
    r"""
    OneMax_createInstance(instance_id=1, dimension=4) -> OneMax

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.OneMax_createInstance(instance_id, dimension)

class OneMax_Neutrality(IOHprofiler_Problem_int):
    r"""Proxy of C++ OneMax_Neutrality class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> OneMax_Neutrality

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.OneMax_Neutrality_swiginit(self, _IOHprofiler.new_OneMax_Neutrality(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_OneMax_Neutrality

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.OneMax_Neutrality_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> OneMax_Neutrality

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.OneMax_Neutrality_createInstance(instance_id, dimension)

# Register OneMax_Neutrality in _IOHprofiler:
_IOHprofiler.OneMax_Neutrality_swigregister(OneMax_Neutrality)

def OneMax_Neutrality_createInstance(instance_id=1, dimension=4):
    r"""
    OneMax_Neutrality_createInstance(instance_id=1, dimension=4) -> OneMax_Neutrality

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.OneMax_Neutrality_createInstance(instance_id, dimension)

class OneMax_Ruggedness1(IOHprofiler_Problem_int):
    r"""Proxy of C++ OneMax_Ruggedness1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> OneMax_Ruggedness1

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.OneMax_Ruggedness1_swiginit(self, _IOHprofiler.new_OneMax_Ruggedness1(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_OneMax_Ruggedness1

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.OneMax_Ruggedness1_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> OneMax_Ruggedness1

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.OneMax_Ruggedness1_createInstance(instance_id, dimension)

# Register OneMax_Ruggedness1 in _IOHprofiler:
_IOHprofiler.OneMax_Ruggedness1_swigregister(OneMax_Ruggedness1)

def OneMax_Ruggedness1_createInstance(instance_id=1, dimension=4):
    r"""
    OneMax_Ruggedness1_createInstance(instance_id=1, dimension=4) -> OneMax_Ruggedness1

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.OneMax_Ruggedness1_createInstance(instance_id, dimension)

class OneMax_Ruggedness2(IOHprofiler_Problem_int):
    r"""Proxy of C++ OneMax_Ruggedness2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> OneMax_Ruggedness2

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.OneMax_Ruggedness2_swiginit(self, _IOHprofiler.new_OneMax_Ruggedness2(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_OneMax_Ruggedness2

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.OneMax_Ruggedness2_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> OneMax_Ruggedness2

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.OneMax_Ruggedness2_createInstance(instance_id, dimension)

# Register OneMax_Ruggedness2 in _IOHprofiler:
_IOHprofiler.OneMax_Ruggedness2_swigregister(OneMax_Ruggedness2)

def OneMax_Ruggedness2_createInstance(instance_id=1, dimension=4):
    r"""
    OneMax_Ruggedness2_createInstance(instance_id=1, dimension=4) -> OneMax_Ruggedness2

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.OneMax_Ruggedness2_createInstance(instance_id, dimension)

class OneMax_Ruggedness3(IOHprofiler_Problem_int):
    r"""Proxy of C++ OneMax_Ruggedness3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> OneMax_Ruggedness3

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.OneMax_Ruggedness3_swiginit(self, _IOHprofiler.new_OneMax_Ruggedness3(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_OneMax_Ruggedness3
    info = property(_IOHprofiler.OneMax_Ruggedness3_info_get, _IOHprofiler.OneMax_Ruggedness3_info_set, doc=r"""info""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.OneMax_Ruggedness3_prepare_problem(self)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.OneMax_Ruggedness3_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> OneMax_Ruggedness3

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.OneMax_Ruggedness3_createInstance(instance_id, dimension)

# Register OneMax_Ruggedness3 in _IOHprofiler:
_IOHprofiler.OneMax_Ruggedness3_swigregister(OneMax_Ruggedness3)

def OneMax_Ruggedness3_createInstance(instance_id=1, dimension=4):
    r"""
    OneMax_Ruggedness3_createInstance(instance_id=1, dimension=4) -> OneMax_Ruggedness3

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.OneMax_Ruggedness3_createInstance(instance_id, dimension)

class W_Model_OneMax(IOHprofiler_Problem_int):
    r"""Proxy of C++ W_Model_OneMax class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> W_Model_OneMax

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.W_Model_OneMax_swiginit(self, _IOHprofiler.new_W_Model_OneMax(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_W_Model_OneMax
    dummy_info = property(_IOHprofiler.W_Model_OneMax_dummy_info_get, _IOHprofiler.W_Model_OneMax_dummy_info_set, doc=r"""dummy_info""")
    dummy_para = property(_IOHprofiler.W_Model_OneMax_dummy_para_get, _IOHprofiler.W_Model_OneMax_dummy_para_set, doc=r"""dummy_para""")
    epistasis_para = property(_IOHprofiler.W_Model_OneMax_epistasis_para_get, _IOHprofiler.W_Model_OneMax_epistasis_para_set, doc=r"""epistasis_para""")
    neutrality_para = property(_IOHprofiler.W_Model_OneMax_neutrality_para_get, _IOHprofiler.W_Model_OneMax_neutrality_para_set, doc=r"""neutrality_para""")
    ruggedness_para = property(_IOHprofiler.W_Model_OneMax_ruggedness_para_get, _IOHprofiler.W_Model_OneMax_ruggedness_para_set, doc=r"""ruggedness_para""")
    ruggedness_info = property(_IOHprofiler.W_Model_OneMax_ruggedness_info_get, _IOHprofiler.W_Model_OneMax_ruggedness_info_set, doc=r"""ruggedness_info""")
    temp_dimension = property(_IOHprofiler.W_Model_OneMax_temp_dimension_get, _IOHprofiler.W_Model_OneMax_temp_dimension_set, doc=r"""temp_dimension""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.W_Model_OneMax_prepare_problem(self)

    def customize_optimal(self):
        r"""customize_optimal(self)"""
        return _IOHprofiler.W_Model_OneMax_customize_optimal(self)

    def set_w_setting(self, dummy_para, epistasis_para, neutrality_para, ruggedness_para):
        r"""
        set_w_setting(self, dummy_para, epistasis_para, neutrality_para, ruggedness_para)

        Parameters
        ----------
        dummy_para: double const
        epistasis_para: int const
        neutrality_para: int const
        ruggedness_para: int const

        """
        return _IOHprofiler.W_Model_OneMax_set_w_setting(self, dummy_para, epistasis_para, neutrality_para, ruggedness_para)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.W_Model_OneMax_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> W_Model_OneMax

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.W_Model_OneMax_createInstance(instance_id, dimension)

# Register W_Model_OneMax in _IOHprofiler:
_IOHprofiler.W_Model_OneMax_swigregister(W_Model_OneMax)

def W_Model_OneMax_createInstance(instance_id=1, dimension=4):
    r"""
    W_Model_OneMax_createInstance(instance_id=1, dimension=4) -> W_Model_OneMax

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.W_Model_OneMax_createInstance(instance_id, dimension)

class W_Model_LeadingOnes(IOHprofiler_Problem_int):
    r"""Proxy of C++ W_Model_LeadingOnes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, instance_id=1, dimension=4):
        r"""
        __init__(self, instance_id=1, dimension=4) -> W_Model_LeadingOnes

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        _IOHprofiler.W_Model_LeadingOnes_swiginit(self, _IOHprofiler.new_W_Model_LeadingOnes(instance_id, dimension))
    __swig_destroy__ = _IOHprofiler.delete_W_Model_LeadingOnes
    dummy_info = property(_IOHprofiler.W_Model_LeadingOnes_dummy_info_get, _IOHprofiler.W_Model_LeadingOnes_dummy_info_set, doc=r"""dummy_info""")
    dummy_para = property(_IOHprofiler.W_Model_LeadingOnes_dummy_para_get, _IOHprofiler.W_Model_LeadingOnes_dummy_para_set, doc=r"""dummy_para""")
    epistasis_para = property(_IOHprofiler.W_Model_LeadingOnes_epistasis_para_get, _IOHprofiler.W_Model_LeadingOnes_epistasis_para_set, doc=r"""epistasis_para""")
    neutrality_para = property(_IOHprofiler.W_Model_LeadingOnes_neutrality_para_get, _IOHprofiler.W_Model_LeadingOnes_neutrality_para_set, doc=r"""neutrality_para""")
    ruggedness_para = property(_IOHprofiler.W_Model_LeadingOnes_ruggedness_para_get, _IOHprofiler.W_Model_LeadingOnes_ruggedness_para_set, doc=r"""ruggedness_para""")
    ruggedness_info = property(_IOHprofiler.W_Model_LeadingOnes_ruggedness_info_get, _IOHprofiler.W_Model_LeadingOnes_ruggedness_info_set, doc=r"""ruggedness_info""")
    temp_dimension = property(_IOHprofiler.W_Model_LeadingOnes_temp_dimension_get, _IOHprofiler.W_Model_LeadingOnes_temp_dimension_set, doc=r"""temp_dimension""")

    def prepare_problem(self):
        r"""prepare_problem(self)"""
        return _IOHprofiler.W_Model_LeadingOnes_prepare_problem(self)

    def customize_optimal(self):
        r"""customize_optimal(self)"""
        return _IOHprofiler.W_Model_LeadingOnes_customize_optimal(self)

    def set_w_setting(self, dummy_para, epistasis_para, neutrality_para, ruggedness_para):
        r"""
        set_w_setting(self, dummy_para, epistasis_para, neutrality_para, ruggedness_para)

        Parameters
        ----------
        dummy_para: double const
        epistasis_para: int const
        neutrality_para: int const
        ruggedness_para: int const

        """
        return _IOHprofiler.W_Model_LeadingOnes_set_w_setting(self, dummy_para, epistasis_para, neutrality_para, ruggedness_para)

    def internal_evaluate(self, x):
        r"""
        internal_evaluate(self, x) -> double

        Parameters
        ----------
        x: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.W_Model_LeadingOnes_internal_evaluate(self, x)

    @staticmethod
    def createInstance(instance_id=1, dimension=4):
        r"""
        createInstance(instance_id=1, dimension=4) -> W_Model_LeadingOnes

        Parameters
        ----------
        instance_id: int
        dimension: int

        """
        return _IOHprofiler.W_Model_LeadingOnes_createInstance(instance_id, dimension)

# Register W_Model_LeadingOnes in _IOHprofiler:
_IOHprofiler.W_Model_LeadingOnes_swigregister(W_Model_LeadingOnes)

def W_Model_LeadingOnes_createInstance(instance_id=1, dimension=4):
    r"""
    W_Model_LeadingOnes_createInstance(instance_id=1, dimension=4) -> W_Model_LeadingOnes

    Parameters
    ----------
    instance_id: int
    dimension: int

    """
    return _IOHprofiler.W_Model_LeadingOnes_createInstance(instance_id, dimension)

class genericGenerator_int_problem(object):
    r"""Proxy of C++ genericGenerator< IOHprofiler_problem< int > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance():
        r"""instance() -> genericGenerator_int_problem"""
        return _IOHprofiler.genericGenerator_int_problem_instance()

    def regCreateFn(self, arg2, arg3):
        r"""
        regCreateFn(self, arg2, arg3)

        Parameters
        ----------
        arg2: std::string
        arg3: std::shared_ptr< IOHprofiler_problem< int > > (*)()

        """
        return _IOHprofiler.genericGenerator_int_problem_regCreateFn(self, arg2, arg3)

    def create(self, className):
        r"""
        create(self, className) -> std::shared_ptr< IOHprofiler_problem< int > >

        Parameters
        ----------
        className: std::string

        """
        return _IOHprofiler.genericGenerator_int_problem_create(self, className)
    __swig_destroy__ = _IOHprofiler.delete_genericGenerator_int_problem

# Register genericGenerator_int_problem in _IOHprofiler:
_IOHprofiler.genericGenerator_int_problem_swigregister(genericGenerator_int_problem)

def genericGenerator_int_problem_instance():
    r"""genericGenerator_int_problem_instance() -> genericGenerator_int_problem"""
    return _IOHprofiler.genericGenerator_int_problem_instance()

class genericGenerator_double_problem(object):
    r"""Proxy of C++ genericGenerator< IOHprofiler_problem< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance():
        r"""instance() -> genericGenerator_double_problem"""
        return _IOHprofiler.genericGenerator_double_problem_instance()

    def regCreateFn(self, arg2, arg3):
        r"""
        regCreateFn(self, arg2, arg3)

        Parameters
        ----------
        arg2: std::string
        arg3: std::shared_ptr< IOHprofiler_problem< double > > (*)()

        """
        return _IOHprofiler.genericGenerator_double_problem_regCreateFn(self, arg2, arg3)

    def create(self, className):
        r"""
        create(self, className) -> std::shared_ptr< IOHprofiler_problem< double > >

        Parameters
        ----------
        className: std::string

        """
        return _IOHprofiler.genericGenerator_double_problem_create(self, className)
    __swig_destroy__ = _IOHprofiler.delete_genericGenerator_double_problem

# Register genericGenerator_double_problem in _IOHprofiler:
_IOHprofiler.genericGenerator_double_problem_swigregister(genericGenerator_double_problem)

def genericGenerator_double_problem_instance():
    r"""genericGenerator_double_problem_instance() -> genericGenerator_double_problem"""
    return _IOHprofiler.genericGenerator_double_problem_instance()

class IOHprofiler_suite_int(IOHprofiler_Problem_int, intProblemPtr):
    r"""Proxy of C++ IOHprofiler_suite< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, problem_id=std::vector< int >(0), instance_id=std::vector< int >(0), dimension=std::vector< int >(0)) -> IOHprofiler_suite_int

        Parameters
        ----------
        problem_id: std::vector< int,std::allocator< int > >
        instance_id: std::vector< int,std::allocator< int > >
        dimension: std::vector< int,std::allocator< int > >

        """
        _IOHprofiler.IOHprofiler_suite_int_swiginit(self, _IOHprofiler.new_IOHprofiler_suite_int(*args))
    __swig_destroy__ = _IOHprofiler.delete_IOHprofiler_suite_int

    def registerInSuite(self):
        r"""registerInSuite(self)"""
        return _IOHprofiler.IOHprofiler_suite_int_registerInSuite(self)

    def loadProblem(self):
        r"""loadProblem(self)"""
        return _IOHprofiler.IOHprofiler_suite_int_loadProblem(self)

    def get_next_problem(self):
        r"""get_next_problem(self) -> IOHprofiler_suite< int >::Problem_ptr"""
        return _IOHprofiler.IOHprofiler_suite_int_get_next_problem(self)

    def get_current_problem(self):
        r"""get_current_problem(self) -> IOHprofiler_suite< int >::Problem_ptr"""
        return _IOHprofiler.IOHprofiler_suite_int_get_current_problem(self)

    def get_problem(self, *args):
        r"""
        get_problem(self, problem_name, instance, dimension) -> IOHprofiler_suite< int >::Problem_ptr

        Parameters
        ----------
        problem_name: std::string
        instance: int
        dimension: int

        get_problem(self, problem_id, instance, dimension) -> IOHprofiler_suite< int >::Problem_ptr

        Parameters
        ----------
        problem_id: int
        instance: int
        dimension: int

        """
        return _IOHprofiler.IOHprofiler_suite_int_get_problem(self, *args)

    def IOHprofiler_suite_get_number_of_problems(self):
        r"""IOHprofiler_suite_get_number_of_problems(self) -> int"""
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_suite_get_number_of_problems(self)

    def IOHprofiler_suite_get_number_of_instances(self):
        r"""IOHprofiler_suite_get_number_of_instances(self) -> int"""
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_suite_get_number_of_instances(self)

    def IOHprofiler_suite_get_number_of_dimensions(self):
        r"""IOHprofiler_suite_get_number_of_dimensions(self) -> int"""
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_suite_get_number_of_dimensions(self)

    def IOHprofiler_suite_get_problem_id(self):
        r"""IOHprofiler_suite_get_problem_id(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_suite_get_problem_id(self)

    def IOHprofiler_suite_get_problem_name(self):
        r"""IOHprofiler_suite_get_problem_name(self) -> std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >"""
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_suite_get_problem_name(self)

    def IOHprofiler_suite_get_problems(self):
        r"""IOHprofiler_suite_get_problems(self) -> std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >"""
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_suite_get_problems(self)

    def IOHprofiler_suite_get_instance_id(self):
        r"""IOHprofiler_suite_get_instance_id(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_suite_get_instance_id(self)

    def IOHprofiler_suite_get_dimension(self):
        r"""IOHprofiler_suite_get_dimension(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_suite_get_dimension(self)

    def IOHprofiler_suite_get_suite_name(self):
        r"""IOHprofiler_suite_get_suite_name(self) -> std::string"""
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_suite_get_suite_name(self)

    def IOHprofiler_set_suite_problem_id(self, problem_id):
        r"""
        IOHprofiler_set_suite_problem_id(self, problem_id)

        Parameters
        ----------
        problem_id: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_set_suite_problem_id(self, problem_id)

    def IOHprofiler_set_suite_instance_id(self, instance_id):
        r"""
        IOHprofiler_set_suite_instance_id(self, instance_id)

        Parameters
        ----------
        instance_id: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_set_suite_instance_id(self, instance_id)

    def IOHprofiler_set_suite_dimension(self, dimension):
        r"""
        IOHprofiler_set_suite_dimension(self, dimension)

        Parameters
        ----------
        dimension: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_set_suite_dimension(self, dimension)

    def IOHprofiler_set_suite_name(self, suite_name):
        r"""
        IOHprofiler_set_suite_name(self, suite_name)

        Parameters
        ----------
        suite_name: std::string const

        """
        return _IOHprofiler.IOHprofiler_suite_int_IOHprofiler_set_suite_name(self, suite_name)

    def mapIDTOName(self, id, name):
        r"""
        mapIDTOName(self, id, name)

        Parameters
        ----------
        id: int const
        name: std::string const

        """
        return _IOHprofiler.IOHprofiler_suite_int_mapIDTOName(self, id, name)

# Register IOHprofiler_suite_int in _IOHprofiler:
_IOHprofiler.IOHprofiler_suite_int_swigregister(IOHprofiler_suite_int)

class IOHprofiler_suite_double(IOHprofiler_Problem_double, doubleProblemPtr):
    r"""Proxy of C++ IOHprofiler_suite< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self, problem_id=std::vector< int >(0), instance_id=std::vector< int >(0), dimension=std::vector< int >(0)) -> IOHprofiler_suite_double

        Parameters
        ----------
        problem_id: std::vector< int,std::allocator< int > >
        instance_id: std::vector< int,std::allocator< int > >
        dimension: std::vector< int,std::allocator< int > >

        """
        _IOHprofiler.IOHprofiler_suite_double_swiginit(self, _IOHprofiler.new_IOHprofiler_suite_double(*args))
    __swig_destroy__ = _IOHprofiler.delete_IOHprofiler_suite_double

    def registerInSuite(self):
        r"""registerInSuite(self)"""
        return _IOHprofiler.IOHprofiler_suite_double_registerInSuite(self)

    def loadProblem(self):
        r"""loadProblem(self)"""
        return _IOHprofiler.IOHprofiler_suite_double_loadProblem(self)

    def get_next_problem(self):
        r"""get_next_problem(self) -> IOHprofiler_suite< double >::Problem_ptr"""
        return _IOHprofiler.IOHprofiler_suite_double_get_next_problem(self)

    def get_current_problem(self):
        r"""get_current_problem(self) -> IOHprofiler_suite< double >::Problem_ptr"""
        return _IOHprofiler.IOHprofiler_suite_double_get_current_problem(self)

    def get_problem(self, *args):
        r"""
        get_problem(self, problem_name, instance, dimension) -> IOHprofiler_suite< double >::Problem_ptr

        Parameters
        ----------
        problem_name: std::string
        instance: int
        dimension: int

        get_problem(self, problem_id, instance, dimension) -> IOHprofiler_suite< double >::Problem_ptr

        Parameters
        ----------
        problem_id: int
        instance: int
        dimension: int

        """
        return _IOHprofiler.IOHprofiler_suite_double_get_problem(self, *args)

    def IOHprofiler_suite_get_number_of_problems(self):
        r"""IOHprofiler_suite_get_number_of_problems(self) -> int"""
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_suite_get_number_of_problems(self)

    def IOHprofiler_suite_get_number_of_instances(self):
        r"""IOHprofiler_suite_get_number_of_instances(self) -> int"""
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_suite_get_number_of_instances(self)

    def IOHprofiler_suite_get_number_of_dimensions(self):
        r"""IOHprofiler_suite_get_number_of_dimensions(self) -> int"""
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_suite_get_number_of_dimensions(self)

    def IOHprofiler_suite_get_problem_id(self):
        r"""IOHprofiler_suite_get_problem_id(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_suite_get_problem_id(self)

    def IOHprofiler_suite_get_problem_name(self):
        r"""IOHprofiler_suite_get_problem_name(self) -> std::map< int,std::string,std::less< int >,std::allocator< std::pair< int const,std::string > > >"""
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_suite_get_problem_name(self)

    def IOHprofiler_suite_get_problems(self):
        r"""IOHprofiler_suite_get_problems(self) -> std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >"""
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_suite_get_problems(self)

    def IOHprofiler_suite_get_instance_id(self):
        r"""IOHprofiler_suite_get_instance_id(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_suite_get_instance_id(self)

    def IOHprofiler_suite_get_dimension(self):
        r"""IOHprofiler_suite_get_dimension(self) -> intvec"""
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_suite_get_dimension(self)

    def IOHprofiler_suite_get_suite_name(self):
        r"""IOHprofiler_suite_get_suite_name(self) -> std::string"""
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_suite_get_suite_name(self)

    def IOHprofiler_set_suite_problem_id(self, problem_id):
        r"""
        IOHprofiler_set_suite_problem_id(self, problem_id)

        Parameters
        ----------
        problem_id: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_set_suite_problem_id(self, problem_id)

    def IOHprofiler_set_suite_instance_id(self, instance_id):
        r"""
        IOHprofiler_set_suite_instance_id(self, instance_id)

        Parameters
        ----------
        instance_id: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_set_suite_instance_id(self, instance_id)

    def IOHprofiler_set_suite_dimension(self, dimension):
        r"""
        IOHprofiler_set_suite_dimension(self, dimension)

        Parameters
        ----------
        dimension: std::vector< int,std::allocator< int > > const &

        """
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_set_suite_dimension(self, dimension)

    def IOHprofiler_set_suite_name(self, suite_name):
        r"""
        IOHprofiler_set_suite_name(self, suite_name)

        Parameters
        ----------
        suite_name: std::string const

        """
        return _IOHprofiler.IOHprofiler_suite_double_IOHprofiler_set_suite_name(self, suite_name)

    def mapIDTOName(self, id, name):
        r"""
        mapIDTOName(self, id, name)

        Parameters
        ----------
        id: int const
        name: std::string const

        """
        return _IOHprofiler.IOHprofiler_suite_double_mapIDTOName(self, id, name)

# Register IOHprofiler_suite_double in _IOHprofiler:
_IOHprofiler.IOHprofiler_suite_double_swigregister(IOHprofiler_suite_double)

class BBOB_suite(IOHprofiler_suite_double):
    r"""Proxy of C++ BBOB_suite class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> BBOB_suite
        __init__(self, problem_id, instance_id, dimension) -> BBOB_suite

        Parameters
        ----------
        problem_id: std::vector< int,std::allocator< int > >
        instance_id: std::vector< int,std::allocator< int > >
        dimension: std::vector< int,std::allocator< int > >

        """
        _IOHprofiler.BBOB_suite_swiginit(self, _IOHprofiler.new_BBOB_suite(*args))

    def registerProblem(self):
        r"""registerProblem(self)"""
        return _IOHprofiler.BBOB_suite_registerProblem(self)

    @staticmethod
    def createInstance(*args):
        r"""
        createInstance() -> BBOB_suite
        createInstance(problem_id, instance_id, dimension) -> BBOB_suite

        Parameters
        ----------
        problem_id: std::vector< int,std::allocator< int > >
        instance_id: std::vector< int,std::allocator< int > >
        dimension: std::vector< int,std::allocator< int > >

        """
        return _IOHprofiler.BBOB_suite_createInstance(*args)
    __swig_destroy__ = _IOHprofiler.delete_BBOB_suite

# Register BBOB_suite in _IOHprofiler:
_IOHprofiler.BBOB_suite_swigregister(BBOB_suite)

def BBOB_suite_createInstance(*args):
    r"""
    BBOB_suite_createInstance() -> BBOB_suite
    BBOB_suite_createInstance(problem_id, instance_id, dimension) -> BBOB_suite

    Parameters
    ----------
    problem_id: std::vector< int,std::allocator< int > >
    instance_id: std::vector< int,std::allocator< int > >
    dimension: std::vector< int,std::allocator< int > >

    """
    return _IOHprofiler.BBOB_suite_createInstance(*args)

class PBO_suite(IOHprofiler_suite_int):
    r"""Proxy of C++ PBO_suite class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> PBO_suite
        __init__(self, problem_id, instance_id, dimension) -> PBO_suite

        Parameters
        ----------
        problem_id: std::vector< int,std::allocator< int > >
        instance_id: std::vector< int,std::allocator< int > >
        dimension: std::vector< int,std::allocator< int > >

        """
        _IOHprofiler.PBO_suite_swiginit(self, _IOHprofiler.new_PBO_suite(*args))

    def registerProblem(self):
        r"""registerProblem(self)"""
        return _IOHprofiler.PBO_suite_registerProblem(self)

    @staticmethod
    def createInstance(*args):
        r"""
        createInstance() -> PBO_suite
        createInstance(problem_id, instance_id, dimension) -> PBO_suite

        Parameters
        ----------
        problem_id: std::vector< int,std::allocator< int > >
        instance_id: std::vector< int,std::allocator< int > >
        dimension: std::vector< int,std::allocator< int > >

        """
        return _IOHprofiler.PBO_suite_createInstance(*args)
    __swig_destroy__ = _IOHprofiler.delete_PBO_suite

# Register PBO_suite in _IOHprofiler:
_IOHprofiler.PBO_suite_swigregister(PBO_suite)

def PBO_suite_createInstance(*args):
    r"""
    PBO_suite_createInstance() -> PBO_suite
    PBO_suite_createInstance(problem_id, instance_id, dimension) -> PBO_suite

    Parameters
    ----------
    problem_id: std::vector< int,std::allocator< int > >
    instance_id: std::vector< int,std::allocator< int > >
    dimension: std::vector< int,std::allocator< int > >

    """
    return _IOHprofiler.PBO_suite_createInstance(*args)



