# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _toolkit
else:
    import _toolkit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _toolkit.intArray_swiginit(self, _toolkit.new_intArray(nelements))
    __swig_destroy__ = _toolkit.delete_intArray

    def __getitem__(self, index):
        return _toolkit.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _toolkit.intArray___setitem__(self, index, value)

    def cast(self):
        return _toolkit.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _toolkit.intArray_frompointer(t)

# Register intArray in _toolkit:
_toolkit.intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _toolkit.intArray_frompointer(t)

class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _toolkit.doubleArray_swiginit(self, _toolkit.new_doubleArray(nelements))
    __swig_destroy__ = _toolkit.delete_doubleArray

    def __getitem__(self, index):
        return _toolkit.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _toolkit.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _toolkit.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _toolkit.doubleArray_frompointer(t)

# Register doubleArray in _toolkit:
_toolkit.doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _toolkit.doubleArray_frompointer(t)

class Project(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _toolkit.delete_Project

# Register Project in _toolkit:
_toolkit.Project_swigregister(Project)

MAXID = _toolkit.MAXID

MAXMSG = _toolkit.MAXMSG

ELEVATION = _toolkit.ELEVATION

BASEDEMAND = _toolkit.BASEDEMAND

PATTERN = _toolkit.PATTERN

EMITTER = _toolkit.EMITTER

INITQUAL = _toolkit.INITQUAL

SOURCEQUAL = _toolkit.SOURCEQUAL

SOURCEPAT = _toolkit.SOURCEPAT

SOURCETYPE = _toolkit.SOURCETYPE

TANKLEVEL = _toolkit.TANKLEVEL

DEMAND = _toolkit.DEMAND

HEAD = _toolkit.HEAD

PRESSURE = _toolkit.PRESSURE

QUALITY = _toolkit.QUALITY

SOURCEMASS = _toolkit.SOURCEMASS

INITVOLUME = _toolkit.INITVOLUME

MIXMODEL = _toolkit.MIXMODEL

MIXZONEVOL = _toolkit.MIXZONEVOL

TANKDIAM = _toolkit.TANKDIAM

MINVOLUME = _toolkit.MINVOLUME

VOLCURVE = _toolkit.VOLCURVE

MINLEVEL = _toolkit.MINLEVEL

MAXLEVEL = _toolkit.MAXLEVEL

MIXFRACTION = _toolkit.MIXFRACTION

TANK_KBULK = _toolkit.TANK_KBULK

TANKVOLUME = _toolkit.TANKVOLUME

MAXVOLUME = _toolkit.MAXVOLUME

CANOVERFLOW = _toolkit.CANOVERFLOW

DEMANDDEFICIT = _toolkit.DEMANDDEFICIT

NODE_INCONTROL = _toolkit.NODE_INCONTROL

DIAMETER = _toolkit.DIAMETER

LENGTH = _toolkit.LENGTH

ROUGHNESS = _toolkit.ROUGHNESS

MINORLOSS = _toolkit.MINORLOSS

INITSTATUS = _toolkit.INITSTATUS

INITSETTING = _toolkit.INITSETTING

KBULK = _toolkit.KBULK

KWALL = _toolkit.KWALL

FLOW = _toolkit.FLOW

VELOCITY = _toolkit.VELOCITY

HEADLOSS = _toolkit.HEADLOSS

STATUS = _toolkit.STATUS

SETTING = _toolkit.SETTING

ENERGY = _toolkit.ENERGY

LINKQUAL = _toolkit.LINKQUAL

LINKPATTERN = _toolkit.LINKPATTERN

PUMP_STATE = _toolkit.PUMP_STATE

PUMP_EFFIC = _toolkit.PUMP_EFFIC

PUMP_POWER = _toolkit.PUMP_POWER

PUMP_HCURVE = _toolkit.PUMP_HCURVE

PUMP_ECURVE = _toolkit.PUMP_ECURVE

PUMP_ECOST = _toolkit.PUMP_ECOST

PUMP_EPAT = _toolkit.PUMP_EPAT

LINK_INCONTROL = _toolkit.LINK_INCONTROL

GPV_CURVE = _toolkit.GPV_CURVE

DURATION = _toolkit.DURATION

HYDSTEP = _toolkit.HYDSTEP

QUALSTEP = _toolkit.QUALSTEP

PATTERNSTEP = _toolkit.PATTERNSTEP

PATTERNSTART = _toolkit.PATTERNSTART

REPORTSTEP = _toolkit.REPORTSTEP

REPORTSTART = _toolkit.REPORTSTART

RULESTEP = _toolkit.RULESTEP

STATISTIC = _toolkit.STATISTIC

PERIODS = _toolkit.PERIODS

STARTTIME = _toolkit.STARTTIME

HTIME = _toolkit.HTIME

QTIME = _toolkit.QTIME

HALTFLAG = _toolkit.HALTFLAG

NEXTEVENT = _toolkit.NEXTEVENT

NEXTEVENTTANK = _toolkit.NEXTEVENTTANK

ITERATIONS = _toolkit.ITERATIONS

RELATIVEERROR = _toolkit.RELATIVEERROR

MAXHEADERROR = _toolkit.MAXHEADERROR

MAXFLOWCHANGE = _toolkit.MAXFLOWCHANGE

MASSBALANCE = _toolkit.MASSBALANCE

DEFICIENTNODES = _toolkit.DEFICIENTNODES

DEMANDREDUCTION = _toolkit.DEMANDREDUCTION

NODE = _toolkit.NODE

LINK = _toolkit.LINK

TIMEPAT = _toolkit.TIMEPAT

CURVE = _toolkit.CURVE

CONTROL = _toolkit.CONTROL

RULE = _toolkit.RULE

NODECOUNT = _toolkit.NODECOUNT

TANKCOUNT = _toolkit.TANKCOUNT

LINKCOUNT = _toolkit.LINKCOUNT

PATCOUNT = _toolkit.PATCOUNT

CURVECOUNT = _toolkit.CURVECOUNT

CONTROLCOUNT = _toolkit.CONTROLCOUNT

RULECOUNT = _toolkit.RULECOUNT

JUNCTION = _toolkit.JUNCTION

RESERVOIR = _toolkit.RESERVOIR

TANK = _toolkit.TANK

CVPIPE = _toolkit.CVPIPE

PIPE = _toolkit.PIPE

PUMP = _toolkit.PUMP

PRV = _toolkit.PRV

PSV = _toolkit.PSV

PBV = _toolkit.PBV

FCV = _toolkit.FCV

TCV = _toolkit.TCV

GPV = _toolkit.GPV

CLOSED = _toolkit.CLOSED

OPEN = _toolkit.OPEN

PUMP_XHEAD = _toolkit.PUMP_XHEAD

PUMP_CLOSED = _toolkit.PUMP_CLOSED

PUMP_OPEN = _toolkit.PUMP_OPEN

PUMP_XFLOW = _toolkit.PUMP_XFLOW

NONE = _toolkit.NONE

CHEM = _toolkit.CHEM

AGE = _toolkit.AGE

TRACE = _toolkit.TRACE

CONCEN = _toolkit.CONCEN

MASS = _toolkit.MASS

SETPOINT = _toolkit.SETPOINT

FLOWPACED = _toolkit.FLOWPACED

HW = _toolkit.HW

DW = _toolkit.DW

CM = _toolkit.CM

CFS = _toolkit.CFS

GPM = _toolkit.GPM

MGD = _toolkit.MGD

IMGD = _toolkit.IMGD

AFD = _toolkit.AFD

LPS = _toolkit.LPS

LPM = _toolkit.LPM

MLD = _toolkit.MLD

CMH = _toolkit.CMH

CMD = _toolkit.CMD

DDA = _toolkit.DDA

PDA = _toolkit.PDA

TRIALS = _toolkit.TRIALS

ACCURACY = _toolkit.ACCURACY

TOLERANCE = _toolkit.TOLERANCE

EMITEXPON = _toolkit.EMITEXPON

DEMANDMULT = _toolkit.DEMANDMULT

HEADERROR = _toolkit.HEADERROR

FLOWCHANGE = _toolkit.FLOWCHANGE

HEADLOSSFORM = _toolkit.HEADLOSSFORM

GLOBALEFFIC = _toolkit.GLOBALEFFIC

GLOBALPRICE = _toolkit.GLOBALPRICE

GLOBALPATTERN = _toolkit.GLOBALPATTERN

DEMANDCHARGE = _toolkit.DEMANDCHARGE

SP_GRAVITY = _toolkit.SP_GRAVITY

SP_VISCOS = _toolkit.SP_VISCOS

UNBALANCED = _toolkit.UNBALANCED

CHECKFREQ = _toolkit.CHECKFREQ

MAXCHECK = _toolkit.MAXCHECK

DAMPLIMIT = _toolkit.DAMPLIMIT

SP_DIFFUS = _toolkit.SP_DIFFUS

BULKORDER = _toolkit.BULKORDER

WALLORDER = _toolkit.WALLORDER

TANKORDER = _toolkit.TANKORDER

CONCENLIMIT = _toolkit.CONCENLIMIT

LOWLEVEL = _toolkit.LOWLEVEL

HILEVEL = _toolkit.HILEVEL

TIMER = _toolkit.TIMER

TIMEOFDAY = _toolkit.TIMEOFDAY

SERIES = _toolkit.SERIES

AVERAGE = _toolkit.AVERAGE

MINIMUM = _toolkit.MINIMUM

MAXIMUM = _toolkit.MAXIMUM

RANGE = _toolkit.RANGE

MIX1 = _toolkit.MIX1

MIX2 = _toolkit.MIX2

FIFO = _toolkit.FIFO

LIFO = _toolkit.LIFO

NOSAVE = _toolkit.NOSAVE

SAVE = _toolkit.SAVE

INITFLOW = _toolkit.INITFLOW

SAVE_AND_INIT = _toolkit.SAVE_AND_INIT

CONST_HP = _toolkit.CONST_HP

POWER_FUNC = _toolkit.POWER_FUNC

CUSTOM = _toolkit.CUSTOM

NOCURVE = _toolkit.NOCURVE

VOLUME_CURVE = _toolkit.VOLUME_CURVE

PUMP_CURVE = _toolkit.PUMP_CURVE

EFFIC_CURVE = _toolkit.EFFIC_CURVE

HLOSS_CURVE = _toolkit.HLOSS_CURVE

GENERIC_CURVE = _toolkit.GENERIC_CURVE

UNCONDITIONAL = _toolkit.UNCONDITIONAL

CONDITIONAL = _toolkit.CONDITIONAL

NO_REPORT = _toolkit.NO_REPORT

NORMAL_REPORT = _toolkit.NORMAL_REPORT

FULL_REPORT = _toolkit.FULL_REPORT

R_NODE = _toolkit.R_NODE

R_LINK = _toolkit.R_LINK

R_SYSTEM = _toolkit.R_SYSTEM

R_DEMAND = _toolkit.R_DEMAND

R_HEAD = _toolkit.R_HEAD

R_GRADE = _toolkit.R_GRADE

R_LEVEL = _toolkit.R_LEVEL

R_PRESSURE = _toolkit.R_PRESSURE

R_FLOW = _toolkit.R_FLOW

R_STATUS = _toolkit.R_STATUS

R_SETTING = _toolkit.R_SETTING

R_POWER = _toolkit.R_POWER

R_TIME = _toolkit.R_TIME

R_CLOCKTIME = _toolkit.R_CLOCKTIME

R_FILLTIME = _toolkit.R_FILLTIME

R_DRAINTIME = _toolkit.R_DRAINTIME

R_EQ = _toolkit.R_EQ

R_NE = _toolkit.R_NE

R_LE = _toolkit.R_LE

R_GE = _toolkit.R_GE

R_LT = _toolkit.R_LT

R_GT = _toolkit.R_GT

R_IS = _toolkit.R_IS

R_NOT = _toolkit.R_NOT

R_BELOW = _toolkit.R_BELOW

R_ABOVE = _toolkit.R_ABOVE

R_IS_OPEN = _toolkit.R_IS_OPEN

R_IS_CLOSED = _toolkit.R_IS_CLOSED

R_IS_ACTIVE = _toolkit.R_IS_ACTIVE

MISSING = _toolkit.MISSING


def createproject():
    r"""createproject() -> int"""
    return _toolkit.createproject()

def deleteproject(ph):
    r"""
    deleteproject(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.deleteproject(ph)

def runproject(ph, inpFile, rptFile, outFile, pviewprog):
    r"""
    runproject(ph, inpFile, rptFile, outFile, pviewprog) -> int

    Parameters
    ----------
    ph: EN_Project
    inpFile: char const *
    rptFile: char const *
    outFile: char const *
    pviewprog: void (*)(char *)

    """
    return _toolkit.runproject(ph, inpFile, rptFile, outFile, pviewprog)

def init(ph, rptFile, outFile, unitsType, headLossType):
    r"""
    init(ph, rptFile, outFile, unitsType, headLossType) -> int

    Parameters
    ----------
    ph: EN_Project
    rptFile: char const *
    outFile: char const *
    unitsType: int
    headLossType: int

    """
    return _toolkit.init(ph, rptFile, outFile, unitsType, headLossType)

def open(ph, inpFile, rptFile, outFile):
    r"""
    open(ph, inpFile, rptFile, outFile) -> int

    Parameters
    ----------
    ph: EN_Project
    inpFile: char const *
    rptFile: char const *
    outFile: char const *

    """
    return _toolkit.open(ph, inpFile, rptFile, outFile)

def gettitle(ph):
    r"""
    gettitle(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.gettitle(ph)

def settitle(ph, line1, line2, line3):
    r"""
    settitle(ph, line1, line2, line3) -> int

    Parameters
    ----------
    ph: EN_Project
    line1: char *
    line2: char *
    line3: char *

    """
    return _toolkit.settitle(ph, line1, line2, line3)

def getcomment(ph, object, index):
    r"""
    getcomment(ph, object, index) -> int

    Parameters
    ----------
    ph: EN_Project
    object: int
    index: int

    """
    return _toolkit.getcomment(ph, object, index)

def setcomment(ph, object, index, comment):
    r"""
    setcomment(ph, object, index, comment) -> int

    Parameters
    ----------
    ph: EN_Project
    object: int
    index: int
    comment: char *

    """
    return _toolkit.setcomment(ph, object, index, comment)

def getcount(ph, object):
    r"""
    getcount(ph, object) -> int

    Parameters
    ----------
    ph: EN_Project
    object: int

    """
    return _toolkit.getcount(ph, object)

def saveinpfile(ph, filename):
    r"""
    saveinpfile(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char const *

    """
    return _toolkit.saveinpfile(ph, filename)

def close(ph):
    r"""
    close(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.close(ph)

def solveH(ph):
    r"""
    solveH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.solveH(ph)

def usehydfile(ph, filename):
    r"""
    usehydfile(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char const *

    """
    return _toolkit.usehydfile(ph, filename)

def openH(ph):
    r"""
    openH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.openH(ph)

def initH(ph, initFlag):
    r"""
    initH(ph, initFlag) -> int

    Parameters
    ----------
    ph: EN_Project
    initFlag: int

    """
    return _toolkit.initH(ph, initFlag)

def runH(ph):
    r"""
    runH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.runH(ph)

def nextH(ph):
    r"""
    nextH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.nextH(ph)

def saveH(ph):
    r"""
    saveH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.saveH(ph)

def savehydfile(ph, filename):
    r"""
    savehydfile(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char const *

    """
    return _toolkit.savehydfile(ph, filename)

def closeH(ph):
    r"""
    closeH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.closeH(ph)

def solveQ(ph):
    r"""
    solveQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.solveQ(ph)

def openQ(ph):
    r"""
    openQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.openQ(ph)

def initQ(ph, saveFlag):
    r"""
    initQ(ph, saveFlag) -> int

    Parameters
    ----------
    ph: EN_Project
    saveFlag: int

    """
    return _toolkit.initQ(ph, saveFlag)

def runQ(ph):
    r"""
    runQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.runQ(ph)

def nextQ(ph):
    r"""
    nextQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.nextQ(ph)

def stepQ(ph):
    r"""
    stepQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.stepQ(ph)

def closeQ(ph):
    r"""
    closeQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.closeQ(ph)

def writeline(ph, line):
    r"""
    writeline(ph, line) -> int

    Parameters
    ----------
    ph: EN_Project
    line: char *

    """
    return _toolkit.writeline(ph, line)

def report(ph):
    r"""
    report(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.report(ph)

def copyreport(ph, filename):
    r"""
    copyreport(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char *

    """
    return _toolkit.copyreport(ph, filename)

def clearreport(ph):
    r"""
    clearreport(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.clearreport(ph)

def resetreport(ph):
    r"""
    resetreport(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.resetreport(ph)

def setreport(ph, format):
    r"""
    setreport(ph, format) -> int

    Parameters
    ----------
    ph: EN_Project
    format: char *

    """
    return _toolkit.setreport(ph, format)

def setstatusreport(ph, level):
    r"""
    setstatusreport(ph, level) -> int

    Parameters
    ----------
    ph: EN_Project
    level: int

    """
    return _toolkit.setstatusreport(ph, level)

def getversion():
    r"""getversion() -> int"""
    return _toolkit.getversion()

def geterror(errcode, maxLen):
    r"""
    geterror(errcode, maxLen) -> int

    Parameters
    ----------
    errcode: int
    maxLen: int

    """
    return _toolkit.geterror(errcode, maxLen)

def getstatistic(ph, type):
    r"""
    getstatistic(ph, type) -> int

    Parameters
    ----------
    ph: EN_Project
    type: int

    """
    return _toolkit.getstatistic(ph, type)

def getresultindex(ph, type, index):
    r"""
    getresultindex(ph, type, index) -> int

    Parameters
    ----------
    ph: EN_Project
    type: int
    index: int

    """
    return _toolkit.getresultindex(ph, type, index)

def getoption(ph, option):
    r"""
    getoption(ph, option) -> int

    Parameters
    ----------
    ph: EN_Project
    option: int

    """
    return _toolkit.getoption(ph, option)

def setoption(ph, option, value):
    r"""
    setoption(ph, option, value) -> int

    Parameters
    ----------
    ph: EN_Project
    option: int
    value: double

    """
    return _toolkit.setoption(ph, option, value)

def getflowunits(ph):
    r"""
    getflowunits(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getflowunits(ph)

def setflowunits(ph, units):
    r"""
    setflowunits(ph, units) -> int

    Parameters
    ----------
    ph: EN_Project
    units: int

    """
    return _toolkit.setflowunits(ph, units)

def gettimeparam(ph, param):
    r"""
    gettimeparam(ph, param) -> int

    Parameters
    ----------
    ph: EN_Project
    param: int

    """
    return _toolkit.gettimeparam(ph, param)

def settimeparam(ph, param, value):
    r"""
    settimeparam(ph, param, value) -> int

    Parameters
    ----------
    ph: EN_Project
    param: int
    value: long

    """
    return _toolkit.settimeparam(ph, param, value)

def getqualinfo(ph):
    r"""
    getqualinfo(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getqualinfo(ph)

def getqualtype(ph):
    r"""
    getqualtype(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getqualtype(ph)

def setqualtype(ph, qualType, chemName, chemUnits, traceNode):
    r"""
    setqualtype(ph, qualType, chemName, chemUnits, traceNode) -> int

    Parameters
    ----------
    ph: EN_Project
    qualType: int
    chemName: char *
    chemUnits: char *
    traceNode: char *

    """
    return _toolkit.setqualtype(ph, qualType, chemName, chemUnits, traceNode)

def addnode(ph, id, nodeType):
    r"""
    addnode(ph, id, nodeType) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *
    nodeType: int

    """
    return _toolkit.addnode(ph, id, nodeType)

def deletenode(ph, index, actionCode):
    r"""
    deletenode(ph, index, actionCode) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    actionCode: int

    """
    return _toolkit.deletenode(ph, index, actionCode)

def getnodeindex(ph, id):
    r"""
    getnodeindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getnodeindex(ph, id)

def getnodeid(ph, index):
    r"""
    getnodeid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getnodeid(ph, index)

def setnodeid(ph, index, newid):
    r"""
    setnodeid(ph, index, newid) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    newid: char *

    """
    return _toolkit.setnodeid(ph, index, newid)

def getnodetype(ph, index):
    r"""
    getnodetype(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getnodetype(ph, index)

def getnodevalue(ph, index, property):
    r"""
    getnodevalue(ph, index, property) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int

    """
    return _toolkit.getnodevalue(ph, index, property)

def setnodevalue(ph, index, property, value):
    r"""
    setnodevalue(ph, index, property, value) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int
    value: double

    """
    return _toolkit.setnodevalue(ph, index, property, value)

def setjuncdata(ph, index, elev, dmnd, dmndpat):
    r"""
    setjuncdata(ph, index, elev, dmnd, dmndpat) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    elev: double
    dmnd: double
    dmndpat: char *

    """
    return _toolkit.setjuncdata(ph, index, elev, dmnd, dmndpat)

def settankdata(ph, index, elev, initlvl, minlvl, maxlvl, diam, minvol, volcurve):
    r"""
    settankdata(ph, index, elev, initlvl, minlvl, maxlvl, diam, minvol, volcurve) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    elev: double
    initlvl: double
    minlvl: double
    maxlvl: double
    diam: double
    minvol: double
    volcurve: char *

    """
    return _toolkit.settankdata(ph, index, elev, initlvl, minlvl, maxlvl, diam, minvol, volcurve)

def getcoord(ph, index):
    r"""
    getcoord(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcoord(ph, index)

def setcoord(ph, index, x, y):
    r"""
    setcoord(ph, index, x, y) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    x: double
    y: double

    """
    return _toolkit.setcoord(ph, index, x, y)

def getdemandmodel(ph):
    r"""
    getdemandmodel(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getdemandmodel(ph)

def setdemandmodel(ph, type, pmin, preq, pexp):
    r"""
    setdemandmodel(ph, type, pmin, preq, pexp) -> int

    Parameters
    ----------
    ph: EN_Project
    type: int
    pmin: double
    preq: double
    pexp: double

    """
    return _toolkit.setdemandmodel(ph, type, pmin, preq, pexp)

def adddemand(ph, nodeIndex, baseDemand, demandPattern, demandName):
    r"""
    adddemand(ph, nodeIndex, baseDemand, demandPattern, demandName) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    baseDemand: double
    demandPattern: char *
    demandName: char *

    """
    return _toolkit.adddemand(ph, nodeIndex, baseDemand, demandPattern, demandName)

def deletedemand(ph, nodeIndex, demandIndex):
    r"""
    deletedemand(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.deletedemand(ph, nodeIndex, demandIndex)

def getdemandindex(ph, nodeIndex, demandName):
    r"""
    getdemandindex(ph, nodeIndex, demandName) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandName: char *

    """
    return _toolkit.getdemandindex(ph, nodeIndex, demandName)

def getnumdemands(ph, nodeIndex):
    r"""
    getnumdemands(ph, nodeIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int

    """
    return _toolkit.getnumdemands(ph, nodeIndex)

def getbasedemand(ph, nodeIndex, demandIndex):
    r"""
    getbasedemand(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.getbasedemand(ph, nodeIndex, demandIndex)

def setbasedemand(ph, nodeIndex, demandIndex, baseDemand):
    r"""
    setbasedemand(ph, nodeIndex, demandIndex, baseDemand) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int
    baseDemand: double

    """
    return _toolkit.setbasedemand(ph, nodeIndex, demandIndex, baseDemand)

def getdemandpattern(ph, nodeIndex, demandIndex):
    r"""
    getdemandpattern(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.getdemandpattern(ph, nodeIndex, demandIndex)

def setdemandpattern(ph, nodeIndex, demandIndex, patIndex):
    r"""
    setdemandpattern(ph, nodeIndex, demandIndex, patIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int
    patIndex: int

    """
    return _toolkit.setdemandpattern(ph, nodeIndex, demandIndex, patIndex)

def getdemandname(ph, nodeIndex, demandIndex):
    r"""
    getdemandname(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.getdemandname(ph, nodeIndex, demandIndex)

def setdemandname(ph, nodeIndex, demandIdx, demandName):
    r"""
    setdemandname(ph, nodeIndex, demandIdx, demandName) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIdx: int
    demandName: char *

    """
    return _toolkit.setdemandname(ph, nodeIndex, demandIdx, demandName)

def addlink(ph, id, linkType, fromNode, toNode):
    r"""
    addlink(ph, id, linkType, fromNode, toNode) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *
    linkType: int
    fromNode: char *
    toNode: char *

    """
    return _toolkit.addlink(ph, id, linkType, fromNode, toNode)

def deletelink(ph, index, actionCode):
    r"""
    deletelink(ph, index, actionCode) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    actionCode: int

    """
    return _toolkit.deletelink(ph, index, actionCode)

def getlinkindex(ph, id):
    r"""
    getlinkindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getlinkindex(ph, id)

def getlinkid(ph, index):
    r"""
    getlinkid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getlinkid(ph, index)

def setlinkid(ph, index, newid):
    r"""
    setlinkid(ph, index, newid) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    newid: char *

    """
    return _toolkit.setlinkid(ph, index, newid)

def getlinktype(ph, index):
    r"""
    getlinktype(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getlinktype(ph, index)

def setlinktype(ph, inout_index, linkType, actionCode):
    r"""
    setlinktype(ph, inout_index, linkType, actionCode) -> int

    Parameters
    ----------
    ph: EN_Project
    inout_index: int *
    linkType: int
    actionCode: int

    """
    return _toolkit.setlinktype(ph, inout_index, linkType, actionCode)

def getlinknodes(ph, index):
    r"""
    getlinknodes(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getlinknodes(ph, index)

def setlinknodes(ph, index, node1, node2):
    r"""
    setlinknodes(ph, index, node1, node2) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    node1: int
    node2: int

    """
    return _toolkit.setlinknodes(ph, index, node1, node2)

def getlinkvalue(ph, index, property):
    r"""
    getlinkvalue(ph, index, property) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int

    """
    return _toolkit.getlinkvalue(ph, index, property)

def setlinkvalue(ph, index, property, value):
    r"""
    setlinkvalue(ph, index, property, value) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int
    value: double

    """
    return _toolkit.setlinkvalue(ph, index, property, value)

def setpipedata(ph, index, length, diam, rough, mloss):
    r"""
    setpipedata(ph, index, length, diam, rough, mloss) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    length: double
    diam: double
    rough: double
    mloss: double

    """
    return _toolkit.setpipedata(ph, index, length, diam, rough, mloss)

def getvertexcount(ph, index):
    r"""
    getvertexcount(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getvertexcount(ph, index)

def getvertex(ph, index, vertex):
    r"""
    getvertex(ph, index, vertex) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    vertex: int

    """
    return _toolkit.getvertex(ph, index, vertex)

def setvertex(ph, index, vertex, x, y):
    r"""
    setvertex(ph, index, vertex, x, y) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    vertex: int
    x: double
    y: double

    """
    return _toolkit.setvertex(ph, index, vertex, x, y)

def setvertices(ph, index, x, y, count):
    r"""
    setvertices(ph, index, x, y, count) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    x: double *
    y: double *
    count: int

    """
    return _toolkit.setvertices(ph, index, x, y, count)

def getpumptype(ph, linkIndex):
    r"""
    getpumptype(ph, linkIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    linkIndex: int

    """
    return _toolkit.getpumptype(ph, linkIndex)

def getheadcurveindex(ph, linkIndex):
    r"""
    getheadcurveindex(ph, linkIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    linkIndex: int

    """
    return _toolkit.getheadcurveindex(ph, linkIndex)

def setheadcurveindex(ph, linkIndex, curveIndex):
    r"""
    setheadcurveindex(ph, linkIndex, curveIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    linkIndex: int
    curveIndex: int

    """
    return _toolkit.setheadcurveindex(ph, linkIndex, curveIndex)

def addpattern(ph, id):
    r"""
    addpattern(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.addpattern(ph, id)

def deletepattern(ph, index):
    r"""
    deletepattern(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deletepattern(ph, index)

def getpatternindex(ph, id):
    r"""
    getpatternindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getpatternindex(ph, id)

def getpatternid(ph, index):
    r"""
    getpatternid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getpatternid(ph, index)

def setpatternid(ph, index, id):
    r"""
    setpatternid(ph, index, id) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    id: char *

    """
    return _toolkit.setpatternid(ph, index, id)

def getpatternlen(ph, index):
    r"""
    getpatternlen(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getpatternlen(ph, index)

def getpatternvalue(ph, index, period):
    r"""
    getpatternvalue(ph, index, period) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    period: int

    """
    return _toolkit.getpatternvalue(ph, index, period)

def setpatternvalue(ph, index, period, value):
    r"""
    setpatternvalue(ph, index, period, value) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    period: int
    value: double

    """
    return _toolkit.setpatternvalue(ph, index, period, value)

def getaveragepatternvalue(ph, index):
    r"""
    getaveragepatternvalue(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getaveragepatternvalue(ph, index)

def setpattern(ph, index, values, len):
    r"""
    setpattern(ph, index, values, len) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    values: double *
    len: int

    """
    return _toolkit.setpattern(ph, index, values, len)

def addcurve(ph, id):
    r"""
    addcurve(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.addcurve(ph, id)

def deletecurve(ph, index):
    r"""
    deletecurve(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deletecurve(ph, index)

def getcurveindex(ph, id):
    r"""
    getcurveindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getcurveindex(ph, id)

def getcurveid(ph, index):
    r"""
    getcurveid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcurveid(ph, index)

def setcurveid(ph, index, id):
    r"""
    setcurveid(ph, index, id) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    id: char *

    """
    return _toolkit.setcurveid(ph, index, id)

def getcurvelen(ph, index):
    r"""
    getcurvelen(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcurvelen(ph, index)

def getcurvetype(ph, index):
    r"""
    getcurvetype(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcurvetype(ph, index)

def setcurvetype(ph, index, type):
    r"""
    setcurvetype(ph, index, type) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    type: int

    """
    return _toolkit.setcurvetype(ph, index, type)

def getcurvevalue(ph, curveIndex, pointIndex):
    r"""
    getcurvevalue(ph, curveIndex, pointIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    curveIndex: int
    pointIndex: int

    """
    return _toolkit.getcurvevalue(ph, curveIndex, pointIndex)

def setcurvevalue(ph, curveIndex, pointIndex, x, y):
    r"""
    setcurvevalue(ph, curveIndex, pointIndex, x, y) -> int

    Parameters
    ----------
    ph: EN_Project
    curveIndex: int
    pointIndex: int
    x: double
    y: double

    """
    return _toolkit.setcurvevalue(ph, curveIndex, pointIndex, x, y)

def getcurve(ph, index, out_xValues, out_yValues):
    r"""
    getcurve(ph, index, out_xValues, out_yValues) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    out_xValues: double *
    out_yValues: double *

    """
    return _toolkit.getcurve(ph, index, out_xValues, out_yValues)

def setcurve(ph, index, xValues, yValues, nPoints):
    r"""
    setcurve(ph, index, xValues, yValues, nPoints) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    xValues: double *
    yValues: double *
    nPoints: int

    """
    return _toolkit.setcurve(ph, index, xValues, yValues, nPoints)

def addcontrol(ph, type, linkIndex, setting, nodeIndex, level):
    r"""
    addcontrol(ph, type, linkIndex, setting, nodeIndex, level) -> int

    Parameters
    ----------
    ph: EN_Project
    type: int
    linkIndex: int
    setting: double
    nodeIndex: int
    level: double

    """
    return _toolkit.addcontrol(ph, type, linkIndex, setting, nodeIndex, level)

def deletecontrol(ph, index):
    r"""
    deletecontrol(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deletecontrol(ph, index)

def getcontrol(ph, index):
    r"""
    getcontrol(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcontrol(ph, index)

def setcontrol(ph, index, type, linkIndex, setting, nodeIndex, level):
    r"""
    setcontrol(ph, index, type, linkIndex, setting, nodeIndex, level) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    type: int
    linkIndex: int
    setting: double
    nodeIndex: int
    level: double

    """
    return _toolkit.setcontrol(ph, index, type, linkIndex, setting, nodeIndex, level)

def addrule(ph, rule):
    r"""
    addrule(ph, rule) -> int

    Parameters
    ----------
    ph: EN_Project
    rule: char *

    """
    return _toolkit.addrule(ph, rule)

def deleterule(ph, index):
    r"""
    deleterule(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deleterule(ph, index)

def getrule(ph, index):
    r"""
    getrule(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getrule(ph, index)

def getruleID(ph, index):
    r"""
    getruleID(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getruleID(ph, index)

def getpremise(ph, ruleIndex, premiseIndex):
    r"""
    getpremise(ph, ruleIndex, premiseIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int

    """
    return _toolkit.getpremise(ph, ruleIndex, premiseIndex)

def setpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value):
    r"""
    setpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    logop: int
    object: int
    objIndex: int
    variable: int
    relop: int
    status: int
    value: double

    """
    return _toolkit.setpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value)

def setpremiseindex(ph, ruleIndex, premiseIndex, objIndex):
    r"""
    setpremiseindex(ph, ruleIndex, premiseIndex, objIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    objIndex: int

    """
    return _toolkit.setpremiseindex(ph, ruleIndex, premiseIndex, objIndex)

def setpremisestatus(ph, ruleIndex, premiseIndex, status):
    r"""
    setpremisestatus(ph, ruleIndex, premiseIndex, status) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    status: int

    """
    return _toolkit.setpremisestatus(ph, ruleIndex, premiseIndex, status)

def setpremisevalue(ph, ruleIndex, premiseIndex, value):
    r"""
    setpremisevalue(ph, ruleIndex, premiseIndex, value) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    value: double

    """
    return _toolkit.setpremisevalue(ph, ruleIndex, premiseIndex, value)

def getthenaction(ph, ruleIndex, actionIndex):
    r"""
    getthenaction(ph, ruleIndex, actionIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int

    """
    return _toolkit.getthenaction(ph, ruleIndex, actionIndex)

def setthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting):
    r"""
    setthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int
    linkIndex: int
    status: int
    setting: double

    """
    return _toolkit.setthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting)

def getelseaction(ph, ruleIndex, actionIndex):
    r"""
    getelseaction(ph, ruleIndex, actionIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int

    """
    return _toolkit.getelseaction(ph, ruleIndex, actionIndex)

def setelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting):
    r"""
    setelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int
    linkIndex: int
    status: int
    setting: double

    """
    return _toolkit.setelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting)

def setrulepriority(ph, index, priority):
    r"""
    setrulepriority(ph, index, priority) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    priority: double

    """
    return _toolkit.setrulepriority(ph, index, priority)


