# -*- coding: utf-8 -*-
from setuptools import setup

modules = \
['tox_poetry_installer']
install_requires = \
['poetry>=1.0.0,<2.0.0', 'tox>=2.3.0,<4.0.0']

entry_points = \
{'tox': ['poetry_installer = tox_poetry_installer']}

setup_kwargs = {
    'name': 'tox-poetry-installer',
    'version': '0.1.2',
    'description': 'Tox plugin to install Tox environment dependencies using the Poetry backend and lockfile',
    'long_description': "# tox-poetry-installer\n\nA plugin for [Tox](https://tox.readthedocs.io/en/latest/) that allows test environment\ndependencies to be installed using [Poetry](https://python-poetry.org/) using its lockfile.\n\n⚠️ **This project is alpha software and should not be used in a production capacity** ⚠️\n\n![image](https://img.shields.io/pypi/l/tox-poetry-installer)\n![image](https://img.shields.io/pypi/v/tox-poetry-installer)\n![image](https://img.shields.io/pypi/pyversions/tox-poetry-installer)\n\n**Documentation**\n\n* [Installation and Usage](#installation-and-usage)\n* [Limitations](#limitations)\n* [Why would I use this?](#what-problems-does-this-solve) (What problems does this solve?)\n* [Developing](#developing)\n* [Contributing](#contributing)\n* [Roadmap](#roadmap)\n  * [Path to Beta](#path-to-beta)\n  * [Path to Stable](#path-to-stable)\n\nRelated resources:\n* [Poetry Python Project Manager](https://python-poetry.org/)\n* [Tox Automation Project](https://tox.readthedocs.io/en/latest/)\n* [Tox plugins](https://tox.readthedocs.io/en/latest/plugins.html)\n\n\n## Installation and Usage\n\n1. Install the plugin from PyPI:\n\n```\npoetry add tox-poetry-installer --dev\n```\n\n2. Remove all version specifications from the environment dependencies in `tox.ini`:\n\n```ini\n# This...\n[testenv]\ndescription = My cool test environment\ndeps =\n    requests >=2.19,<3.0\n    toml == 0.10.0\n    pytest >=5.4\n\n# ...becomes this:\n[testenv]\ndescription = My cool test environment\ndeps =\n    requests\n    toml\n    pytest\n```\n\n3. Run Tox with the `--recreate` flag to rebuild the test environments:\n\n```\npoetry run tox --recreate\n```\n\n4. 💸 Profit 💸\n\n\n## Limitations\n\n* In general, any command line or INI settings that affect how Tox installs environment\n  dependencies will be disabled by installing this plugin. A non-exhaustive and untested\n  list of the INI options that are not expected to work with this plugin is below:\n  * [`install_command`](https://tox.readthedocs.io/en/latest/config.html#conf-install_command)\n  * [`pip_pre`](https://tox.readthedocs.io/en/latest/config.html#conf-pip_pre)\n  * [`downloadcache`](https://tox.readthedocs.io/en/latest/config.html#conf-downloadcache) (deprecated)\n  * [`download`](https://tox.readthedocs.io/en/latest/config.html#conf-download)\n  * [`indexserver`](https://tox.readthedocs.io/en/latest/config.html#conf-indexserver)\n  * [`usedevelop`](https://tox.readthedocs.io/en/latest/config.html#conf-indexserver)\n  * [`extras`](https://tox.readthedocs.io/en/latest/config.html#conf-extras)\n\n* When the plugin is enabled all dependencies for all environments will use the Poetry backend\n  provided by the plugin; this functionality cannot be disabled on a per-environment basis.\n\n* Alternative versions cannot be specified alongside versions from the lockfile. All\n  dependencies are installed from the lockfile and alternative versions cannot be specified\n  in the Tox configuration.\n\n\n## Why would I use this?\n\n**Introduction**\n\nThe lockfile is a file generated by a package manager for a project that lists what\ndependencies are installed, the versions of those dependencies, and additional metadata that\nthe package manager can use to recreate the local project environment. This allows developers\nto have confidence that a bug they are encountering that may be caused by one of their\ndependencies will be reproducible on another device. In addition, installing a project\nenvironment from a lockfile gives confidence that automated systems running tests or performing\nbuilds are using the same environment that a developer is.\n\n[Poetry](https://python-poetry.org/) is a project dependency manager for Python projects, and\nas such it creates and manages a lockfile so that its users can benefit from all the features\ndescribed above. [Tox](https://tox.readthedocs.io/en/latest/#what-is-tox) is an automation tool\nthat allows Python developers to run tests suites, perform builds, and automate tasks within\nself contained [Python virtual environments](https://docs.python.org/3/tutorial/venv.html).\nTo make these environments useful, Tox supports installing per-environment dependencies.\nHowever, since these environments are created on the fly and Tox does not maintain a lockfile,\nthere can be subtle differences between the dependencies a developer is using and the\ndependencies Tox uses.\n\nThis is where this plugin comes into play.\n\nBy default Tox uses [Pip](https://docs.python.org/3/tutorial/venv.html) to install the\nPEP-508 compliant dependencies to a test environment. A more robust way to do this is to\ninstall dependencies directly from the lockfile so that the version installed to the Tox\nenvironment always matches the version Poetry specifies. This plugin overwrites the default\nTox dependency installation behavior and replaces it with a Poetry-based installation using\nthe dependency metadata from the lockfile.\n\n**The Problem**\n\nEnvironment dependencies for a Tox environment are usually done in PEP-508 format like the\nbelow example\n\n```ini\n# tox.ini\n...\n\n[testenv]\ndescription = Some very cool tests\ndeps =\n    foo == 1.2.3\n    bar >=1.3,<2.0\n    baz\n\n...\n```\n\nPerhaps these dependencies are also useful during development, so they can be added to the\nPoetry environment using this command:\n\n ```\n poetry add foo==1.2.3 bar>=1.3,<2.0 baz --dev\n ```\n\n However there are three potential problems that could arise from each of these environment\n dependencies that would _only_ appear in the Tox environment and not in the Poetry\n environment:\n\n * **The `foo` dependency is pinned to a specific version:** let's imagine a security\n   vulnerability is discovered in `foo` and the maintainers release version `1.2.4` to fix\n   it. A developer can run `poetry remove foo && poetry add foo^1.2` to get the new version,\n   but the Tox environment is left unchanged. The developer environment specified by the\n   lockfile is now patched against the vulnerability, but the Tox environment is not.\n\n* **The `bar` dependency specifies a dynamic range:** a dynamic range allows a range of\n  versions to be installed, but the lockfile will have an exact version specified so that\n  the Poetry environment is reproducible; this allows versions to be updated with\n  `poetry update` rather than with the `remove` and `add` used above. If the maintainers of\n  `bar` release version `1.6.0` then the Tox environment will install it because it is valid\n  for the specified version range, meanwhile the Poetry environment will continue to install\n  the version from the lockfile until `poetry update bar` explicitly updates it. The\n  development environment is now has a different version of `bar` than the Tox environment.\n\n* **The `baz` dependency is unpinned:** unpinned dependencies are\n  [generally a bad idea](https://python-poetry.org/docs/faq/#why-are-unbound-version-constraints-a-bad-idea),\n  but here it can cause real problems. Poetry will interpret an unbound dependency using\n  [the carrot requirement](https://python-poetry.org/docs/dependency-specification/#caret-requirements)\n  but Pip (via Tox) will interpret it as a wildcard. If the latest version of `baz` is `1.0.0`\n  then `poetry add baz` will result in a constraint of `baz>=1.0.0,<2.0.0` while the Tox\n  environment will have a constraint of `baz==*`. The Tox environment can now install an\n  incompatible version of `baz` that cannot be easily caught using `poetry update`.\n\nAll of these problems can apply not only to the dependencies specified for a Tox environment,\nbut also to the dependencies of those dependencies, and so on.\n\n**The Solution**\n\nThis plugin requires that all dependencies specified for all Tox environments be unbound\nwith no version constraint specified at all. This seems counter-intuitive given the problems\noutlined above, but what it allows the plugin to do is offload all version management to\nPoetry.\n\nOn initial inspection, the environment below appears less stable than the one presented above\nbecause it does not specify any versions for its dependencies:\n\n```ini\n# tox.ini\n...\n\n[testenv]\ndescription = Some very cool tests\ndeps =\n    foo\n    bar\n    baz\n\n...\n```\n\nHowever with the `tox-poetry-installer` plugin installed this instructs Tox to install these\ndependencies using the Poetry lockfile so that the version installed to the Tox environment\nexactly matches the version Poetry is managing. When `poetry update` updates the lockfile\nwith new dependency versions, Tox will automatically install these new versions without needing\nany changes to the configuration.\n\nAll dependencies are specified in one place (the lockfile) and dependency version management is\nhandled by a tool dedicated to that task (Poetry).\n\n\n## Developing\n\nThis project requires Poetry-1.0+, see the [installation instructions here](https://python-poetry.org/docs/#installation).\n\n```bash\n# Clone the repository...\n# ...over HTTPS\ngit clone https://github.com/enpaul/tox-poetry-installer.git\n# ...over SSH\ngit clone git@github.com:enpaul/tox-poetry-installer.git\n\n# Create a the local project virtual environment and install dependencies\ncd tox-poetry-installer\npoetry install\n\n# Install pre-commit hooks\npoetry run pre-commit install\n\n# Run tests and static analysis\npoetry run tox\n```\n\n\n## Contributing\n\nAll project contributors and participants are expected to adhere to the\n[Contributor Covenant Code of Conduct, Version 2](CODE_OF_CONDUCT.md).\n\n* To report a bug, request a feature, or ask for assistance, please\n  [open an issue on the Github repository](https://github.com/enpaul/tox-poetry-installer/issues/new).\n* To report a security concern or code of conduct violation, please contact the project author\n  directly at **ethan dot paul at enp dot one**.\n* To submit an update, please\n  [fork the repository](https://docs.github.com/en/enterprise/2.20/user/github/getting-started-with-github/fork-a-repo)\n  and\n  [open a pull request](https://github.com/enpaul/tox-poetry-installer/compare).\n\n\n## Roadmap\n\nThis project is under active development and is classified as alpha software, not yet ready\nusage in production systems.\n\n* Beta classification will be assigned when the initial feature set is finalized\n* Stable classification will be assigned when the test suite covers an acceptable number of\n  use cases\n\n### Path to Beta\n\n- [ ] Verify that primary package dependencies (from the `.package` env) are installed\n      correctly using the Poetry backend.\n- [ ] Support the [`extras`](https://tox.readthedocs.io/en/latest/config.html#conf-extras)\n      Tox configuration option\n- [ ] Add per-environment Tox configuration option to fall back to default installation\n      backend.\n- [ ] Add detection of a changed lockfile to automatically trigger a rebuild of Tox\n      environments when necessary.\n- [ ] Add warnings when an unsupported Tox configuration option is detected while using the\n      Poetry backend.\n- [X] Add trivial tests to ensure the project metadata is consistent between the pyproject.toml\n      and the module constants.\n- [ ] Update to use [poetry-core](https://github.com/python-poetry/poetry-core)\n      Tox configuration option) and improve robustness of the Tox and Poetry module imports\n      to avoid potentially breaking API changes in upstream packages.\n\n### Path to Stable\n\nEverything in Beta plus...\n\n- [ ] Add tests for each feature version of Tox between 2.3 and 3.20\n- [ ] Add tests for Python-3.6, 3.7, and 3.8\n- [ ] Add Github Actions based CI\n- [ ] Add CI for CPython, PyPy, and Conda\n- [ ] Add CI for Linux and Windows\n",
    'author': 'Ethan Paul',
    'author_email': '24588726+enpaul@users.noreply.github.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/enpaul/tox-poetry-installer/',
    'py_modules': modules,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
