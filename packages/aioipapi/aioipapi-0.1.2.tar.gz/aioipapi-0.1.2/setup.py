# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['aioipapi']

package_data = \
{'': ['*']}

install_requires = \
['aiohttp>=3.6.2,<4.0.0',
 'aioitertools>=0.7.0,<0.8.0',
 'importlib_metadata>=2.0.0,<3.0.0',
 'pydantic>=1.6.1,<2.0.0',
 'tenacity>=6.2.0,<7.0.0',
 'yarl>=1.5.1,<2.0.0']

setup_kwargs = {
    'name': 'aioipapi',
    'version': '0.1.2',
    'description': 'Asynchronous aiohttp based client for https://ip-api.com',
    'long_description': "# aioipapi\n\n[![PyPI version](https://img.shields.io/pypi/v/aioipapi.svg)](https://pypi.python.org/pypi/aioipapi)\n![Supported Python versions](https://img.shields.io/pypi/pyversions/aioipapi.svg)\n[![Build status](https://travis-ci.org/espdev/aioipapi.svg?branch=master)](https://travis-ci.org/espdev/aioipapi)\n[![Coverage Status](https://coveralls.io/repos/github/espdev/aioipapi/badge.svg?branch=master)](https://coveralls.io/github/espdev/aioipapi?branch=master)\n[![License](https://img.shields.io/pypi/l/aioipapi.svg)](LICENSE)\n\nAsynchronous asyncio/aiohttp based client for https://ip-api.com IP geolocation API.\n\n**ip-api.com** is a fast, accurate, reliable API service for IP geolocation, \nfree for non-commercial use.\n\n**aioipapi** package provides asynchronous API to use ip-api.com service in free and pro. \nThe package features:\n\n- Support JSON API [endpoint](https://ip-api.com/docs/api:json)\n- Support Batch JSON API [endpoint](https://ip-api.com/docs/api:batch)\n- Access to [pro service](https://members.ip-api.com/) with API key\n- Free API rate limits control\n- Customizable retrying when networking problems\n\n**You must not use aioipapi package for commercial purposes without API key.**\n\n\n## Installing\n\nUse pip for installing:\n\n```\npip install -U aioipapi\n```\n\n## Usage Examples\n\n_All examples are provided for Python 3.7 and above._\n\nUse `location` coroutine to locate your own IP:\n\n```python\nimport asyncio\nfrom aioipapi import location\n\nprint(asyncio.run(location()))\n```\n```\n{'status': 'success', 'country': 'United States', 'countryCode': 'US', 'region': 'CA', 'regionName': 'California', 'city': 'Santa Clara', 'zip': '95051', 'lat': 37.3417, 'lon': -121.9753, 'timezone': 'America/Los_Angeles', 'isp': 'DigitalOcean, LLC', 'org': 'Digital Ocean', 'as': 'AS14061 DigitalOcean, LLC', 'query': 'XXX.XX.XXX.XXX'}\n```\n\nUse `location` coroutine to locate a domain name:\n\n```python\nprint(asyncio.run(location('github.com')))\n```\n```\n{'status': 'success', 'country': 'Netherlands', 'countryCode': 'NL', 'region': 'NH', 'regionName': 'North Holland', 'city': 'Amsterdam', 'zip': '1012', 'lat': 52.3667, 'lon': 4.89454, 'timezone': 'Europe/Amsterdam', 'isp': 'GitHub, Inc.', 'org': 'GitHub, Inc.', 'as': 'AS36459 GitHub, Inc.', 'query': '140.82.118.3'}\n```\n\nA domain location is supported only in JSON endpoint. Currently, batch JSON endpoint does not support domain names as query. \nIn other words, you cannot locate a list of domain names per time. \n\nUse `location` coroutine to locate an IP with cusomized result fields and language:\n\n```python\nprint(asyncio.run(location('8.8.8.8', fields=['continent', 'region', 'country'], lang='de')))\n```\n```\n{'status': 'success', 'continent': 'Nordamerika', 'country': 'Vereinigte Staaten', 'region': 'VA', 'query': '8.8.8.8'}\n```\n\nUse `location` coroutine to locate a list of IPs:\n\n```python\nprint(asyncio.run(location(['1.0.0.1', '1.1.1.1', '8.8.4.4', '8.8.8.8'], fields=['lat', 'lon', 'org'])))\n```\n```\n[\n  {'status': 'success', 'lat': -27.4766, 'lon': 153.0166, 'org': 'APNIC and Cloudflare DNS Resolver project', 'query': '1.0.0.1'}, \n  {'status': 'success', 'lat': -27.4766, 'lon': 153.0166, 'org': 'APNIC and Cloudflare DNS Resolver project', 'query': '1.1.1.1'}, \n  {'status': 'success', 'lat': 39.03, 'lon': -77.5, 'org': 'Google Public DNS', 'query': '8.8.4.4'}, \n  {'status': 'success', 'lat': 39.03, 'lon': -77.5, 'org': 'Google Public DNS', 'query': '8.8.8.8'}\n]\n```\n\nYou can customize the result fields and lang for each IP in the query list:\n\n```python\nips = [\n    '77.88.55.66',\n    {'query': '1.1.1.1', 'fields': ['lat', 'lon', 'country'], 'lang': 'de'},\n    {'query': '8.8.8.8', 'fields': ['continent', 'country'], 'lang': 'ru'},\n]\n\nprint(asyncio.run(location(ips, fields=['region', 'isp', 'org'])))\n```\n```\n[\n  {'status': 'success', 'region': 'MOW', 'isp': 'Yandex LLC', 'org': 'Yandex enterprise network', 'query': '77.88.55.66'},\n  {'status': 'success', 'country': 'Australien', 'lat': -27.4766, 'lon': 153.0166, 'query': '1.1.1.1'}, \n  {'status': 'success', 'continent': 'Северная Америка', 'country': 'США', 'query': '8.8.8.8'}\n]\n```\n\nIn these cases the package uses Batch JSON API endpoint.\n\nUse `location_stream` async generator to locate IPs from an iterable or async iterable:\n\n```python\nimport asyncio\nfrom aioipapi import location_stream\n\nasync def locate():\n    async for res in location_stream(['1.0.0.1', '1.1.1.1', '8.8.4.4', '8.8.8.8']):\n        print(res)\n\nasyncio.run(locate())\n```\n\n`location_stream` also supports `fields` and `lang` options. \n`location_stream` always uses Batch JSON API endpoint.\n\nUse `IpApiClient` class:\n\n```python\nimport asyncio\nfrom aioipapi import IpApiClient\n\nasync def locate():\n    async with IpApiClient() as client:\n        print(await client.location())\n\nasyncio.run(locate())\n```\n\n`IpApiClient` provides `location` and `location_stream` methods similar to the corresponding non-member coroutines.\n\nUse `IpApiClient` class with existing `aiohttp.ClientSession` instead of client own session:\n\n```python\nimport asyncio\nimport aiohttp\nfrom aioipapi import IpApiClient\n\nasync def locate():\n    async with aiohttp.ClientSession() as session:\n        async with IpApiClient(session=session) as client:\n            print(await client.location())\n\nasyncio.run(locate())\n```\n\nUsage of existing session also supported in `location` and `location_stream` non-member coroutines.\n\nIf you want to use unlimited pro ip-api service you can use your API key in `location`, `location_stream` functions and `IpApiClient`:\n\n```python\n\nasync with IpApiClient(key='your-api-key') as client:\n    ...\n```\n\nWhen API key is set, the package always uses HTTPS for connection with ip-api service.\n\n## Free API Rate Limit Control\n\nip-api service has rate limits in free API (without key). \nCurrently, there are 45 requests per minute for JSON endpoint and 15 requests per minute for Batch JSON endpoint.\n\nThe package controls the rate limits using `X-Rl` and `X-Ttl` response headers. \nIn other words, you are unlikely to get 429 HTTP error when using free API. \nWhen API key is being used, the rate limits are not being checked, because pro API is theoretically unlimited.\n\nLet's locate a lot of IPs for example:\n\n```python\nimport asyncio\nimport sys\nimport logging\n\nlogging.basicConfig(\n    format='%(relativeCreated)d [%(levelname)s] %(message)s',\n    level=logging.DEBUG,\n    stream=sys.stderr,\n)\n\nfrom aioipapi import location\n\nasyncio.run(location(['8.8.8.8'] * 2000))\n```\n```\n798 [DEBUG] BATCH API rate limit: rl=14, ttl=60\n900 [DEBUG] BATCH API rate limit: rl=13, ttl=59\n1001 [DEBUG] BATCH API rate limit: rl=12, ttl=59\n1103 [DEBUG] BATCH API rate limit: rl=11, ttl=59\n1247 [DEBUG] BATCH API rate limit: rl=10, ttl=59\n1391 [DEBUG] BATCH API rate limit: rl=9, ttl=59\n1493 [DEBUG] BATCH API rate limit: rl=8, ttl=59\n1595 [DEBUG] BATCH API rate limit: rl=7, ttl=59\n1698 [DEBUG] BATCH API rate limit: rl=6, ttl=59\n1809 [DEBUG] BATCH API rate limit: rl=5, ttl=58\n1910 [DEBUG] BATCH API rate limit: rl=4, ttl=58\n2015 [DEBUG] BATCH API rate limit: rl=3, ttl=58\n2116 [DEBUG] BATCH API rate limit: rl=2, ttl=58\n2216 [DEBUG] BATCH API rate limit: rl=1, ttl=58\n2315 [DEBUG] BATCH API rate limit: rl=0, ttl=58\n2367 [WARNING] API rate limit is reached. Waiting for 61 seconds by rate limit...\n63464 [DEBUG] BATCH API rate limit: rl=14, ttl=60\n63605 [DEBUG] BATCH API rate limit: rl=13, ttl=59\n63695 [DEBUG] BATCH API rate limit: rl=12, ttl=59\n63790 [DEBUG] BATCH API rate limit: rl=11, ttl=59\n63894 [DEBUG] BATCH API rate limit: rl=10, ttl=59\n```\n\n# License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
    'author': 'Eugene Prilepin',
    'author_email': 'esp.home@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/espdev/aioipapi',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
