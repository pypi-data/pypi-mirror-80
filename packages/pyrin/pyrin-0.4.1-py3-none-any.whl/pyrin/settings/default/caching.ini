[general]

# you could set a different value for 'shard_name' on different servers
# of application. this will be used in persistent caches to be able
# to load and persist cached items of each server correctly.
# if you have only a single server or do not want to use sharding, you
# could set this to 'null' or a unique name on all servers.
shard_name: null

[extended.permanent]

# specifies that current user must be also included in cache key generation by default.
# this could be overridden on each decorated method.
consider_user: true

[complex]

# specifies that current user must be also included in cache key generation by default.
# this could be overridden on each decorated method.
consider_user: true

# default expire time for cached items in milliseconds.
# defaults to 5000 ms (5 seconds).
# this could be overridden on each decorated method.
expire: 5000

# maximum number of items to be cached in this cache.
# defaults to 5000.
# if you need no limit, it could be set to 'No Limit'.
limit: 5000

# specifies that cached items must be removed from cache in lifo order.
# defaults to false and fifo order will be used.
use_lifo: false

# number of old items to be removed from cache when the limit is reached.
# it must be a positive integer. defaults to 100.
# note that reducing this value to extremely low values will cause a performance
# issue when the cache becomes full.
clear_count: 200

# specifies that cached items which are not expired, must be persisted into
# database on application shutdown and loaded back on next startup.
# for this to work you must override 'Application.get_version' method and
# return a version string in it. then you must increase version on each release
# to invalidate saved caches of older versions.
persistent: false

# chunk size to insert cached items into database on application shutdown.
# this is only used in persistent caches. it could be set to 'null' to insert
# all items at once. defaults to 200.
chunk_size: 200

# specifies that cached item's expire time must be extended on each hit.
# defaults to false. this could be overridden on each decorated method.
refreshable: false

[memcached]

# memcached server hostname or ip address.
hostname: 127.0.0.1

# memcached server port number.
port: 11211

# a path to a unix socket file to connect to memcached server.
# if unix socket is used, the memcached server must be on the same
# machine as application. if you want to use remote server on another
# machine, set this to null and use 'hostname' and 'port'.
unixsocket: null

# initial connection timeout in milliseconds to memcached server.
connect_timeout: 5000

# timeout in milliseconds for sending/receiving values to/from memcached server.
timeout: 1000

# set the TCP_NODELAY flag, which may help with performance in some cases.
# it is only used if 'hostname' is provided.
no_delay: true

# cause the 'get', 'gets', 'get_many' and 'gets_many'
# calls to treat any errors as cache misses.
ignore_exc: true

# the default value for 'noreply' as passed to store
# commands, except from cas, incr, and decr.
default_noreply: true

# support unicode (utf8) keys.
allow_unicode_keys: true

# controls data encoding. for example: 'ascii' or 'utf8'.
encoding: utf8

# specifies that current user must be also included in cache key generation by default.
# this could be overridden on each decorated method.
consider_user: true

# default expire time for cached items in milliseconds.
# defaults to 5000 ms (5 seconds).
# if you need no expire time, it could be set to 0.
# this could be overridden on each decorated method.
expire: 5000

# maximum size of memory to be used for caching by memcached server.
# defaults to 128 MB.
# if you need no limit, it could be set to 'No Limit'.
# note that setting this value to 'No Limit' will not actually remove
# the limit, but it will use any default limit of memcached server itself.
limit: 128
