# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['documented']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'documented',
    'version': '0.1.1',
    'description': 'Templated docstrings for Python classes.',
    'long_description': '# documented\n\n[![Build Status](https://travis-ci.com/python-platonic/documented.svg?branch=master)](https://travis-ci.com/python-platonic/documented)\n[![Coverage](https://coveralls.io/repos/github/python-platonic/documented/badge.svg?branch=master)](https://coveralls.io/github/python-platonic/documented?branch=master)\n[![Python Version](https://img.shields.io/pypi/pyversions/documented.svg)](https://pypi.org/project/documented/)\n[![wemake-python-styleguide](https://img.shields.io/badge/style-wemake-000000.svg)](https://github.com/wemake-services/wemake-python-styleguide)\n![PyPI - License](https://img.shields.io/pypi/l/documented)\n\nTemplated docstrings for Python classes.\n\n## Features\n\n- Describe your business logic in docstrings of your classes and exceptions;\n- When printing an object or an exception, the library will substitute the placeholders in the docstring text with runtime values,\n- And you (or your user) will see a human readable text.\n\n## Installation\n\n```bash\npip install documented\n```\n\n\n## Example\n\n```python\nfrom dataclasses import dataclass\nfrom documented import DocumentedError\n\n\n@dataclass\nclass InsufficientWizardryLevel(DocumentedError):\n    """\n    ðŸ§™ Your level of wizardry is insufficient â˜¹\n\n        Spell: {self.spell}\n        Minimum level required: {self.required_level}\n        Actual level: {self.actual_level} {self.comment}\n\n    Unseen University will be happy to assist in your training! ðŸŽ“\n    """\n\n    spell: str\n    required_level: int\n    actual_level: int\n\n    @property\n    def comment(self) -> str:\n        if self.actual_level <= 0:\n            return \'(You are Rincewind, right? Hi!)\'\n        else:\n            return \'\'\n\n\nraise InsufficientWizardryLevel(\n    spell=\'Animal transformation\',\n    required_level=8,\n    actual_level=0,\n)\n```\n\nwhich prints:\n\n```\n---------------------------------------------------------------------\nInsufficientWizardryLevel           Traceback (most recent call last)\n<ipython-input-1-d8ccdb953cf6> in <module>\n     27 \n     28 \n---> 29 raise InsufficientWizardryLevel(\n     30     spell=\'Animal transformation\',\n     31     required_level=8,\n\nInsufficientWizardryLevel: \nðŸ§™ Your level of wizardry is insufficient â˜¹\n\n    Spell: Animal transformation\n    Minimum level required: 8\n    Actual level: 0 (You are Rincewind, right? Hi!)\n\nUnseen University will be happy to assist in your training! ðŸŽ“\n```\n\n## Usage\n\n* Template rendering is done using [`str.format()`](https://docs.python.org/3.6/library/string.html#formatspec).\n* That function receives the object instance as `self` keyword argument.\n* From template, you can\'t call methods of the object, but you can access its fields and properties.\n* [`textwrap.dedent()`](https://docs.python.org/3/library/textwrap.html#textwrap.dedent) is applied to the result, thus Python indentation rules do not corrupt the resulting message.\n\nDynamically computed pieces of content may be introduced using:\n \n* [`@property`](https://docs.python.org/3/library/functions.html#property)\n* or, [`@cached_property`](https://docs.python.org/3/library/functools.html#functools.cached_property) for performance.\n\nYou can also access elements of lists and dicts by index, for example: `{self.countries[US]}`.\n\n## Making your exceptions sane\n\n* Create your own exception classes in terms of your domain, to play a part in your business logic.\n* Do not use the word `Exception` or `Error` in their names. Your code should `raise` things like:\n    * `BalanceInsufficient`\n    * `PlanetNotFound`\n    * `TetOffline`\n    * `OrderDeclined`\n\n  And should not:\n\n    * `ValueError`\n    * `Exception`\n    * `CatastrophicalError`\n\n* Store meaningful properties of your errors in fields of the exception classes.\n* Use [`dataclasses`](https://docs.python.org/3/library/dataclasses.html), [`attrs`](https://github.com/python-attrs/attrs) or [`pydantic`](https://github.com/samuelcolvin/pydantic) to save yourself from boilerplate in `__init__()` â€” and to get IDE support.\n* Maintain docstrings of your exceptions to contain up-to-date, human readable descriptions of what they mean.\n* You will be stimulated to do this by [`documented`](https://github.com/python-platonic/documented): when an exception happens, the docstring becomes actually useful.\n\n## Links\n\n* About naming and abstracting things: [Kevlin Henney. Seven Ineffective Coding Habits of Many Programmers](https://www.youtube.com/watch?v=ZsHMHukIlJY)\n* [Python: Better Typed Than You Think](https://beepb00p.xyz/mypy-error-handling.html) summarizes a number of ways to handle errors in Python programs\n* [dry-python/returns](http://github.com/dry-python/returns) proposes to replace exceptions with monadic [`Result` container](https://returns.readthedocs.io/en/latest/pages/result.html), which works great in [Scala](https://www.scala-lang.org/api/2.9.3/scala/Either.html), [Haskell](https://www.schoolofhaskell.com/school/starting-with-haskell/basics-of-haskell/10_Error_Handling#the-either-monad), and [Rust](https://doc.rust-lang.org/stable/rust-by-example/error/result.html), â€” but arguably not everyone would want to adopt this approach in their Python codebase.\n\nWhich actually explains the meaning of this little helper: if we\'re stuck with exceptions in Python, why not at least make them friendlier?\n\nThis project was generated with [`wemake-python-package`](https://github.com/wemake-services/wemake-python-package). Current template version is: [5840464a31423422d7523897d854e92408eee6b8](https://github.com/wemake-services/wemake-python-package/tree/5840464a31423422d7523897d854e92408eee6b8). See what is [updated](https://github.com/wemake-services/wemake-python-package/compare/5840464a31423422d7523897d854e92408eee6b8...master) since then.\n',
    'author': 'Anatoly Scherbakov',
    'author_email': 'altaisoft@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/python-platonic/documented',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
