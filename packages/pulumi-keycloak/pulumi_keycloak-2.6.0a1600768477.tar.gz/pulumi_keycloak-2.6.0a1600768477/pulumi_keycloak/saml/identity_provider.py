# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = ['IdentityProvider']


class IdentityProvider(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_read_token_role_on_create: Optional[pulumi.Input[bool]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 authenticate_by_default: Optional[pulumi.Input[bool]] = None,
                 backchannel_supported: Optional[pulumi.Input[bool]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 first_broker_login_flow_alias: Optional[pulumi.Input[str]] = None,
                 force_authn: Optional[pulumi.Input[bool]] = None,
                 hide_on_login_page: Optional[pulumi.Input[bool]] = None,
                 link_only: Optional[pulumi.Input[bool]] = None,
                 name_id_policy_format: Optional[pulumi.Input[str]] = None,
                 post_binding_authn_request: Optional[pulumi.Input[bool]] = None,
                 post_binding_logout: Optional[pulumi.Input[bool]] = None,
                 post_binding_response: Optional[pulumi.Input[bool]] = None,
                 post_broker_login_flow_alias: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 signature_algorithm: Optional[pulumi.Input[str]] = None,
                 signing_certificate: Optional[pulumi.Input[str]] = None,
                 single_logout_service_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_service_url: Optional[pulumi.Input[str]] = None,
                 store_token: Optional[pulumi.Input[bool]] = None,
                 trust_email: Optional[pulumi.Input[bool]] = None,
                 validate_signature: Optional[pulumi.Input[bool]] = None,
                 want_assertions_encrypted: Optional[pulumi.Input[bool]] = None,
                 want_assertions_signed: Optional[pulumi.Input[bool]] = None,
                 xml_sign_key_info_key_name_transformer: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        ## # saml.IdentityProvider

        Allows to create and manage SAML Identity Providers within Keycloak.

        SAML (Security Assertion Markup Language) identity providers allows to authenticate through a third-party system, using SAML standard.

        ### Example Usage

        ```python
        import pulumi
        import pulumi_keycloak as keycloak

        realm_identity_provider = keycloak.saml.IdentityProvider("realmIdentityProvider",
            alias="my-idp",
            backchannel_supported=True,
            force_authn=True,
            post_binding_authn_request=True,
            post_binding_logout=True,
            post_binding_response=True,
            realm="my-realm",
            single_logout_service_url="https://domain.com/adfs/ls/?wa=wsignout1.0",
            single_sign_on_service_url="https://domain.com/adfs/ls/",
            store_token=False,
            trust_email=True)
        ```

        ### Argument Reference

        The following arguments are supported:

        - `realm` - (Required) The name of the realm. This is unique across Keycloak.
        - `alias` - (Optional) The uniq name of identity provider.
        - `enabled` - (Optional) When false, users and clients will not be able to access this realm. Defaults to `true`.
        - `display_name` - (Optional) The display name for the realm that is shown when logging in to the admin console.
        - `store_token` - (Optional) Enable/disable if tokens must be stored after authenticating users. Defaults to `true`.
        - `add_read_token_role_on_create` - (Optional) Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role. Defaults to `false`.
        - `trust_email` - (Optional) If enabled then email provided by this provider is not verified even if verification is enabled for the realm. Defaults to `false`.
        - `link_only` - (Optional) If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't want to allow login from the provider, but want to integrate with a provider. Defaults to `false`.
        - `hide_on_login_page` - (Optional) If hidden, then login with this provider is possible only if requested explicitly, e.g. using the 'kc_idp_hint' parameter.
        - `first_broker_login_flow_alias` - (Optional) Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account. Defaults to `first broker login`.
        - `post_broker_login_flow_alias` - (Optional) Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it. Defaults to empty.
        - `authenticate_by_default` - (Optional) Authenticate users by default. Defaults to `false`.

        #### SAML Configuration

        - `single_sign_on_service_url` - (Optional) The Url that must be used to send authentication requests (SAML AuthnRequest).
        - `single_logout_service_url` - (Optional) The Url that must be used to send logout requests.
        - `backchannel_supported` - (Optional) Does the external IDP support back-channel logout ?.
        - `name_id_policy_format` - (Optional) Specifies the URI reference corresponding to a name identifier format. Defaults to empty.
        - `post_binding_response` - (Optional) Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used..
        - `post_binding_authn_request` - (Optional) Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
        - `post_binding_logout` - (Optional) Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
        - `want_assertions_signed` - (Optional) Indicates whether this service provider expects a signed Assertion.
        - `want_assertions_encrypted` - (Optional) Indicates whether this service provider expects an encrypted Assertion.
        - `force_authn` - (Optional) Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.
        - `validate_signature` - (Optional) Enable/disable signature validation of SAML responses.
        - `signing_certificate` - (Optional) Signing Certificate.
        - `signature_algorithm` - (Optional) Signing Algorithm. Defaults to empty.
        - `xml_sign_key_info_key_name_transformer` - (Optional) Sign Key Transformer. Defaults to empty.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] add_read_token_role_on_create: Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
        :param pulumi.Input[str] alias: The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
        :param pulumi.Input[bool] authenticate_by_default: Enable/disable authenticate users by default.
        :param pulumi.Input[bool] backchannel_supported: Does the external IDP support backchannel logout?
        :param pulumi.Input[str] display_name: Friendly name for Identity Providers.
        :param pulumi.Input[bool] enabled: Enable/disable this identity provider.
        :param pulumi.Input[str] first_broker_login_flow_alias: Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
               that there is not yet existing Keycloak account linked with the authenticated identity provider account.
        :param pulumi.Input[bool] force_authn: Require Force Authn.
        :param pulumi.Input[bool] hide_on_login_page: Hide On Login Page.
        :param pulumi.Input[bool] link_only: If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
               want to allow login from the provider, but want to integrate with a provider
        :param pulumi.Input[str] name_id_policy_format: Name ID Policy Format.
        :param pulumi.Input[bool] post_binding_authn_request: Post Binding Authn Request.
        :param pulumi.Input[bool] post_binding_logout: Post Binding Logout.
        :param pulumi.Input[bool] post_binding_response: Post Binding Response.
        :param pulumi.Input[str] post_broker_login_flow_alias: Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
               additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
               you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
               authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
        :param pulumi.Input[str] realm: Realm Name
        :param pulumi.Input[str] signature_algorithm: Signing Algorithm.
        :param pulumi.Input[str] signing_certificate: Signing Certificate.
        :param pulumi.Input[str] single_logout_service_url: Logout URL.
        :param pulumi.Input[str] single_sign_on_service_url: SSO Logout URL.
        :param pulumi.Input[bool] store_token: Enable/disable if tokens must be stored after authenticating users.
        :param pulumi.Input[bool] trust_email: If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
        :param pulumi.Input[bool] validate_signature: Enable/disable signature validation of SAML responses.
        :param pulumi.Input[bool] want_assertions_encrypted: Want Assertions Encrypted.
        :param pulumi.Input[bool] want_assertions_signed: Want Assertions Signed.
        :param pulumi.Input[str] xml_sign_key_info_key_name_transformer: Sign Key Transformer.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['add_read_token_role_on_create'] = add_read_token_role_on_create
            if alias is None:
                raise TypeError("Missing required property 'alias'")
            __props__['alias'] = alias
            __props__['authenticate_by_default'] = authenticate_by_default
            __props__['backchannel_supported'] = backchannel_supported
            __props__['display_name'] = display_name
            __props__['enabled'] = enabled
            __props__['first_broker_login_flow_alias'] = first_broker_login_flow_alias
            __props__['force_authn'] = force_authn
            __props__['hide_on_login_page'] = hide_on_login_page
            __props__['link_only'] = link_only
            __props__['name_id_policy_format'] = name_id_policy_format
            __props__['post_binding_authn_request'] = post_binding_authn_request
            __props__['post_binding_logout'] = post_binding_logout
            __props__['post_binding_response'] = post_binding_response
            __props__['post_broker_login_flow_alias'] = post_broker_login_flow_alias
            if realm is None:
                raise TypeError("Missing required property 'realm'")
            __props__['realm'] = realm
            __props__['signature_algorithm'] = signature_algorithm
            __props__['signing_certificate'] = signing_certificate
            __props__['single_logout_service_url'] = single_logout_service_url
            if single_sign_on_service_url is None:
                raise TypeError("Missing required property 'single_sign_on_service_url'")
            __props__['single_sign_on_service_url'] = single_sign_on_service_url
            __props__['store_token'] = store_token
            __props__['trust_email'] = trust_email
            __props__['validate_signature'] = validate_signature
            __props__['want_assertions_encrypted'] = want_assertions_encrypted
            __props__['want_assertions_signed'] = want_assertions_signed
            __props__['xml_sign_key_info_key_name_transformer'] = xml_sign_key_info_key_name_transformer
            __props__['internal_id'] = None
        super(IdentityProvider, __self__).__init__(
            'keycloak:saml/identityProvider:IdentityProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_read_token_role_on_create: Optional[pulumi.Input[bool]] = None,
            alias: Optional[pulumi.Input[str]] = None,
            authenticate_by_default: Optional[pulumi.Input[bool]] = None,
            backchannel_supported: Optional[pulumi.Input[bool]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            first_broker_login_flow_alias: Optional[pulumi.Input[str]] = None,
            force_authn: Optional[pulumi.Input[bool]] = None,
            hide_on_login_page: Optional[pulumi.Input[bool]] = None,
            internal_id: Optional[pulumi.Input[str]] = None,
            link_only: Optional[pulumi.Input[bool]] = None,
            name_id_policy_format: Optional[pulumi.Input[str]] = None,
            post_binding_authn_request: Optional[pulumi.Input[bool]] = None,
            post_binding_logout: Optional[pulumi.Input[bool]] = None,
            post_binding_response: Optional[pulumi.Input[bool]] = None,
            post_broker_login_flow_alias: Optional[pulumi.Input[str]] = None,
            realm: Optional[pulumi.Input[str]] = None,
            signature_algorithm: Optional[pulumi.Input[str]] = None,
            signing_certificate: Optional[pulumi.Input[str]] = None,
            single_logout_service_url: Optional[pulumi.Input[str]] = None,
            single_sign_on_service_url: Optional[pulumi.Input[str]] = None,
            store_token: Optional[pulumi.Input[bool]] = None,
            trust_email: Optional[pulumi.Input[bool]] = None,
            validate_signature: Optional[pulumi.Input[bool]] = None,
            want_assertions_encrypted: Optional[pulumi.Input[bool]] = None,
            want_assertions_signed: Optional[pulumi.Input[bool]] = None,
            xml_sign_key_info_key_name_transformer: Optional[pulumi.Input[str]] = None) -> 'IdentityProvider':
        """
        Get an existing IdentityProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] add_read_token_role_on_create: Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
        :param pulumi.Input[str] alias: The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
        :param pulumi.Input[bool] authenticate_by_default: Enable/disable authenticate users by default.
        :param pulumi.Input[bool] backchannel_supported: Does the external IDP support backchannel logout?
        :param pulumi.Input[str] display_name: Friendly name for Identity Providers.
        :param pulumi.Input[bool] enabled: Enable/disable this identity provider.
        :param pulumi.Input[str] first_broker_login_flow_alias: Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
               that there is not yet existing Keycloak account linked with the authenticated identity provider account.
        :param pulumi.Input[bool] force_authn: Require Force Authn.
        :param pulumi.Input[bool] hide_on_login_page: Hide On Login Page.
        :param pulumi.Input[str] internal_id: Internal Identity Provider Id
        :param pulumi.Input[bool] link_only: If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
               want to allow login from the provider, but want to integrate with a provider
        :param pulumi.Input[str] name_id_policy_format: Name ID Policy Format.
        :param pulumi.Input[bool] post_binding_authn_request: Post Binding Authn Request.
        :param pulumi.Input[bool] post_binding_logout: Post Binding Logout.
        :param pulumi.Input[bool] post_binding_response: Post Binding Response.
        :param pulumi.Input[str] post_broker_login_flow_alias: Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
               additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
               you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
               authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
        :param pulumi.Input[str] realm: Realm Name
        :param pulumi.Input[str] signature_algorithm: Signing Algorithm.
        :param pulumi.Input[str] signing_certificate: Signing Certificate.
        :param pulumi.Input[str] single_logout_service_url: Logout URL.
        :param pulumi.Input[str] single_sign_on_service_url: SSO Logout URL.
        :param pulumi.Input[bool] store_token: Enable/disable if tokens must be stored after authenticating users.
        :param pulumi.Input[bool] trust_email: If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
        :param pulumi.Input[bool] validate_signature: Enable/disable signature validation of SAML responses.
        :param pulumi.Input[bool] want_assertions_encrypted: Want Assertions Encrypted.
        :param pulumi.Input[bool] want_assertions_signed: Want Assertions Signed.
        :param pulumi.Input[str] xml_sign_key_info_key_name_transformer: Sign Key Transformer.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["add_read_token_role_on_create"] = add_read_token_role_on_create
        __props__["alias"] = alias
        __props__["authenticate_by_default"] = authenticate_by_default
        __props__["backchannel_supported"] = backchannel_supported
        __props__["display_name"] = display_name
        __props__["enabled"] = enabled
        __props__["first_broker_login_flow_alias"] = first_broker_login_flow_alias
        __props__["force_authn"] = force_authn
        __props__["hide_on_login_page"] = hide_on_login_page
        __props__["internal_id"] = internal_id
        __props__["link_only"] = link_only
        __props__["name_id_policy_format"] = name_id_policy_format
        __props__["post_binding_authn_request"] = post_binding_authn_request
        __props__["post_binding_logout"] = post_binding_logout
        __props__["post_binding_response"] = post_binding_response
        __props__["post_broker_login_flow_alias"] = post_broker_login_flow_alias
        __props__["realm"] = realm
        __props__["signature_algorithm"] = signature_algorithm
        __props__["signing_certificate"] = signing_certificate
        __props__["single_logout_service_url"] = single_logout_service_url
        __props__["single_sign_on_service_url"] = single_sign_on_service_url
        __props__["store_token"] = store_token
        __props__["trust_email"] = trust_email
        __props__["validate_signature"] = validate_signature
        __props__["want_assertions_encrypted"] = want_assertions_encrypted
        __props__["want_assertions_signed"] = want_assertions_signed
        __props__["xml_sign_key_info_key_name_transformer"] = xml_sign_key_info_key_name_transformer
        return IdentityProvider(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addReadTokenRoleOnCreate")
    def add_read_token_role_on_create(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
        """
        return pulumi.get(self, "add_read_token_role_on_create")

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Output[str]:
        """
        The alias uniquely identifies an identity provider and it is also used to build the redirect uri.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="authenticateByDefault")
    def authenticate_by_default(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable/disable authenticate users by default.
        """
        return pulumi.get(self, "authenticate_by_default")

    @property
    @pulumi.getter(name="backchannelSupported")
    def backchannel_supported(self) -> pulumi.Output[Optional[bool]]:
        """
        Does the external IDP support backchannel logout?
        """
        return pulumi.get(self, "backchannel_supported")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        Friendly name for Identity Providers.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable/disable this identity provider.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="firstBrokerLoginFlowAlias")
    def first_broker_login_flow_alias(self) -> pulumi.Output[Optional[str]]:
        """
        Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means
        that there is not yet existing Keycloak account linked with the authenticated identity provider account.
        """
        return pulumi.get(self, "first_broker_login_flow_alias")

    @property
    @pulumi.getter(name="forceAuthn")
    def force_authn(self) -> pulumi.Output[Optional[bool]]:
        """
        Require Force Authn.
        """
        return pulumi.get(self, "force_authn")

    @property
    @pulumi.getter(name="hideOnLoginPage")
    def hide_on_login_page(self) -> pulumi.Output[Optional[bool]]:
        """
        Hide On Login Page.
        """
        return pulumi.get(self, "hide_on_login_page")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> pulumi.Output[str]:
        """
        Internal Identity Provider Id
        """
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="linkOnly")
    def link_only(self) -> pulumi.Output[Optional[bool]]:
        """
        If true, users cannot log in through this provider. They can only link to this provider. This is useful if you don't
        want to allow login from the provider, but want to integrate with a provider
        """
        return pulumi.get(self, "link_only")

    @property
    @pulumi.getter(name="nameIdPolicyFormat")
    def name_id_policy_format(self) -> pulumi.Output[Optional[str]]:
        """
        Name ID Policy Format.
        """
        return pulumi.get(self, "name_id_policy_format")

    @property
    @pulumi.getter(name="postBindingAuthnRequest")
    def post_binding_authn_request(self) -> pulumi.Output[Optional[bool]]:
        """
        Post Binding Authn Request.
        """
        return pulumi.get(self, "post_binding_authn_request")

    @property
    @pulumi.getter(name="postBindingLogout")
    def post_binding_logout(self) -> pulumi.Output[Optional[bool]]:
        """
        Post Binding Logout.
        """
        return pulumi.get(self, "post_binding_logout")

    @property
    @pulumi.getter(name="postBindingResponse")
    def post_binding_response(self) -> pulumi.Output[Optional[bool]]:
        """
        Post Binding Response.
        """
        return pulumi.get(self, "post_binding_response")

    @property
    @pulumi.getter(name="postBrokerLoginFlowAlias")
    def post_broker_login_flow_alias(self) -> pulumi.Output[Optional[str]]:
        """
        Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want
        additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if
        you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that
        authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
        """
        return pulumi.get(self, "post_broker_login_flow_alias")

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Output[str]:
        """
        Realm Name
        """
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        Signing Algorithm.
        """
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="signingCertificate")
    def signing_certificate(self) -> pulumi.Output[Optional[str]]:
        """
        Signing Certificate.
        """
        return pulumi.get(self, "signing_certificate")

    @property
    @pulumi.getter(name="singleLogoutServiceUrl")
    def single_logout_service_url(self) -> pulumi.Output[Optional[str]]:
        """
        Logout URL.
        """
        return pulumi.get(self, "single_logout_service_url")

    @property
    @pulumi.getter(name="singleSignOnServiceUrl")
    def single_sign_on_service_url(self) -> pulumi.Output[str]:
        """
        SSO Logout URL.
        """
        return pulumi.get(self, "single_sign_on_service_url")

    @property
    @pulumi.getter(name="storeToken")
    def store_token(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable/disable if tokens must be stored after authenticating users.
        """
        return pulumi.get(self, "store_token")

    @property
    @pulumi.getter(name="trustEmail")
    def trust_email(self) -> pulumi.Output[Optional[bool]]:
        """
        If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
        """
        return pulumi.get(self, "trust_email")

    @property
    @pulumi.getter(name="validateSignature")
    def validate_signature(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable/disable signature validation of SAML responses.
        """
        return pulumi.get(self, "validate_signature")

    @property
    @pulumi.getter(name="wantAssertionsEncrypted")
    def want_assertions_encrypted(self) -> pulumi.Output[Optional[bool]]:
        """
        Want Assertions Encrypted.
        """
        return pulumi.get(self, "want_assertions_encrypted")

    @property
    @pulumi.getter(name="wantAssertionsSigned")
    def want_assertions_signed(self) -> pulumi.Output[Optional[bool]]:
        """
        Want Assertions Signed.
        """
        return pulumi.get(self, "want_assertions_signed")

    @property
    @pulumi.getter(name="xmlSignKeyInfoKeyNameTransformer")
    def xml_sign_key_info_key_name_transformer(self) -> pulumi.Output[Optional[str]]:
        """
        Sign Key Transformer.
        """
        return pulumi.get(self, "xml_sign_key_info_key_name_transformer")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

