# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables

__all__ = [
    'RealmInternationalizationArgs',
    'RealmSecurityDefensesArgs',
    'RealmSecurityDefensesBruteForceDetectionArgs',
    'RealmSecurityDefensesHeadersArgs',
    'RealmSmtpServerArgs',
    'RealmSmtpServerAuthArgs',
    'UserFederatedIdentityArgs',
    'UserInitialPasswordArgs',
    'GetRealmInternationalizationArgs',
    'GetRealmSecurityDefenseArgs',
    'GetRealmSecurityDefenseBruteForceDetectionArgs',
    'GetRealmSecurityDefenseHeaderArgs',
    'GetRealmSmtpServerArgs',
    'GetRealmSmtpServerAuthArgs',
]

@pulumi.input_type
class RealmInternationalizationArgs:
    def __init__(__self__, *,
                 default_locale: pulumi.Input[str],
                 supported_locales: pulumi.Input[List[pulumi.Input[str]]]):
        pulumi.set(__self__, "default_locale", default_locale)
        pulumi.set(__self__, "supported_locales", supported_locales)

    @property
    @pulumi.getter(name="defaultLocale")
    def default_locale(self) -> pulumi.Input[str]:
        return pulumi.get(self, "default_locale")

    @default_locale.setter
    def default_locale(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_locale", value)

    @property
    @pulumi.getter(name="supportedLocales")
    def supported_locales(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        return pulumi.get(self, "supported_locales")

    @supported_locales.setter
    def supported_locales(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        pulumi.set(self, "supported_locales", value)


@pulumi.input_type
class RealmSecurityDefensesArgs:
    def __init__(__self__, *,
                 brute_force_detection: Optional[pulumi.Input['RealmSecurityDefensesBruteForceDetectionArgs']] = None,
                 headers: Optional[pulumi.Input['RealmSecurityDefensesHeadersArgs']] = None):
        if brute_force_detection is not None:
            pulumi.set(__self__, "brute_force_detection", brute_force_detection)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter(name="bruteForceDetection")
    def brute_force_detection(self) -> Optional[pulumi.Input['RealmSecurityDefensesBruteForceDetectionArgs']]:
        return pulumi.get(self, "brute_force_detection")

    @brute_force_detection.setter
    def brute_force_detection(self, value: Optional[pulumi.Input['RealmSecurityDefensesBruteForceDetectionArgs']]):
        pulumi.set(self, "brute_force_detection", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input['RealmSecurityDefensesHeadersArgs']]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input['RealmSecurityDefensesHeadersArgs']]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class RealmSecurityDefensesBruteForceDetectionArgs:
    def __init__(__self__, *,
                 failure_reset_time_seconds: Optional[pulumi.Input[float]] = None,
                 max_failure_wait_seconds: Optional[pulumi.Input[float]] = None,
                 max_login_failures: Optional[pulumi.Input[float]] = None,
                 minimum_quick_login_wait_seconds: Optional[pulumi.Input[float]] = None,
                 permanent_lockout: Optional[pulumi.Input[bool]] = None,
                 quick_login_check_milli_seconds: Optional[pulumi.Input[float]] = None,
                 wait_increment_seconds: Optional[pulumi.Input[float]] = None):
        if failure_reset_time_seconds is not None:
            pulumi.set(__self__, "failure_reset_time_seconds", failure_reset_time_seconds)
        if max_failure_wait_seconds is not None:
            pulumi.set(__self__, "max_failure_wait_seconds", max_failure_wait_seconds)
        if max_login_failures is not None:
            pulumi.set(__self__, "max_login_failures", max_login_failures)
        if minimum_quick_login_wait_seconds is not None:
            pulumi.set(__self__, "minimum_quick_login_wait_seconds", minimum_quick_login_wait_seconds)
        if permanent_lockout is not None:
            pulumi.set(__self__, "permanent_lockout", permanent_lockout)
        if quick_login_check_milli_seconds is not None:
            pulumi.set(__self__, "quick_login_check_milli_seconds", quick_login_check_milli_seconds)
        if wait_increment_seconds is not None:
            pulumi.set(__self__, "wait_increment_seconds", wait_increment_seconds)

    @property
    @pulumi.getter(name="failureResetTimeSeconds")
    def failure_reset_time_seconds(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "failure_reset_time_seconds")

    @failure_reset_time_seconds.setter
    def failure_reset_time_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "failure_reset_time_seconds", value)

    @property
    @pulumi.getter(name="maxFailureWaitSeconds")
    def max_failure_wait_seconds(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_failure_wait_seconds")

    @max_failure_wait_seconds.setter
    def max_failure_wait_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_failure_wait_seconds", value)

    @property
    @pulumi.getter(name="maxLoginFailures")
    def max_login_failures(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_login_failures")

    @max_login_failures.setter
    def max_login_failures(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_login_failures", value)

    @property
    @pulumi.getter(name="minimumQuickLoginWaitSeconds")
    def minimum_quick_login_wait_seconds(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "minimum_quick_login_wait_seconds")

    @minimum_quick_login_wait_seconds.setter
    def minimum_quick_login_wait_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum_quick_login_wait_seconds", value)

    @property
    @pulumi.getter(name="permanentLockout")
    def permanent_lockout(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "permanent_lockout")

    @permanent_lockout.setter
    def permanent_lockout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "permanent_lockout", value)

    @property
    @pulumi.getter(name="quickLoginCheckMilliSeconds")
    def quick_login_check_milli_seconds(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "quick_login_check_milli_seconds")

    @quick_login_check_milli_seconds.setter
    def quick_login_check_milli_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "quick_login_check_milli_seconds", value)

    @property
    @pulumi.getter(name="waitIncrementSeconds")
    def wait_increment_seconds(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "wait_increment_seconds")

    @wait_increment_seconds.setter
    def wait_increment_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "wait_increment_seconds", value)


@pulumi.input_type
class RealmSecurityDefensesHeadersArgs:
    def __init__(__self__, *,
                 content_security_policy: Optional[pulumi.Input[str]] = None,
                 content_security_policy_report_only: Optional[pulumi.Input[str]] = None,
                 strict_transport_security: Optional[pulumi.Input[str]] = None,
                 x_content_type_options: Optional[pulumi.Input[str]] = None,
                 x_frame_options: Optional[pulumi.Input[str]] = None,
                 x_robots_tag: Optional[pulumi.Input[str]] = None,
                 x_xss_protection: Optional[pulumi.Input[str]] = None):
        if content_security_policy is not None:
            pulumi.set(__self__, "content_security_policy", content_security_policy)
        if content_security_policy_report_only is not None:
            pulumi.set(__self__, "content_security_policy_report_only", content_security_policy_report_only)
        if strict_transport_security is not None:
            pulumi.set(__self__, "strict_transport_security", strict_transport_security)
        if x_content_type_options is not None:
            pulumi.set(__self__, "x_content_type_options", x_content_type_options)
        if x_frame_options is not None:
            pulumi.set(__self__, "x_frame_options", x_frame_options)
        if x_robots_tag is not None:
            pulumi.set(__self__, "x_robots_tag", x_robots_tag)
        if x_xss_protection is not None:
            pulumi.set(__self__, "x_xss_protection", x_xss_protection)

    @property
    @pulumi.getter(name="contentSecurityPolicy")
    def content_security_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_security_policy")

    @content_security_policy.setter
    def content_security_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_security_policy", value)

    @property
    @pulumi.getter(name="contentSecurityPolicyReportOnly")
    def content_security_policy_report_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_security_policy_report_only")

    @content_security_policy_report_only.setter
    def content_security_policy_report_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_security_policy_report_only", value)

    @property
    @pulumi.getter(name="strictTransportSecurity")
    def strict_transport_security(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strict_transport_security")

    @strict_transport_security.setter
    def strict_transport_security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_transport_security", value)

    @property
    @pulumi.getter(name="xContentTypeOptions")
    def x_content_type_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_content_type_options")

    @x_content_type_options.setter
    def x_content_type_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_content_type_options", value)

    @property
    @pulumi.getter(name="xFrameOptions")
    def x_frame_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_frame_options")

    @x_frame_options.setter
    def x_frame_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_frame_options", value)

    @property
    @pulumi.getter(name="xRobotsTag")
    def x_robots_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_robots_tag")

    @x_robots_tag.setter
    def x_robots_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_robots_tag", value)

    @property
    @pulumi.getter(name="xXssProtection")
    def x_xss_protection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_xss_protection")

    @x_xss_protection.setter
    def x_xss_protection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_xss_protection", value)


@pulumi.input_type
class RealmSmtpServerArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[str],
                 host: pulumi.Input[str],
                 auth: Optional[pulumi.Input['RealmSmtpServerAuthArgs']] = None,
                 envelope_from: Optional[pulumi.Input[str]] = None,
                 from_display_name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 reply_to: Optional[pulumi.Input[str]] = None,
                 reply_to_display_name: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 starttls: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "host", host)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if envelope_from is not None:
            pulumi.set(__self__, "envelope_from", envelope_from)
        if from_display_name is not None:
            pulumi.set(__self__, "from_display_name", from_display_name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if reply_to is not None:
            pulumi.set(__self__, "reply_to", reply_to)
        if reply_to_display_name is not None:
            pulumi.set(__self__, "reply_to_display_name", reply_to_display_name)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if starttls is not None:
            pulumi.set(__self__, "starttls", starttls)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['RealmSmtpServerAuthArgs']]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['RealmSmtpServerAuthArgs']]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="envelopeFrom")
    def envelope_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "envelope_from")

    @envelope_from.setter
    def envelope_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "envelope_from", value)

    @property
    @pulumi.getter(name="fromDisplayName")
    def from_display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_display_name")

    @from_display_name.setter
    def from_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_display_name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replyTo")
    def reply_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reply_to")

    @reply_to.setter
    def reply_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reply_to", value)

    @property
    @pulumi.getter(name="replyToDisplayName")
    def reply_to_display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reply_to_display_name")

    @reply_to_display_name.setter
    def reply_to_display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reply_to_display_name", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def starttls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "starttls")

    @starttls.setter
    def starttls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "starttls", value)


@pulumi.input_type
class RealmSmtpServerAuthArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class UserFederatedIdentityArgs:
    def __init__(__self__, *,
                 identity_provider: pulumi.Input[str],
                 user_id: pulumi.Input[str],
                 user_name: pulumi.Input[str]):
        pulumi.set(__self__, "identity_provider", identity_provider)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identity_provider")

    @identity_provider.setter
    def identity_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity_provider", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class UserInitialPasswordArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 temporary: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "value", value)
        if temporary is not None:
            pulumi.set(__self__, "temporary", temporary)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def temporary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "temporary")

    @temporary.setter
    def temporary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "temporary", value)


@pulumi.input_type
class GetRealmInternationalizationArgs:
    def __init__(__self__, *,
                 default_locale: str,
                 supported_locales: List[str]):
        pulumi.set(__self__, "default_locale", default_locale)
        pulumi.set(__self__, "supported_locales", supported_locales)

    @property
    @pulumi.getter(name="defaultLocale")
    def default_locale(self) -> str:
        return pulumi.get(self, "default_locale")

    @default_locale.setter
    def default_locale(self, value: str):
        pulumi.set(self, "default_locale", value)

    @property
    @pulumi.getter(name="supportedLocales")
    def supported_locales(self) -> List[str]:
        return pulumi.get(self, "supported_locales")

    @supported_locales.setter
    def supported_locales(self, value: List[str]):
        pulumi.set(self, "supported_locales", value)


@pulumi.input_type
class GetRealmSecurityDefenseArgs:
    def __init__(__self__, *,
                 brute_force_detections: List['GetRealmSecurityDefenseBruteForceDetectionArgs'],
                 headers: List['GetRealmSecurityDefenseHeaderArgs']):
        pulumi.set(__self__, "brute_force_detections", brute_force_detections)
        pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter(name="bruteForceDetections")
    def brute_force_detections(self) -> List['GetRealmSecurityDefenseBruteForceDetectionArgs']:
        return pulumi.get(self, "brute_force_detections")

    @brute_force_detections.setter
    def brute_force_detections(self, value: List['GetRealmSecurityDefenseBruteForceDetectionArgs']):
        pulumi.set(self, "brute_force_detections", value)

    @property
    @pulumi.getter
    def headers(self) -> List['GetRealmSecurityDefenseHeaderArgs']:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: List['GetRealmSecurityDefenseHeaderArgs']):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class GetRealmSecurityDefenseBruteForceDetectionArgs:
    def __init__(__self__, *,
                 failure_reset_time_seconds: float,
                 max_failure_wait_seconds: float,
                 max_login_failures: float,
                 minimum_quick_login_wait_seconds: float,
                 permanent_lockout: bool,
                 quick_login_check_milli_seconds: float,
                 wait_increment_seconds: float):
        pulumi.set(__self__, "failure_reset_time_seconds", failure_reset_time_seconds)
        pulumi.set(__self__, "max_failure_wait_seconds", max_failure_wait_seconds)
        pulumi.set(__self__, "max_login_failures", max_login_failures)
        pulumi.set(__self__, "minimum_quick_login_wait_seconds", minimum_quick_login_wait_seconds)
        pulumi.set(__self__, "permanent_lockout", permanent_lockout)
        pulumi.set(__self__, "quick_login_check_milli_seconds", quick_login_check_milli_seconds)
        pulumi.set(__self__, "wait_increment_seconds", wait_increment_seconds)

    @property
    @pulumi.getter(name="failureResetTimeSeconds")
    def failure_reset_time_seconds(self) -> float:
        return pulumi.get(self, "failure_reset_time_seconds")

    @failure_reset_time_seconds.setter
    def failure_reset_time_seconds(self, value: float):
        pulumi.set(self, "failure_reset_time_seconds", value)

    @property
    @pulumi.getter(name="maxFailureWaitSeconds")
    def max_failure_wait_seconds(self) -> float:
        return pulumi.get(self, "max_failure_wait_seconds")

    @max_failure_wait_seconds.setter
    def max_failure_wait_seconds(self, value: float):
        pulumi.set(self, "max_failure_wait_seconds", value)

    @property
    @pulumi.getter(name="maxLoginFailures")
    def max_login_failures(self) -> float:
        return pulumi.get(self, "max_login_failures")

    @max_login_failures.setter
    def max_login_failures(self, value: float):
        pulumi.set(self, "max_login_failures", value)

    @property
    @pulumi.getter(name="minimumQuickLoginWaitSeconds")
    def minimum_quick_login_wait_seconds(self) -> float:
        return pulumi.get(self, "minimum_quick_login_wait_seconds")

    @minimum_quick_login_wait_seconds.setter
    def minimum_quick_login_wait_seconds(self, value: float):
        pulumi.set(self, "minimum_quick_login_wait_seconds", value)

    @property
    @pulumi.getter(name="permanentLockout")
    def permanent_lockout(self) -> bool:
        return pulumi.get(self, "permanent_lockout")

    @permanent_lockout.setter
    def permanent_lockout(self, value: bool):
        pulumi.set(self, "permanent_lockout", value)

    @property
    @pulumi.getter(name="quickLoginCheckMilliSeconds")
    def quick_login_check_milli_seconds(self) -> float:
        return pulumi.get(self, "quick_login_check_milli_seconds")

    @quick_login_check_milli_seconds.setter
    def quick_login_check_milli_seconds(self, value: float):
        pulumi.set(self, "quick_login_check_milli_seconds", value)

    @property
    @pulumi.getter(name="waitIncrementSeconds")
    def wait_increment_seconds(self) -> float:
        return pulumi.get(self, "wait_increment_seconds")

    @wait_increment_seconds.setter
    def wait_increment_seconds(self, value: float):
        pulumi.set(self, "wait_increment_seconds", value)


@pulumi.input_type
class GetRealmSecurityDefenseHeaderArgs:
    def __init__(__self__, *,
                 content_security_policy: str,
                 content_security_policy_report_only: str,
                 strict_transport_security: str,
                 x_content_type_options: str,
                 x_frame_options: str,
                 x_robots_tag: str,
                 x_xss_protection: str):
        pulumi.set(__self__, "content_security_policy", content_security_policy)
        pulumi.set(__self__, "content_security_policy_report_only", content_security_policy_report_only)
        pulumi.set(__self__, "strict_transport_security", strict_transport_security)
        pulumi.set(__self__, "x_content_type_options", x_content_type_options)
        pulumi.set(__self__, "x_frame_options", x_frame_options)
        pulumi.set(__self__, "x_robots_tag", x_robots_tag)
        pulumi.set(__self__, "x_xss_protection", x_xss_protection)

    @property
    @pulumi.getter(name="contentSecurityPolicy")
    def content_security_policy(self) -> str:
        return pulumi.get(self, "content_security_policy")

    @content_security_policy.setter
    def content_security_policy(self, value: str):
        pulumi.set(self, "content_security_policy", value)

    @property
    @pulumi.getter(name="contentSecurityPolicyReportOnly")
    def content_security_policy_report_only(self) -> str:
        return pulumi.get(self, "content_security_policy_report_only")

    @content_security_policy_report_only.setter
    def content_security_policy_report_only(self, value: str):
        pulumi.set(self, "content_security_policy_report_only", value)

    @property
    @pulumi.getter(name="strictTransportSecurity")
    def strict_transport_security(self) -> str:
        return pulumi.get(self, "strict_transport_security")

    @strict_transport_security.setter
    def strict_transport_security(self, value: str):
        pulumi.set(self, "strict_transport_security", value)

    @property
    @pulumi.getter(name="xContentTypeOptions")
    def x_content_type_options(self) -> str:
        return pulumi.get(self, "x_content_type_options")

    @x_content_type_options.setter
    def x_content_type_options(self, value: str):
        pulumi.set(self, "x_content_type_options", value)

    @property
    @pulumi.getter(name="xFrameOptions")
    def x_frame_options(self) -> str:
        return pulumi.get(self, "x_frame_options")

    @x_frame_options.setter
    def x_frame_options(self, value: str):
        pulumi.set(self, "x_frame_options", value)

    @property
    @pulumi.getter(name="xRobotsTag")
    def x_robots_tag(self) -> str:
        return pulumi.get(self, "x_robots_tag")

    @x_robots_tag.setter
    def x_robots_tag(self, value: str):
        pulumi.set(self, "x_robots_tag", value)

    @property
    @pulumi.getter(name="xXssProtection")
    def x_xss_protection(self) -> str:
        return pulumi.get(self, "x_xss_protection")

    @x_xss_protection.setter
    def x_xss_protection(self, value: str):
        pulumi.set(self, "x_xss_protection", value)


@pulumi.input_type
class GetRealmSmtpServerArgs:
    def __init__(__self__, *,
                 auths: List['GetRealmSmtpServerAuthArgs'],
                 envelope_from: str,
                 from_: str,
                 from_display_name: str,
                 host: str,
                 port: str,
                 reply_to: str,
                 reply_to_display_name: str,
                 ssl: bool,
                 starttls: bool):
        pulumi.set(__self__, "auths", auths)
        pulumi.set(__self__, "envelope_from", envelope_from)
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "from_display_name", from_display_name)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "reply_to", reply_to)
        pulumi.set(__self__, "reply_to_display_name", reply_to_display_name)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "starttls", starttls)

    @property
    @pulumi.getter
    def auths(self) -> List['GetRealmSmtpServerAuthArgs']:
        return pulumi.get(self, "auths")

    @auths.setter
    def auths(self, value: List['GetRealmSmtpServerAuthArgs']):
        pulumi.set(self, "auths", value)

    @property
    @pulumi.getter(name="envelopeFrom")
    def envelope_from(self) -> str:
        return pulumi.get(self, "envelope_from")

    @envelope_from.setter
    def envelope_from(self, value: str):
        pulumi.set(self, "envelope_from", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: str):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter(name="fromDisplayName")
    def from_display_name(self) -> str:
        return pulumi.get(self, "from_display_name")

    @from_display_name.setter
    def from_display_name(self, value: str):
        pulumi.set(self, "from_display_name", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: str):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replyTo")
    def reply_to(self) -> str:
        return pulumi.get(self, "reply_to")

    @reply_to.setter
    def reply_to(self, value: str):
        pulumi.set(self, "reply_to", value)

    @property
    @pulumi.getter(name="replyToDisplayName")
    def reply_to_display_name(self) -> str:
        return pulumi.get(self, "reply_to_display_name")

    @reply_to_display_name.setter
    def reply_to_display_name(self, value: str):
        pulumi.set(self, "reply_to_display_name", value)

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: bool):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def starttls(self) -> bool:
        return pulumi.get(self, "starttls")

    @starttls.setter
    def starttls(self, value: bool):
        pulumi.set(self, "starttls", value)


@pulumi.input_type
class GetRealmSmtpServerAuthArgs:
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: str):
        pulumi.set(self, "username", value)


