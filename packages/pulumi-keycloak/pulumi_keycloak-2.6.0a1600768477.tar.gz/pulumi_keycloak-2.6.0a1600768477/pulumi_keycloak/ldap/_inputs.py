# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from .. import _utilities, _tables

__all__ = [
    'UserFederationKerberosArgs',
]

@pulumi.input_type
class UserFederationKerberosArgs:
    def __init__(__self__, *,
                 kerberos_realm: pulumi.Input[str],
                 key_tab: pulumi.Input[str],
                 server_principal: pulumi.Input[str],
                 use_kerberos_for_password_authentication: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "kerberos_realm", kerberos_realm)
        pulumi.set(__self__, "key_tab", key_tab)
        pulumi.set(__self__, "server_principal", server_principal)
        if use_kerberos_for_password_authentication is not None:
            pulumi.set(__self__, "use_kerberos_for_password_authentication", use_kerberos_for_password_authentication)

    @property
    @pulumi.getter(name="kerberosRealm")
    def kerberos_realm(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kerberos_realm")

    @kerberos_realm.setter
    def kerberos_realm(self, value: pulumi.Input[str]):
        pulumi.set(self, "kerberos_realm", value)

    @property
    @pulumi.getter(name="keyTab")
    def key_tab(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key_tab")

    @key_tab.setter
    def key_tab(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_tab", value)

    @property
    @pulumi.getter(name="serverPrincipal")
    def server_principal(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_principal")

    @server_principal.setter
    def server_principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_principal", value)

    @property
    @pulumi.getter(name="useKerberosForPasswordAuthentication")
    def use_kerberos_for_password_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_kerberos_for_password_authentication")

    @use_kerberos_for_password_authentication.setter
    def use_kerberos_for_password_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_kerberos_for_password_authentication", value)


