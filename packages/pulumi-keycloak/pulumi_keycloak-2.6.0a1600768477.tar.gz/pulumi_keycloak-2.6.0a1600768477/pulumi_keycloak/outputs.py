# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from . import _utilities, _tables
from . import outputs

__all__ = [
    'RealmInternationalization',
    'RealmSecurityDefenses',
    'RealmSecurityDefensesBruteForceDetection',
    'RealmSecurityDefensesHeaders',
    'RealmSmtpServer',
    'RealmSmtpServerAuth',
    'UserFederatedIdentity',
    'UserInitialPassword',
    'GetRealmInternationalizationResult',
    'GetRealmKeysKeyResult',
    'GetRealmSecurityDefenseResult',
    'GetRealmSecurityDefenseBruteForceDetectionResult',
    'GetRealmSecurityDefenseHeaderResult',
    'GetRealmSmtpServerResult',
    'GetRealmSmtpServerAuthResult',
]

@pulumi.output_type
class RealmInternationalization(dict):
    def __init__(__self__, *,
                 default_locale: str,
                 supported_locales: List[str]):
        pulumi.set(__self__, "default_locale", default_locale)
        pulumi.set(__self__, "supported_locales", supported_locales)

    @property
    @pulumi.getter(name="defaultLocale")
    def default_locale(self) -> str:
        return pulumi.get(self, "default_locale")

    @property
    @pulumi.getter(name="supportedLocales")
    def supported_locales(self) -> List[str]:
        return pulumi.get(self, "supported_locales")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RealmSecurityDefenses(dict):
    def __init__(__self__, *,
                 brute_force_detection: Optional['outputs.RealmSecurityDefensesBruteForceDetection'] = None,
                 headers: Optional['outputs.RealmSecurityDefensesHeaders'] = None):
        if brute_force_detection is not None:
            pulumi.set(__self__, "brute_force_detection", brute_force_detection)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter(name="bruteForceDetection")
    def brute_force_detection(self) -> Optional['outputs.RealmSecurityDefensesBruteForceDetection']:
        return pulumi.get(self, "brute_force_detection")

    @property
    @pulumi.getter
    def headers(self) -> Optional['outputs.RealmSecurityDefensesHeaders']:
        return pulumi.get(self, "headers")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RealmSecurityDefensesBruteForceDetection(dict):
    def __init__(__self__, *,
                 failure_reset_time_seconds: Optional[float] = None,
                 max_failure_wait_seconds: Optional[float] = None,
                 max_login_failures: Optional[float] = None,
                 minimum_quick_login_wait_seconds: Optional[float] = None,
                 permanent_lockout: Optional[bool] = None,
                 quick_login_check_milli_seconds: Optional[float] = None,
                 wait_increment_seconds: Optional[float] = None):
        if failure_reset_time_seconds is not None:
            pulumi.set(__self__, "failure_reset_time_seconds", failure_reset_time_seconds)
        if max_failure_wait_seconds is not None:
            pulumi.set(__self__, "max_failure_wait_seconds", max_failure_wait_seconds)
        if max_login_failures is not None:
            pulumi.set(__self__, "max_login_failures", max_login_failures)
        if minimum_quick_login_wait_seconds is not None:
            pulumi.set(__self__, "minimum_quick_login_wait_seconds", minimum_quick_login_wait_seconds)
        if permanent_lockout is not None:
            pulumi.set(__self__, "permanent_lockout", permanent_lockout)
        if quick_login_check_milli_seconds is not None:
            pulumi.set(__self__, "quick_login_check_milli_seconds", quick_login_check_milli_seconds)
        if wait_increment_seconds is not None:
            pulumi.set(__self__, "wait_increment_seconds", wait_increment_seconds)

    @property
    @pulumi.getter(name="failureResetTimeSeconds")
    def failure_reset_time_seconds(self) -> Optional[float]:
        return pulumi.get(self, "failure_reset_time_seconds")

    @property
    @pulumi.getter(name="maxFailureWaitSeconds")
    def max_failure_wait_seconds(self) -> Optional[float]:
        return pulumi.get(self, "max_failure_wait_seconds")

    @property
    @pulumi.getter(name="maxLoginFailures")
    def max_login_failures(self) -> Optional[float]:
        return pulumi.get(self, "max_login_failures")

    @property
    @pulumi.getter(name="minimumQuickLoginWaitSeconds")
    def minimum_quick_login_wait_seconds(self) -> Optional[float]:
        return pulumi.get(self, "minimum_quick_login_wait_seconds")

    @property
    @pulumi.getter(name="permanentLockout")
    def permanent_lockout(self) -> Optional[bool]:
        return pulumi.get(self, "permanent_lockout")

    @property
    @pulumi.getter(name="quickLoginCheckMilliSeconds")
    def quick_login_check_milli_seconds(self) -> Optional[float]:
        return pulumi.get(self, "quick_login_check_milli_seconds")

    @property
    @pulumi.getter(name="waitIncrementSeconds")
    def wait_increment_seconds(self) -> Optional[float]:
        return pulumi.get(self, "wait_increment_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RealmSecurityDefensesHeaders(dict):
    def __init__(__self__, *,
                 content_security_policy: Optional[str] = None,
                 content_security_policy_report_only: Optional[str] = None,
                 strict_transport_security: Optional[str] = None,
                 x_content_type_options: Optional[str] = None,
                 x_frame_options: Optional[str] = None,
                 x_robots_tag: Optional[str] = None,
                 x_xss_protection: Optional[str] = None):
        if content_security_policy is not None:
            pulumi.set(__self__, "content_security_policy", content_security_policy)
        if content_security_policy_report_only is not None:
            pulumi.set(__self__, "content_security_policy_report_only", content_security_policy_report_only)
        if strict_transport_security is not None:
            pulumi.set(__self__, "strict_transport_security", strict_transport_security)
        if x_content_type_options is not None:
            pulumi.set(__self__, "x_content_type_options", x_content_type_options)
        if x_frame_options is not None:
            pulumi.set(__self__, "x_frame_options", x_frame_options)
        if x_robots_tag is not None:
            pulumi.set(__self__, "x_robots_tag", x_robots_tag)
        if x_xss_protection is not None:
            pulumi.set(__self__, "x_xss_protection", x_xss_protection)

    @property
    @pulumi.getter(name="contentSecurityPolicy")
    def content_security_policy(self) -> Optional[str]:
        return pulumi.get(self, "content_security_policy")

    @property
    @pulumi.getter(name="contentSecurityPolicyReportOnly")
    def content_security_policy_report_only(self) -> Optional[str]:
        return pulumi.get(self, "content_security_policy_report_only")

    @property
    @pulumi.getter(name="strictTransportSecurity")
    def strict_transport_security(self) -> Optional[str]:
        return pulumi.get(self, "strict_transport_security")

    @property
    @pulumi.getter(name="xContentTypeOptions")
    def x_content_type_options(self) -> Optional[str]:
        return pulumi.get(self, "x_content_type_options")

    @property
    @pulumi.getter(name="xFrameOptions")
    def x_frame_options(self) -> Optional[str]:
        return pulumi.get(self, "x_frame_options")

    @property
    @pulumi.getter(name="xRobotsTag")
    def x_robots_tag(self) -> Optional[str]:
        return pulumi.get(self, "x_robots_tag")

    @property
    @pulumi.getter(name="xXssProtection")
    def x_xss_protection(self) -> Optional[str]:
        return pulumi.get(self, "x_xss_protection")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RealmSmtpServer(dict):
    def __init__(__self__, *,
                 from_: str,
                 host: str,
                 auth: Optional['outputs.RealmSmtpServerAuth'] = None,
                 envelope_from: Optional[str] = None,
                 from_display_name: Optional[str] = None,
                 port: Optional[str] = None,
                 reply_to: Optional[str] = None,
                 reply_to_display_name: Optional[str] = None,
                 ssl: Optional[bool] = None,
                 starttls: Optional[bool] = None):
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "host", host)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if envelope_from is not None:
            pulumi.set(__self__, "envelope_from", envelope_from)
        if from_display_name is not None:
            pulumi.set(__self__, "from_display_name", from_display_name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if reply_to is not None:
            pulumi.set(__self__, "reply_to", reply_to)
        if reply_to_display_name is not None:
            pulumi.set(__self__, "reply_to_display_name", reply_to_display_name)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if starttls is not None:
            pulumi.set(__self__, "starttls", starttls)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def auth(self) -> Optional['outputs.RealmSmtpServerAuth']:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter(name="envelopeFrom")
    def envelope_from(self) -> Optional[str]:
        return pulumi.get(self, "envelope_from")

    @property
    @pulumi.getter(name="fromDisplayName")
    def from_display_name(self) -> Optional[str]:
        return pulumi.get(self, "from_display_name")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replyTo")
    def reply_to(self) -> Optional[str]:
        return pulumi.get(self, "reply_to")

    @property
    @pulumi.getter(name="replyToDisplayName")
    def reply_to_display_name(self) -> Optional[str]:
        return pulumi.get(self, "reply_to_display_name")

    @property
    @pulumi.getter
    def ssl(self) -> Optional[bool]:
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter
    def starttls(self) -> Optional[bool]:
        return pulumi.get(self, "starttls")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RealmSmtpServerAuth(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserFederatedIdentity(dict):
    def __init__(__self__, *,
                 identity_provider: str,
                 user_id: str,
                 user_name: str):
        pulumi.set(__self__, "identity_provider", identity_provider)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> str:
        return pulumi.get(self, "identity_provider")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class UserInitialPassword(dict):
    def __init__(__self__, *,
                 value: str,
                 temporary: Optional[bool] = None):
        pulumi.set(__self__, "value", value)
        if temporary is not None:
            pulumi.set(__self__, "temporary", temporary)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def temporary(self) -> Optional[bool]:
        return pulumi.get(self, "temporary")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetRealmInternationalizationResult(dict):
    def __init__(__self__, *,
                 default_locale: str,
                 supported_locales: List[str]):
        pulumi.set(__self__, "default_locale", default_locale)
        pulumi.set(__self__, "supported_locales", supported_locales)

    @property
    @pulumi.getter(name="defaultLocale")
    def default_locale(self) -> str:
        return pulumi.get(self, "default_locale")

    @property
    @pulumi.getter(name="supportedLocales")
    def supported_locales(self) -> List[str]:
        return pulumi.get(self, "supported_locales")


@pulumi.output_type
class GetRealmKeysKeyResult(dict):
    def __init__(__self__, *,
                 algorithm: str,
                 certificate: str,
                 kid: str,
                 provider_id: str,
                 provider_priority: float,
                 public_key: str,
                 status: str,
                 type: str):
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "kid", kid)
        pulumi.set(__self__, "provider_id", provider_id)
        pulumi.set(__self__, "provider_priority", provider_priority)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def certificate(self) -> str:
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def kid(self) -> str:
        return pulumi.get(self, "kid")

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> str:
        return pulumi.get(self, "provider_id")

    @property
    @pulumi.getter(name="providerPriority")
    def provider_priority(self) -> float:
        return pulumi.get(self, "provider_priority")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> str:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRealmSecurityDefenseResult(dict):
    def __init__(__self__, *,
                 brute_force_detections: List['outputs.GetRealmSecurityDefenseBruteForceDetectionResult'],
                 headers: List['outputs.GetRealmSecurityDefenseHeaderResult']):
        pulumi.set(__self__, "brute_force_detections", brute_force_detections)
        pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter(name="bruteForceDetections")
    def brute_force_detections(self) -> List['outputs.GetRealmSecurityDefenseBruteForceDetectionResult']:
        return pulumi.get(self, "brute_force_detections")

    @property
    @pulumi.getter
    def headers(self) -> List['outputs.GetRealmSecurityDefenseHeaderResult']:
        return pulumi.get(self, "headers")


@pulumi.output_type
class GetRealmSecurityDefenseBruteForceDetectionResult(dict):
    def __init__(__self__, *,
                 failure_reset_time_seconds: float,
                 max_failure_wait_seconds: float,
                 max_login_failures: float,
                 minimum_quick_login_wait_seconds: float,
                 permanent_lockout: bool,
                 quick_login_check_milli_seconds: float,
                 wait_increment_seconds: float):
        pulumi.set(__self__, "failure_reset_time_seconds", failure_reset_time_seconds)
        pulumi.set(__self__, "max_failure_wait_seconds", max_failure_wait_seconds)
        pulumi.set(__self__, "max_login_failures", max_login_failures)
        pulumi.set(__self__, "minimum_quick_login_wait_seconds", minimum_quick_login_wait_seconds)
        pulumi.set(__self__, "permanent_lockout", permanent_lockout)
        pulumi.set(__self__, "quick_login_check_milli_seconds", quick_login_check_milli_seconds)
        pulumi.set(__self__, "wait_increment_seconds", wait_increment_seconds)

    @property
    @pulumi.getter(name="failureResetTimeSeconds")
    def failure_reset_time_seconds(self) -> float:
        return pulumi.get(self, "failure_reset_time_seconds")

    @property
    @pulumi.getter(name="maxFailureWaitSeconds")
    def max_failure_wait_seconds(self) -> float:
        return pulumi.get(self, "max_failure_wait_seconds")

    @property
    @pulumi.getter(name="maxLoginFailures")
    def max_login_failures(self) -> float:
        return pulumi.get(self, "max_login_failures")

    @property
    @pulumi.getter(name="minimumQuickLoginWaitSeconds")
    def minimum_quick_login_wait_seconds(self) -> float:
        return pulumi.get(self, "minimum_quick_login_wait_seconds")

    @property
    @pulumi.getter(name="permanentLockout")
    def permanent_lockout(self) -> bool:
        return pulumi.get(self, "permanent_lockout")

    @property
    @pulumi.getter(name="quickLoginCheckMilliSeconds")
    def quick_login_check_milli_seconds(self) -> float:
        return pulumi.get(self, "quick_login_check_milli_seconds")

    @property
    @pulumi.getter(name="waitIncrementSeconds")
    def wait_increment_seconds(self) -> float:
        return pulumi.get(self, "wait_increment_seconds")


@pulumi.output_type
class GetRealmSecurityDefenseHeaderResult(dict):
    def __init__(__self__, *,
                 content_security_policy: str,
                 content_security_policy_report_only: str,
                 strict_transport_security: str,
                 x_content_type_options: str,
                 x_frame_options: str,
                 x_robots_tag: str,
                 x_xss_protection: str):
        pulumi.set(__self__, "content_security_policy", content_security_policy)
        pulumi.set(__self__, "content_security_policy_report_only", content_security_policy_report_only)
        pulumi.set(__self__, "strict_transport_security", strict_transport_security)
        pulumi.set(__self__, "x_content_type_options", x_content_type_options)
        pulumi.set(__self__, "x_frame_options", x_frame_options)
        pulumi.set(__self__, "x_robots_tag", x_robots_tag)
        pulumi.set(__self__, "x_xss_protection", x_xss_protection)

    @property
    @pulumi.getter(name="contentSecurityPolicy")
    def content_security_policy(self) -> str:
        return pulumi.get(self, "content_security_policy")

    @property
    @pulumi.getter(name="contentSecurityPolicyReportOnly")
    def content_security_policy_report_only(self) -> str:
        return pulumi.get(self, "content_security_policy_report_only")

    @property
    @pulumi.getter(name="strictTransportSecurity")
    def strict_transport_security(self) -> str:
        return pulumi.get(self, "strict_transport_security")

    @property
    @pulumi.getter(name="xContentTypeOptions")
    def x_content_type_options(self) -> str:
        return pulumi.get(self, "x_content_type_options")

    @property
    @pulumi.getter(name="xFrameOptions")
    def x_frame_options(self) -> str:
        return pulumi.get(self, "x_frame_options")

    @property
    @pulumi.getter(name="xRobotsTag")
    def x_robots_tag(self) -> str:
        return pulumi.get(self, "x_robots_tag")

    @property
    @pulumi.getter(name="xXssProtection")
    def x_xss_protection(self) -> str:
        return pulumi.get(self, "x_xss_protection")


@pulumi.output_type
class GetRealmSmtpServerResult(dict):
    def __init__(__self__, *,
                 auths: List['outputs.GetRealmSmtpServerAuthResult'],
                 envelope_from: str,
                 from_: str,
                 from_display_name: str,
                 host: str,
                 port: str,
                 reply_to: str,
                 reply_to_display_name: str,
                 ssl: bool,
                 starttls: bool):
        pulumi.set(__self__, "auths", auths)
        pulumi.set(__self__, "envelope_from", envelope_from)
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "from_display_name", from_display_name)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "reply_to", reply_to)
        pulumi.set(__self__, "reply_to_display_name", reply_to_display_name)
        pulumi.set(__self__, "ssl", ssl)
        pulumi.set(__self__, "starttls", starttls)

    @property
    @pulumi.getter
    def auths(self) -> List['outputs.GetRealmSmtpServerAuthResult']:
        return pulumi.get(self, "auths")

    @property
    @pulumi.getter(name="envelopeFrom")
    def envelope_from(self) -> str:
        return pulumi.get(self, "envelope_from")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter(name="fromDisplayName")
    def from_display_name(self) -> str:
        return pulumi.get(self, "from_display_name")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replyTo")
    def reply_to(self) -> str:
        return pulumi.get(self, "reply_to")

    @property
    @pulumi.getter(name="replyToDisplayName")
    def reply_to_display_name(self) -> str:
        return pulumi.get(self, "reply_to_display_name")

    @property
    @pulumi.getter
    def ssl(self) -> bool:
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter
    def starttls(self) -> bool:
        return pulumi.get(self, "starttls")


@pulumi.output_type
class GetRealmSmtpServerAuthResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


