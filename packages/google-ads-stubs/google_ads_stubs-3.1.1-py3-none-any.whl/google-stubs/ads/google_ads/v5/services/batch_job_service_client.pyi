from google.ads.google_ads.v5.proto.resources import batch_job_pb2 as batch_job_pb2
from google.ads.google_ads.v5.proto.services import batch_job_service_pb2 as batch_job_service_pb2
from google.ads.google_ads.v5.services import batch_job_service_client_config as batch_job_service_client_config
from google.ads.google_ads.v5.services.transports import batch_job_service_grpc_transport as batch_job_service_grpc_transport
from google.oauth2 import service_account as service_account
from google.protobuf import empty_pb2 as empty_pb2
import grpc  # type: ignore
from google.ads.google_ads.v5.services.transports.batch_job_service_grpc_transport import BatchJobServiceGrpcTransport
from google.auth.credentials import Credentials  # type: ignore
from google.api_core.gapic_v1.client_info import ClientInfo  # type: ignore
from google.api_core.retry import Retry  # type: ignore
from typing import Optional, Dict, Any, List, Sequence, Tuple, Union, Callable, ClassVar
from google.ads.google_ads.v5.proto.resources.batch_job_pb2 import BatchJob
from google.ads.google_ads.v5.proto.services.batch_job_service_pb2 import BatchJobOperation, MutateBatchJobResponse

class BatchJobServiceClient:
    SERVICE_ADDRESS: ClassVar[str] = ...
    @classmethod
    def from_service_account_file(cls, filename: str, *args: Any, **kwargs: Any) -> BatchJobServiceClient: ...
    @classmethod
    def from_service_account_json(cls, filename: str, *args: Any, **kwargs: Any) -> BatchJobServiceClient: ...
    @classmethod
    def batch_job_path(cls, customer: Any, batch_job: Any) -> str: ...
    transport: Union[BatchJobServiceGrpcTransport, Callable[[Credentials, type], BatchJobServiceGrpcTransport]] = ...
    def __init__(self, transport: Optional[Any] = ..., channel: Optional[Any] = ..., credentials: Optional[Any] = ..., client_config: Optional[Any] = ..., client_info: Optional[Any] = ..., client_options: Optional[Any] = ...) -> None: ...
    def mutate_batch_job(self, customer_id: str, operation_: Union[Dict[str, Any], BatchJobOperation], retry: Optional[Retry] = ..., timeout: Optional[float] = ..., metadata: Optional[Sequence[Tuple[str, str]]] = ...) -> MutateBatchJobResponse: ...
    def get_batch_job(self, resource_name: str, retry: Optional[Retry] = ..., timeout: Optional[float] = ..., metadata: Optional[Sequence[Tuple[str, str]]] = ...) -> BatchJob: ...
    def list_batch_job_results(self, resource_name: Any, page_size: Optional[Any] = ..., retry: Any = ..., timeout: Any = ..., metadata: Optional[Any] = ...): ...
    def run_batch_job(self, resource_name: Any, retry: Any = ..., timeout: Any = ..., metadata: Optional[Any] = ...): ...
    def add_batch_job_operations(self, resource_name: Any, sequence_token: Any, mutate_operations: Any, retry: Any = ..., timeout: Any = ..., metadata: Optional[Any] = ...): ...
