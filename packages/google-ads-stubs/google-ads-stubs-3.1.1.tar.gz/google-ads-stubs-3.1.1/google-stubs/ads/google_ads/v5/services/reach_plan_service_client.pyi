from google.ads.google_ads.v5.proto.services import reach_plan_service_pb2 as reach_plan_service_pb2
from google.ads.google_ads.v5.services import reach_plan_service_client_config as reach_plan_service_client_config
from google.ads.google_ads.v5.services.transports import reach_plan_service_grpc_transport as reach_plan_service_grpc_transport
from google.oauth2 import service_account as service_account
import grpc  # type: ignore
from google.ads.google_ads.v5.services.transports.reach_plan_service_grpc_transport import ReachPlanServiceGrpcTransport
from google.auth.credentials import Credentials  # type: ignore
from google.api_core.gapic_v1.client_info import ClientInfo  # type: ignore
from google.api_core.retry import Retry  # type: ignore
from typing import Optional, Dict, Any, List, Sequence, Tuple, Union, Callable, ClassVar

class ReachPlanServiceClient:
    SERVICE_ADDRESS: ClassVar[str] = ...
    @classmethod
    def from_service_account_file(cls, filename: str, *args: Any, **kwargs: Any) -> ReachPlanServiceClient: ...
    @classmethod
    def from_service_account_json(cls, filename: str, *args: Any, **kwargs: Any) -> ReachPlanServiceClient: ...
    transport: Union[ReachPlanServiceGrpcTransport, Callable[[Credentials, type], ReachPlanServiceGrpcTransport]] = ...
    def __init__(self, transport: Optional[Any] = ..., channel: Optional[Any] = ..., credentials: Optional[Any] = ..., client_config: Optional[Any] = ..., client_info: Optional[Any] = ..., client_options: Optional[Any] = ...) -> None: ...
    def list_plannable_locations(self, retry: Any = ..., timeout: Any = ..., metadata: Optional[Any] = ...): ...
    def list_plannable_products(self, plannable_location_id: Any, retry: Any = ..., timeout: Any = ..., metadata: Optional[Any] = ...): ...
    def generate_product_mix_ideas(self, customer_id: Any, plannable_location_id: Any, currency_code: Any, budget_micros: Any, preferences: Optional[Any] = ..., retry: Any = ..., timeout: Any = ..., metadata: Optional[Any] = ...): ...
    def generate_reach_forecast(self, customer_id: Any, campaign_duration: Any, planned_products: Any, currency_code: Optional[Any] = ..., cookie_frequency_cap: Optional[Any] = ..., cookie_frequency_cap_setting: Optional[Any] = ..., min_effective_frequency: Optional[Any] = ..., targeting: Optional[Any] = ..., retry: Any = ..., timeout: Any = ..., metadata: Optional[Any] = ...): ...
