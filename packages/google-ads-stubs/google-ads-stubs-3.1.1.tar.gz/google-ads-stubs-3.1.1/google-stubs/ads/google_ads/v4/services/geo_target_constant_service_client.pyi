from google.ads.google_ads.v4.proto.services import geo_target_constant_service_pb2 as geo_target_constant_service_pb2
from google.ads.google_ads.v4.services import geo_target_constant_service_client_config as geo_target_constant_service_client_config
from google.ads.google_ads.v4.services.transports import geo_target_constant_service_grpc_transport as geo_target_constant_service_grpc_transport
from google.oauth2 import service_account as service_account
import grpc  # type: ignore
from google.ads.google_ads.v4.services.transports.geo_target_constant_service_grpc_transport import GeoTargetConstantServiceGrpcTransport
from google.auth.credentials import Credentials  # type: ignore
from google.api_core.gapic_v1.client_info import ClientInfo  # type: ignore
from google.api_core.retry import Retry  # type: ignore
from typing import Optional, Dict, Any, List, Sequence, Tuple, Union, Callable, ClassVar
from google.ads.google_ads.v4.proto.resources.geo_target_constant_pb2 import GeoTargetConstant

class GeoTargetConstantServiceClient:
    SERVICE_ADDRESS: ClassVar[str] = ...
    @classmethod
    def from_service_account_file(cls, filename: str, *args: Any, **kwargs: Any) -> GeoTargetConstantServiceClient: ...
    @classmethod
    def from_service_account_json(cls, filename: str, *args: Any, **kwargs: Any) -> GeoTargetConstantServiceClient: ...
    @classmethod
    def geo_target_constant_path(cls, geo_target_constant: Any): ...
    transport: Union[GeoTargetConstantServiceGrpcTransport, Callable[[Credentials, type], GeoTargetConstantServiceGrpcTransport]] = ...
    def __init__(self, transport: Optional[Union[GeoTargetConstantServiceGrpcTransport, Callable[[Credentials, type], GeoTargetConstantServiceGrpcTransport]]] = ..., channel: Optional[grpc.Channel] = ..., credentials: Optional[Credentials] = ..., client_config: Optional[Dict[str, Any]] = ..., client_info: Optional[ClientInfo] = ...) -> None: ...
    def get_geo_target_constant(self, resource_name: str, retry: Optional[Retry] = ..., timeout: Optional[float] = ..., metadata: Optional[Sequence[Tuple[str, str]]] = ...) -> GeoTargetConstant: ...
    def suggest_geo_target_constants(self, locale: Any, country_code: Any, location_names: Optional[Any] = ..., geo_targets: Optional[Any] = ..., retry: Any = ..., timeout: Any = ..., metadata: Optional[Any] = ...): ...
