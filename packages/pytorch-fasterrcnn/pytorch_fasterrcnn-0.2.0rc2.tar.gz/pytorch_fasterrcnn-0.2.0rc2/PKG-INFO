Metadata-Version: 2.1
Name: pytorch_fasterrcnn
Version: 0.2.0rc2
Summary: Torchvision Faster RCNN Fine Tuner
Home-page: https://github.com/oke-aditya/pytorch_fasterrcnn/tree/master/
Author: Aditya Oke
Author-email: okeaditya315@gmail.com
License: Apache Software License 2.0
Description: # Pytorch Faster RCNN
        
        ![CI Tests](https://github.com/oke-aditya/pytorch_fasterrcnn/workflows/CI%20Tests/badge.svg)
        ![Check Formatting](https://github.com/oke-aditya/pytorch_fasterrcnn/workflows/Check%20Formatting/badge.svg)
        ![Build mkdocs](https://github.com/oke-aditya/pytorch_fasterrcnn/workflows/Build%20mkdocs/badge.svg)
        ![Deploy mkdocs](https://github.com/oke-aditya/pytorch_fasterrcnn/workflows/Deploy%20mkdocs/badge.svg)
        ![PyPi Release](https://github.com/oke-aditya/pytorch_fasterrcnn/workflows/PyPi%20Release/badge.svg)
        ![Install Package](https://github.com/oke-aditya/pytorch_fasterrcnn/workflows/Install%20Package/badge.svg)
        
        Faster RCNN Fine-Tune Implementation in Pytorch.
        
        ## How to use ?
        1. git clone the repo
        ```
        git clone https://github.com/oke-aditya/pytorch_fasterrcnn.git
        ```
        2. Install PyTorch and torchvision for your system.
        
        Simply edit the config file to set your hyper parameters.
        
        3. Keep the training and validation csv file as follows
        
        NOTE
        
        Do not use target as 0 class. It is reserved as background.
        
        
        ```
        image_id xtl ytl xbr ybr      target
        1        xmin ymin xmax ymax   1
        1        xmin ymin xmax ymax   2
        2		 xmin ymin xmax ymax   3
        ```
        
        4. Simply edit the config file to set your hyper parameters
        
        5. Run the train.py file
        
        # Features: -
        
        - It works for multiple class object detection.
        
        ## Backbones Supported: -
        
        
        - Note that backbones are pretrained on imagenet. 
        
        - Following backbones are supported
        
        1. vgg11, vgg13, vgg16, vgg19
        2. resnet18, resnet34, resnet50, resnet101, resnet152
        3. renext101
        4. mobilenet_v2
        
        
        Sample Outputs
        
        # Helmet Detector
        ![Helmet Detection](outputs/helmet.jpg)
        
        # Mask Detector
        ![Mask Detection](outputs/mask.jpg)
        
        
        
        If you like the implemenation or have taken an inspiration do give a star :-)
        
        
        
        
        
        
Keywords: Python
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.6
Description-Content-Type: text/markdown
