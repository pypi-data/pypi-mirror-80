{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Thermal Reactivation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import PFAS_SAT as ps\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import Image\n",
    "import pandas as pd\n",
    "pd.set_option('display.max_colwidth', 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model document\n",
    "The thermal reactivation of GAC uses the same thermal treatment model, except it calculates the PFAS remaining in the reactivated GAC instead of an ash residual stream.\n",
    "\n",
    "<img src=\"../Images/ProcessModels/ThemalTreatment.png\" alt=\"Drawing\" style=\"width: 500px;\"/>\n",
    "\n",
    "### Assumptions and Limitations\n",
    "1.\tThe model assumes a single DRE and fraction remaining on the residual for each material and type of PFAS. Data is relatively limited, but this can be readily updated as more data becomes available. \n",
    "2.\tThe model does not consider transformations of PFAS. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Input Parameters for Thermal Reactivation model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Category</th>\n",
       "      <th>Dictonary_Name</th>\n",
       "      <th>Parameter Name</th>\n",
       "      <th>Parameter Description</th>\n",
       "      <th>amount</th>\n",
       "      <th>unit</th>\n",
       "      <th>Reference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Total destruction and removal efficiency</td>\n",
       "      <td>DRE</td>\n",
       "      <td>PFOA</td>\n",
       "      <td>DRE of PFOA</td>\n",
       "      <td>0.97</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Total destruction and removal efficiency</td>\n",
       "      <td>DRE</td>\n",
       "      <td>PFOS</td>\n",
       "      <td>DRE of PFOS</td>\n",
       "      <td>0.97</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total destruction and removal efficiency</td>\n",
       "      <td>DRE</td>\n",
       "      <td>PFBA</td>\n",
       "      <td>DRE of PFBA</td>\n",
       "      <td>0.97</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Total destruction and removal efficiency</td>\n",
       "      <td>DRE</td>\n",
       "      <td>PFPeA</td>\n",
       "      <td>DRE of PFPeA</td>\n",
       "      <td>0.97</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Total destruction and removal efficiency</td>\n",
       "      <td>DRE</td>\n",
       "      <td>PFHxA</td>\n",
       "      <td>DRE of PFHxA</td>\n",
       "      <td>0.90</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Total destruction and removal efficiency</td>\n",
       "      <td>DRE</td>\n",
       "      <td>PFHpA</td>\n",
       "      <td>DRE of PFHpA</td>\n",
       "      <td>0.97</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Total destruction and removal efficiency</td>\n",
       "      <td>DRE</td>\n",
       "      <td>PFNA</td>\n",
       "      <td>DRE of PFNA</td>\n",
       "      <td>0.97</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Total destruction and removal efficiency</td>\n",
       "      <td>DRE</td>\n",
       "      <td>PFDA</td>\n",
       "      <td>DRE of PFDA</td>\n",
       "      <td>0.97</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Total destruction and removal efficiency</td>\n",
       "      <td>DRE</td>\n",
       "      <td>PFBS</td>\n",
       "      <td>DRE of PFBS</td>\n",
       "      <td>0.98</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Total destruction and removal efficiency</td>\n",
       "      <td>DRE</td>\n",
       "      <td>PFHxS</td>\n",
       "      <td>DRE of PFHxS</td>\n",
       "      <td>0.99</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Fraction of not destroyed and removed that remains in GAC</td>\n",
       "      <td>Frac_to_GAC</td>\n",
       "      <td>PFOA</td>\n",
       "      <td>Fraction of PFOA remained in reactivated GAC</td>\n",
       "      <td>0.33</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Fraction of not destroyed and removed that remains in GAC</td>\n",
       "      <td>Frac_to_GAC</td>\n",
       "      <td>PFOS</td>\n",
       "      <td>Fraction of PFOS remained in reactivated GAC</td>\n",
       "      <td>0.33</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Fraction of not destroyed and removed that remains in GAC</td>\n",
       "      <td>Frac_to_GAC</td>\n",
       "      <td>PFBA</td>\n",
       "      <td>Fraction of PFBA remained in reactivated GAC</td>\n",
       "      <td>0.33</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Fraction of not destroyed and removed that remains in GAC</td>\n",
       "      <td>Frac_to_GAC</td>\n",
       "      <td>PFPeA</td>\n",
       "      <td>Fraction of PFPeA remained in reactivated GAC</td>\n",
       "      <td>0.33</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Fraction of not destroyed and removed that remains in GAC</td>\n",
       "      <td>Frac_to_GAC</td>\n",
       "      <td>PFHxA</td>\n",
       "      <td>Fraction of PFHxA remained in reactivated GAC</td>\n",
       "      <td>0.33</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Fraction of not destroyed and removed that remains in GAC</td>\n",
       "      <td>Frac_to_GAC</td>\n",
       "      <td>PFHpA</td>\n",
       "      <td>Fraction of PFHpA remained in reactivated GAC</td>\n",
       "      <td>0.33</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Fraction of not destroyed and removed that remains in GAC</td>\n",
       "      <td>Frac_to_GAC</td>\n",
       "      <td>PFNA</td>\n",
       "      <td>Fraction of PFNA remained in reactivated GAC</td>\n",
       "      <td>0.33</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Fraction of not destroyed and removed that remains in GAC</td>\n",
       "      <td>Frac_to_GAC</td>\n",
       "      <td>PFDA</td>\n",
       "      <td>Fraction of PFDA remained in reactivated GAC</td>\n",
       "      <td>0.33</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Fraction of not destroyed and removed that remains in GAC</td>\n",
       "      <td>Frac_to_GAC</td>\n",
       "      <td>PFBS</td>\n",
       "      <td>Fraction of PFBS remained in reactivated GAC</td>\n",
       "      <td>0.33</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Fraction of not destroyed and removed that remains in GAC</td>\n",
       "      <td>Frac_to_GAC</td>\n",
       "      <td>PFHxS</td>\n",
       "      <td>Fraction of PFHxS remained in reactivated GAC</td>\n",
       "      <td>0.33</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Reactivation parameters</td>\n",
       "      <td>Reac_param</td>\n",
       "      <td>frac_vs_to_GAC</td>\n",
       "      <td>Fraction of incoming  Volatile Solids to reactivated GAC</td>\n",
       "      <td>0.15</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Reactivation parameters</td>\n",
       "      <td>Reac_param</td>\n",
       "      <td>GAC_ts_cont</td>\n",
       "      <td>Solids content of reactivated GAC</td>\n",
       "      <td>0.90</td>\n",
       "      <td>fraction</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     Category Dictonary_Name  \\\n",
       "0   Total destruction and removal efficiency                   DRE             \n",
       "1   Total destruction and removal efficiency                   DRE             \n",
       "2   Total destruction and removal efficiency                   DRE             \n",
       "3   Total destruction and removal efficiency                   DRE             \n",
       "4   Total destruction and removal efficiency                   DRE             \n",
       "5   Total destruction and removal efficiency                   DRE             \n",
       "6   Total destruction and removal efficiency                   DRE             \n",
       "7   Total destruction and removal efficiency                   DRE             \n",
       "8   Total destruction and removal efficiency                   DRE             \n",
       "9   Total destruction and removal efficiency                   DRE             \n",
       "10  Fraction of not destroyed and removed that remains in GAC  Frac_to_GAC     \n",
       "11  Fraction of not destroyed and removed that remains in GAC  Frac_to_GAC     \n",
       "12  Fraction of not destroyed and removed that remains in GAC  Frac_to_GAC     \n",
       "13  Fraction of not destroyed and removed that remains in GAC  Frac_to_GAC     \n",
       "14  Fraction of not destroyed and removed that remains in GAC  Frac_to_GAC     \n",
       "15  Fraction of not destroyed and removed that remains in GAC  Frac_to_GAC     \n",
       "16  Fraction of not destroyed and removed that remains in GAC  Frac_to_GAC     \n",
       "17  Fraction of not destroyed and removed that remains in GAC  Frac_to_GAC     \n",
       "18  Fraction of not destroyed and removed that remains in GAC  Frac_to_GAC     \n",
       "19  Fraction of not destroyed and removed that remains in GAC  Frac_to_GAC     \n",
       "20  Reactivation parameters                                    Reac_param      \n",
       "21  Reactivation parameters                                    Reac_param      \n",
       "\n",
       "    Parameter Name                                     Parameter Description  \\\n",
       "0   PFOA            DRE of PFOA                                                \n",
       "1   PFOS            DRE of PFOS                                                \n",
       "2   PFBA            DRE of PFBA                                                \n",
       "3   PFPeA           DRE of PFPeA                                               \n",
       "4   PFHxA           DRE of PFHxA                                               \n",
       "5   PFHpA           DRE of PFHpA                                               \n",
       "6   PFNA            DRE of PFNA                                                \n",
       "7   PFDA            DRE of PFDA                                                \n",
       "8   PFBS            DRE of PFBS                                                \n",
       "9   PFHxS           DRE of PFHxS                                               \n",
       "10  PFOA            Fraction of PFOA remained in reactivated GAC               \n",
       "11  PFOS            Fraction of PFOS remained in reactivated GAC               \n",
       "12  PFBA            Fraction of PFBA remained in reactivated GAC               \n",
       "13  PFPeA           Fraction of PFPeA remained in reactivated GAC              \n",
       "14  PFHxA           Fraction of PFHxA remained in reactivated GAC              \n",
       "15  PFHpA           Fraction of PFHpA remained in reactivated GAC              \n",
       "16  PFNA            Fraction of PFNA remained in reactivated GAC               \n",
       "17  PFDA            Fraction of PFDA remained in reactivated GAC               \n",
       "18  PFBS            Fraction of PFBS remained in reactivated GAC               \n",
       "19  PFHxS           Fraction of PFHxS remained in reactivated GAC              \n",
       "20  frac_vs_to_GAC  Fraction of incoming  Volatile Solids to reactivated GAC   \n",
       "21  GAC_ts_cont     Solids content of reactivated GAC                          \n",
       "\n",
       "    amount      unit  Reference  \n",
       "0   0.97    fraction NaN         \n",
       "1   0.97    fraction NaN         \n",
       "2   0.97    fraction NaN         \n",
       "3   0.97    fraction NaN         \n",
       "4   0.90    fraction NaN         \n",
       "5   0.97    fraction NaN         \n",
       "6   0.97    fraction NaN         \n",
       "7   0.97    fraction NaN         \n",
       "8   0.98    fraction NaN         \n",
       "9   0.99    fraction NaN         \n",
       "10  0.33    fraction NaN         \n",
       "11  0.33    fraction NaN         \n",
       "12  0.33    fraction NaN         \n",
       "13  0.33    fraction NaN         \n",
       "14  0.33    fraction NaN         \n",
       "15  0.33    fraction NaN         \n",
       "16  0.33    fraction NaN         \n",
       "17  0.33    fraction NaN         \n",
       "18  0.33    fraction NaN         \n",
       "19  0.33    fraction NaN         \n",
       "20  0.15    fraction NaN         \n",
       "21  0.90    fraction NaN         "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ThermalReactivation = ps.ThermalReactivation()\n",
    "ThermalReactivation.InputData.Data[['Category','Dictonary_Name','Parameter Name', 'Parameter Description', 'amount', 'unit','Reference']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Incoming Spent GAC to Thermal Reactivation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Parameter</th>\n",
       "      <th>Unit</th>\n",
       "      <th>Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mass flow</td>\n",
       "      <td>kg</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Solids flow</td>\n",
       "      <td>kg</td>\n",
       "      <td>900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Moisture flow</td>\n",
       "      <td>kg</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VS flow</td>\n",
       "      <td>kg</td>\n",
       "      <td>829.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Carbon flow</td>\n",
       "      <td>kg</td>\n",
       "      <td>630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>PFOA</td>\n",
       "      <td>μg</td>\n",
       "      <td>900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>PFOS</td>\n",
       "      <td>μg</td>\n",
       "      <td>1.5e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>PFBA</td>\n",
       "      <td>μg</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>PFPeA</td>\n",
       "      <td>μg</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>PFHxA</td>\n",
       "      <td>μg</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>PFHpA</td>\n",
       "      <td>μg</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>PFNA</td>\n",
       "      <td>μg</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>PFDA</td>\n",
       "      <td>μg</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>PFBS</td>\n",
       "      <td>μg</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>PFHxS</td>\n",
       "      <td>μg</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Parameter Unit   Amount\n",
       "0   Mass flow      kg   1000   \n",
       "1   Solids flow    kg   900    \n",
       "2   Moisture flow  kg   100    \n",
       "3   VS flow        kg   829.8  \n",
       "4   Carbon flow    kg   630    \n",
       "5   PFOA           μg   900000 \n",
       "6   PFOS           μg   1.5e+06\n",
       "7   PFBA           μg   0      \n",
       "8   PFPeA          μg   0      \n",
       "9   PFHxA          μg   0      \n",
       "10  PFHpA          μg   0      \n",
       "11  PFNA           μg   0      \n",
       "12  PFDA           μg   0      \n",
       "13  PFBS           μg   0      \n",
       "14  PFHxS          μg   0      "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IncominWaste = ps.IncomFlow()\n",
    "IncominWaste.set_flow('Spent GAC', 1000)\n",
    "IncominWaste.calc()\n",
    "SpentGAC = IncominWaste.Inc_flow\n",
    "SpentGAC.report()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PFAS balance in Thermal Reactivation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Air Emission</th>\n",
       "      <th>Reactivated GAC</th>\n",
       "      <th>Destructed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>PFOA</th>\n",
       "      <td>2.01</td>\n",
       "      <td>0.99</td>\n",
       "      <td>97.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PFOS</th>\n",
       "      <td>2.01</td>\n",
       "      <td>0.99</td>\n",
       "      <td>97.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PFBA</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PFPeA</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PFHxA</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PFHpA</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PFNA</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PFDA</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PFBS</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PFHxS</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Air Emission  Reactivated GAC  Destructed\n",
       "PFOA   2.01          0.99             97.0      \n",
       "PFOS   2.01          0.99             97.0      \n",
       "PFBA  NaN           NaN              NaN        \n",
       "PFPeA NaN           NaN              NaN        \n",
       "PFHxA NaN           NaN              NaN        \n",
       "PFHpA NaN           NaN              NaN        \n",
       "PFNA  NaN           NaN              NaN        \n",
       "PFDA  NaN           NaN              NaN        \n",
       "PFBS  NaN           NaN              NaN        \n",
       "PFHxS NaN           NaN              NaN        "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ThermalReactivation.calc(Inc_flow=SpentGAC)\n",
    "ThermalReactivation.report(normalized=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ThermalReactivation.plot_sankey()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ThermalReactivation.plot_sankey_report(margin=.5, gap=.3)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
