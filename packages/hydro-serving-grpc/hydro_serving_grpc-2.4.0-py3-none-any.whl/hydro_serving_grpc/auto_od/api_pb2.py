# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: hydro_serving_grpc/auto_od/api.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='hydro_serving_grpc/auto_od/api.proto',
  package='hydrosphere.auto_od',
  syntax='proto3',
  serialized_pb=_b('\n$hydro_serving_grpc/auto_od/api.proto\x12\x13hydrosphere.auto_od\".\n\x12ModelStatusRequest\x12\x18\n\x10model_version_id\x18\x01 \x01(\x03\"S\n\x0bModelStatus\x12/\n\x05state\x18\x01 \x01(\x0e\x32 .hydrosphere.auto_od.AutoODState\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\"J\n\x12LauchAutoOdRequest\x12\x1a\n\x12training_data_path\x18\x01 \x01(\t\x12\x18\n\x10model_version_id\x18\x02 \x01(\x03\"8\n\x13LauchAutoOdResponse\x12\x0c\n\x04\x63ode\x18\x01 \x01(\x05\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t*\x91\x01\n\x0b\x41utoODState\x12\x0b\n\x07PENDING\x10\x00\x12\x0b\n\x07STARTED\x10\x01\x12\x13\n\x0fSELECTING_MODEL\x10\x02\x12\x18\n\x14SELECTING_PARAMETERS\x10\x03\x12\r\n\tDEPLOYING\x10\x04\x12\x0b\n\x07SUCCESS\x10\x05\x12\n\n\x06\x46\x41ILED\x10\x06\x12\x11\n\rNOT_SUPPORTED\x10\x07\x32\xcf\x01\n\rAutoOdService\x12[\n\x0eGetModelStatus\x12\'.hydrosphere.auto_od.ModelStatusRequest\x1a .hydrosphere.auto_od.ModelStatus\x12\x61\n\x0cLaunchAutoOd\x12\'.hydrosphere.auto_od.LauchAutoOdRequest\x1a(.hydrosphere.auto_od.LauchAutoOdResponseB \n\x1eio.hydrosphere.serving.auto_odb\x06proto3')
)

_AUTOODSTATE = _descriptor.EnumDescriptor(
  name='AutoODState',
  full_name='hydrosphere.auto_od.AutoODState',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='PENDING', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='STARTED', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SELECTING_MODEL', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SELECTING_PARAMETERS', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DEPLOYING', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FAILED', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_SUPPORTED', index=7, number=7,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=329,
  serialized_end=474,
)
_sym_db.RegisterEnumDescriptor(_AUTOODSTATE)

AutoODState = enum_type_wrapper.EnumTypeWrapper(_AUTOODSTATE)
PENDING = 0
STARTED = 1
SELECTING_MODEL = 2
SELECTING_PARAMETERS = 3
DEPLOYING = 4
SUCCESS = 5
FAILED = 6
NOT_SUPPORTED = 7



_MODELSTATUSREQUEST = _descriptor.Descriptor(
  name='ModelStatusRequest',
  full_name='hydrosphere.auto_od.ModelStatusRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='model_version_id', full_name='hydrosphere.auto_od.ModelStatusRequest.model_version_id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=61,
  serialized_end=107,
)


_MODELSTATUS = _descriptor.Descriptor(
  name='ModelStatus',
  full_name='hydrosphere.auto_od.ModelStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='state', full_name='hydrosphere.auto_od.ModelStatus.state', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='hydrosphere.auto_od.ModelStatus.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=109,
  serialized_end=192,
)


_LAUCHAUTOODREQUEST = _descriptor.Descriptor(
  name='LauchAutoOdRequest',
  full_name='hydrosphere.auto_od.LauchAutoOdRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='training_data_path', full_name='hydrosphere.auto_od.LauchAutoOdRequest.training_data_path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='model_version_id', full_name='hydrosphere.auto_od.LauchAutoOdRequest.model_version_id', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=194,
  serialized_end=268,
)


_LAUCHAUTOODRESPONSE = _descriptor.Descriptor(
  name='LauchAutoOdResponse',
  full_name='hydrosphere.auto_od.LauchAutoOdResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='code', full_name='hydrosphere.auto_od.LauchAutoOdResponse.code', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='hydrosphere.auto_od.LauchAutoOdResponse.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=270,
  serialized_end=326,
)

_MODELSTATUS.fields_by_name['state'].enum_type = _AUTOODSTATE
DESCRIPTOR.message_types_by_name['ModelStatusRequest'] = _MODELSTATUSREQUEST
DESCRIPTOR.message_types_by_name['ModelStatus'] = _MODELSTATUS
DESCRIPTOR.message_types_by_name['LauchAutoOdRequest'] = _LAUCHAUTOODREQUEST
DESCRIPTOR.message_types_by_name['LauchAutoOdResponse'] = _LAUCHAUTOODRESPONSE
DESCRIPTOR.enum_types_by_name['AutoODState'] = _AUTOODSTATE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ModelStatusRequest = _reflection.GeneratedProtocolMessageType('ModelStatusRequest', (_message.Message,), dict(
  DESCRIPTOR = _MODELSTATUSREQUEST,
  __module__ = 'hydro_serving_grpc.auto_od.api_pb2'
  # @@protoc_insertion_point(class_scope:hydrosphere.auto_od.ModelStatusRequest)
  ))
_sym_db.RegisterMessage(ModelStatusRequest)

ModelStatus = _reflection.GeneratedProtocolMessageType('ModelStatus', (_message.Message,), dict(
  DESCRIPTOR = _MODELSTATUS,
  __module__ = 'hydro_serving_grpc.auto_od.api_pb2'
  # @@protoc_insertion_point(class_scope:hydrosphere.auto_od.ModelStatus)
  ))
_sym_db.RegisterMessage(ModelStatus)

LauchAutoOdRequest = _reflection.GeneratedProtocolMessageType('LauchAutoOdRequest', (_message.Message,), dict(
  DESCRIPTOR = _LAUCHAUTOODREQUEST,
  __module__ = 'hydro_serving_grpc.auto_od.api_pb2'
  # @@protoc_insertion_point(class_scope:hydrosphere.auto_od.LauchAutoOdRequest)
  ))
_sym_db.RegisterMessage(LauchAutoOdRequest)

LauchAutoOdResponse = _reflection.GeneratedProtocolMessageType('LauchAutoOdResponse', (_message.Message,), dict(
  DESCRIPTOR = _LAUCHAUTOODRESPONSE,
  __module__ = 'hydro_serving_grpc.auto_od.api_pb2'
  # @@protoc_insertion_point(class_scope:hydrosphere.auto_od.LauchAutoOdResponse)
  ))
_sym_db.RegisterMessage(LauchAutoOdResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\036io.hydrosphere.serving.auto_od'))

_AUTOODSERVICE = _descriptor.ServiceDescriptor(
  name='AutoOdService',
  full_name='hydrosphere.auto_od.AutoOdService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=477,
  serialized_end=684,
  methods=[
  _descriptor.MethodDescriptor(
    name='GetModelStatus',
    full_name='hydrosphere.auto_od.AutoOdService.GetModelStatus',
    index=0,
    containing_service=None,
    input_type=_MODELSTATUSREQUEST,
    output_type=_MODELSTATUS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='LaunchAutoOd',
    full_name='hydrosphere.auto_od.AutoOdService.LaunchAutoOd',
    index=1,
    containing_service=None,
    input_type=_LAUCHAUTOODREQUEST,
    output_type=_LAUCHAUTOODRESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_AUTOODSERVICE)

DESCRIPTOR.services_by_name['AutoOdService'] = _AUTOODSERVICE

# @@protoc_insertion_point(module_scope)
