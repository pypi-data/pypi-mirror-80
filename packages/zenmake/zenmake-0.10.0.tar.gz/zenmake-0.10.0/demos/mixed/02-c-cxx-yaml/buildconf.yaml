
project:
  version : 0.5.0

# use YAML anchors and aliases to emulate variables
fragment1: &fragment1 |
  #include <stdio.h>
  int main()
  {
    printf("test\n");
    return 0;
  }

fragment2: &fragment2 |
  #include <iostream>
  int main()
  {
    std::cout << "test" << std::endl;
    return 0;
  }

tasks:
  util:
    features : cshlib
    source   : { include: 'shlib/**/*.c' }
    config-actions :
      - do: parallel
        actions:
          - { do: check-headers, names: stdio.h }
          - { do: check-headers, names: stdlib.h, defname: WE_HAVE_STDLIB }
      - { do: check-code, text: *fragment1 }
  testprg:
    features : cxxprogram
    source   : { include: 'prog/**/*.cpp' }
    config-actions :
      - do: parallel
        actions:
          - { do: check-headers, names: cstdio iostream }
          - { do: check-code, text: *fragment1, label: fragment1 }
          - { do: check-code, text: *fragment2, label: fragment2, execute: true }
          - { do: check-code, file: 'cfgtests/cfgtest3.cpp',
              label: fragment3, defname: MYDEFINE, defines: 'VAR1=1 VAR2=2' }
      - { do: write-config-header, remove-defines: false }
    use: util

buildtypes:
  debug-gcc:
    toolchain : g++
    cflags    : -O0 -g
    cxxflags  : -O0 -g
    linkflags : -Wl,--as-needed
  release-gcc:
    toolchain : g++
    cflags    : -O2
    cxxflags  : -O2
    linkflags : -Wl,--as-needed
  debug-clang:
    toolchain : clang++
    cflags    : -O0 -g
    cxxflags  : -O0 -g
  release-clang:
    toolchain : clang++
    cflags    : -O2
    cxxflags  : -O2
  debug-msvc:
    toolchain : msvc
    cflags    : /Od
    cxxflags  : /Od /EHsc
  release-msvc:
    toolchain : msvc
    cflags    : /O2
    cxxflags  : /O2 /EHsc

  default: debug-gcc

platforms:
  linux:
    valid   : debug-gcc debug-clang release-gcc release-clang
    default : debug-gcc
  # Mac OS
  darwin:
    valid   : debug-clang release-clang
    default : debug-clang
  windows :
    valid   : debug-msvc release-msvc
    default : debug-msvc

matrix:
  - for : { task: util, buildtype : [debug-gcc, release-gcc] }
    set :
      toolchain : gcc
  - for : {task: util,  buildtype : [debug-clang, release-clang] }
    set :
      toolchain : clang
