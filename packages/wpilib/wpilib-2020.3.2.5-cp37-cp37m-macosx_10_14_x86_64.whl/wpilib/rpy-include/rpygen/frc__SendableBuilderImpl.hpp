
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <../_impl/include/frc/smartdashboard/SendableBuilderImpl.h>




#include <rpygen/frc__SendableBuilder.hpp>

namespace rpygen {

using namespace frc;


template <typename CxxBase>
using PyBasefrc__SendableBuilderImpl = 
    Pyfrc__SendableBuilder<
        CxxBase
    
    >
;

template <typename CxxBase>
struct Pyfrc__SendableBuilderImpl : PyBasefrc__SendableBuilderImpl<CxxBase> {
    using PyBasefrc__SendableBuilderImpl<CxxBase>::PyBasefrc__SendableBuilderImpl;



#ifndef RPYGEN_DISABLE_SetSmartDashboardType_KRTwpi__Twine
    void SetSmartDashboardType(const wpi::Twine& type) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "setSmartDashboardType", SetSmartDashboardType,type);    }
#endif

#ifndef RPYGEN_DISABLE_SetActuator_b
    void SetActuator(bool value) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "setActuator", SetActuator,value);    }
#endif

#ifndef RPYGEN_DISABLE_SetSafeState_Tstd__function_void___
    void SetSafeState(std::function<void ( )> func) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "setSafeState", SetSafeState,func);    }
#endif

#ifndef RPYGEN_DISABLE_SetUpdateTable_Tstd__function_void___
    void SetUpdateTable(std::function<void ( )> func) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "setUpdateTable", SetUpdateTable,func);    }
#endif

#ifndef RPYGEN_DISABLE_GetEntry_KRTwpi__Twine
    nt::NetworkTableEntry GetEntry(const wpi::Twine& key) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(nt::NetworkTableEntry), CxxBase, "getEntry", GetEntry,key);    }
#endif

#ifndef RPYGEN_DISABLE_AddBooleanProperty_KRTwpi__Twine_Tstd__function_bool____Tstd__function_void_bool__
    void AddBooleanProperty(const wpi::Twine& key, std::function<bool ( )> getter, std::function<void ( bool )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addBooleanProperty", AddBooleanProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddDoubleProperty_KRTwpi__Twine_Tstd__function_double____Tstd__function_void_double__
    void AddDoubleProperty(const wpi::Twine& key, std::function<double ( )> getter, std::function<void ( double )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addDoubleProperty", AddDoubleProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddStringProperty_KRTwpi__Twine_Tstd__function_std__string____Tstd__function_void_wpi__StringRef__
    void AddStringProperty(const wpi::Twine& key, std::function<std::string ( )> getter, std::function<void ( wpi::StringRef )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addStringProperty", AddStringProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddBooleanArrayProperty_KRTwpi__Twine_Tstd__function_std__vector_int_____Tstd__function_void_wpi__ArrayRef_int___
    void AddBooleanArrayProperty(const wpi::Twine& key, std::function<std::vector<int> ( )> getter, std::function<void ( wpi::ArrayRef<int> )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addBooleanArrayProperty", AddBooleanArrayProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddDoubleArrayProperty_KRTwpi__Twine_Tstd__function_std__vector_double_____Tstd__function_void_wpi__ArrayRef_double___
    void AddDoubleArrayProperty(const wpi::Twine& key, std::function<std::vector<double> ( )> getter, std::function<void ( wpi::ArrayRef<double> )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addDoubleArrayProperty", AddDoubleArrayProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddStringArrayProperty_KRTwpi__Twine_Tstd__function_std__vector_std__string_____Tstd__function_void_wpi__ArrayRef_std__string___
    void AddStringArrayProperty(const wpi::Twine& key, std::function<std::vector<std::string> ( )> getter, std::function<void ( wpi::ArrayRef<std::string> )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addStringArrayProperty", AddStringArrayProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddRawProperty_KRTwpi__Twine_Tstd__function_std__string____Tstd__function_void_wpi__StringRef__
    void AddRawProperty(const wpi::Twine& key, std::function<std::string ( )> getter, std::function<void ( wpi::StringRef )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addRawProperty", AddRawProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddValueProperty_KRTwpi__Twine_Tstd__function_std__shared_ptr_nt__Value_____Tstd__function_void_std__shared_ptr_nt__Value___
    void AddValueProperty(const wpi::Twine& key, std::function<std::shared_ptr<nt::Value> ( )> getter, std::function<void ( std::shared_ptr<nt::Value> )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addValueProperty", AddValueProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddSmallStringProperty_KRTwpi__Twine_Tstd__function_wpi__StringRef_wpi__SmallVectorImpl_char__buf___Tstd__function_void_wpi__StringRef__
    void AddSmallStringProperty(const wpi::Twine& key, std::function<wpi::StringRef ( wpi::SmallVectorImpl<char> & buf )> getter, std::function<void ( wpi::StringRef )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addSmallStringProperty", AddSmallStringProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddSmallBooleanArrayProperty_KRTwpi__Twine_Tstd__function_wpi__ArrayRef_int__wpi__SmallVectorImpl_int__buf___Tstd__function_void_wpi__ArrayRef_int___
    void AddSmallBooleanArrayProperty(const wpi::Twine& key, std::function<wpi::ArrayRef<int> ( wpi::SmallVectorImpl<int> & buf )> getter, std::function<void ( wpi::ArrayRef<int> )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addSmallBooleanArrayProperty", AddSmallBooleanArrayProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddSmallDoubleArrayProperty_KRTwpi__Twine_Tstd__function_wpi__ArrayRef_double__wpi__SmallVectorImpl_double__buf___Tstd__function_void_wpi__ArrayRef_double___
    void AddSmallDoubleArrayProperty(const wpi::Twine& key, std::function<wpi::ArrayRef<double> ( wpi::SmallVectorImpl<double> & buf )> getter, std::function<void ( wpi::ArrayRef<double> )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addSmallDoubleArrayProperty", AddSmallDoubleArrayProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddSmallStringArrayProperty_KRTwpi__Twine_Tstd__function_wpi__ArrayRef_std__string__wpi__SmallVectorImpl_std__string__buf___Tstd__function_void_wpi__ArrayRef_std__string___
    void AddSmallStringArrayProperty(const wpi::Twine& key, std::function<wpi::ArrayRef<std::string> ( wpi::SmallVectorImpl<std::string> & buf )> getter, std::function<void ( wpi::ArrayRef<std::string> )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addSmallStringArrayProperty", AddSmallStringArrayProperty,key, getter, setter);    }
#endif

#ifndef RPYGEN_DISABLE_AddSmallRawProperty_KRTwpi__Twine_Tstd__function_wpi__StringRef_wpi__SmallVectorImpl_char__buf___Tstd__function_void_wpi__StringRef__
    void AddSmallRawProperty(const wpi::Twine& key, std::function<wpi::StringRef ( wpi::SmallVectorImpl<char> & buf )> getter, std::function<void ( wpi::StringRef )> setter) override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "addSmallRawProperty", AddSmallRawProperty,key, getter, setter);    }
#endif



};

}; // namespace rpygen
