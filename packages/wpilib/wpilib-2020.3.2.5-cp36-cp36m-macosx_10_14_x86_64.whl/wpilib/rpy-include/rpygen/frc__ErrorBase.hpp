
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <../_impl/include/frc/ErrorBase.h>





namespace rpygen {

using namespace frc;


template <typename CxxBase>
struct Pyfrc__ErrorBase : CxxBase {
    using CxxBase::CxxBase;



#ifndef RPYGEN_DISABLE_GetError_v
    Error & GetError() override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(Error &), CxxBase, "getError", GetError,);    }
#endif

#ifndef RPYGEN_DISABLE_KGetError_v
    const Error & GetError() const override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(const Error &), CxxBase, "getError", GetError,);    }
#endif

#ifndef RPYGEN_DISABLE_KClearError_v
    void ClearError() const override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "clearError", ClearError,);    }
#endif

#ifndef RPYGEN_DISABLE_KSetErrnoError_KRTwpi__Twine_Twpi__StringRef_Twpi__StringRef_i
    void SetErrnoError(const wpi::Twine& contextMessage, wpi::StringRef filename, wpi::StringRef function, int lineNumber) const override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "setErrnoError", SetErrnoError,contextMessage, filename, function, lineNumber);    }
#endif

#ifndef RPYGEN_DISABLE_KSetImaqError_i_KRTwpi__Twine_Twpi__StringRef_Twpi__StringRef_i
    void SetImaqError(int success, const wpi::Twine& contextMessage, wpi::StringRef filename, wpi::StringRef function, int lineNumber) const override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "setImaqError", SetImaqError,success, contextMessage, filename, function, lineNumber);    }
#endif

#ifndef RPYGEN_DISABLE_KSetError_TError__Code_KRTwpi__Twine_Twpi__StringRef_Twpi__StringRef_i
    void SetError(Error::Code code, const wpi::Twine& contextMessage, wpi::StringRef filename, wpi::StringRef function, int lineNumber) const override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "setError", SetError,code, contextMessage, filename, function, lineNumber);    }
#endif

#ifndef RPYGEN_DISABLE_KSetErrorRange_TError__Code_i_i_i_KRTwpi__Twine_Twpi__StringRef_Twpi__StringRef_i
    void SetErrorRange(Error::Code code, int32_t minRange, int32_t maxRange, int32_t requestedValue, const wpi::Twine& contextMessage, wpi::StringRef filename, wpi::StringRef function, int lineNumber) const override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "setErrorRange", SetErrorRange,code, minRange, maxRange, requestedValue, contextMessage, filename, function, lineNumber);    }
#endif

#ifndef RPYGEN_DISABLE_KSetWPIError_KRTwpi__Twine_TError__Code_KRTwpi__Twine_Twpi__StringRef_Twpi__StringRef_i
    void SetWPIError(const wpi::Twine& errorMessage, Error::Code code, const wpi::Twine& contextMessage, wpi::StringRef filename, wpi::StringRef function, int lineNumber) const override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "setWPIError", SetWPIError,errorMessage, code, contextMessage, filename, function, lineNumber);    }
#endif

#ifndef RPYGEN_DISABLE_KCloneError_KRTfrc__ErrorBase
    void CloneError(const frc::ErrorBase& rhs) const override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(void), CxxBase, "cloneError", CloneError,rhs);    }
#endif

#ifndef RPYGEN_DISABLE_KStatusIsFatal_v
    bool StatusIsFatal() const override {
PYBIND11_OVERLOAD_NAME(PYBIND11_TYPE(bool), CxxBase, "statusIsFatal", StatusIsFatal,);    }
#endif



    using frc::ErrorBase::m_error;
};

}; // namespace rpygen
