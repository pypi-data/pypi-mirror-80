{"version":3,"sources":["streamlit/streamlit.ts","streamlit/ArrowTable.ts","streamlit/StreamlitReact.tsx","Ace.tsx","index.tsx"],"names":["ComponentMessageType","ArrowTable","dataBuffer","indexBuffer","columnsBuffer","styler","dataTable","indexTable","columnsTable","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","push","type","join","content","dataColumnIndex","getContent","dataRowIndex","id","uuid","displayValuesTable","table","column","getColumnAt","getColumnTypeId","Type","Timestamp","nanosToDate","get","this","Table","from","caption","displayValues","styles","undefined","data","serialize","index","columns","schema","fields","typeId","nanos","Date","length","numCols","rows","dataRows","dataColumns","Streamlit","API_VERSION","RENDER_EVENT","events","EventTarget","registeredMessageListener","lastFrameHeight","setComponentReady","window","addEventListener","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","body","scrollHeight","SET_FRAME_HEIGHT","setComponentValue","value","dataType","SET_COMPONENT_VALUE","event","onRenderMessage","args","console","error","dataframeArgs","argsDataframeToObject","disabled","Boolean","CustomEvent","detail","dispatchEvent","argsDataframe","argsDataframeArrow","map","key","toArrowTable","Object","fromEntries","df","parent","postMessage","isStreamlitMessage","React","PureComponent","withStreamlitConnection","WrappedComponent","ComponentWrapper","props","componentDidMount","onRenderEvent","componentWillUnmount","removeEventListener","renderEvent","setState","renderData","render","state","componentError","message","width","innerWidth","getDerivedStateFromError","hoistNonReactStatics","pendingRef","useRef","showPending","display","current","style","updateStreamlit","useEffect","enableBasicAutocompletion","enableLiveAutocompletion","debounceChangePeriod","onChange","autoUpdate","commands","name","bindKey","mac","win","exec","editor","isPending","getValue","ref","textAlign","fontSize","color","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d21b6211.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2020 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\"\nimport { ArrowDataframeProto, ArrowTable } from \"./ArrowTable\"\n\n/** Data sent in the custom Streamlit render event. */\nexport interface RenderData {\n  args: any\n  disabled: boolean\n}\n\n/** Messages from Component -> Streamlit */\nenum ComponentMessageType {\n  // A component sends this message when it's ready to receive messages\n  // from Streamlit. Streamlit won't send any messages until it gets this.\n  // Data: { apiVersion: number }\n  COMPONENT_READY = \"streamlit:componentReady\",\n\n  // The component has a new widget value. Send it back to Streamlit, which\n  // will then re-run the app.\n  // Data: { value: any }\n  SET_COMPONENT_VALUE = \"streamlit:setComponentValue\",\n\n  // The component has a new height for its iframe.\n  // Data: { height: number }\n  SET_FRAME_HEIGHT = \"streamlit:setFrameHeight\",\n}\n\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nexport class Streamlit {\n  /**\n   * The Streamlit component API version we're targetting.\n   * There's currently only 1!\n   */\n  public static readonly API_VERSION = 1\n\n  public static readonly RENDER_EVENT = \"streamlit:render\"\n\n  /** Dispatches events received from Streamlit. */\n  public static readonly events = new EventTarget()\n\n  private static registeredMessageListener = false\n  private static lastFrameHeight?: number\n\n  /**\n   * Tell Streamlit that the component is ready to start receiving data.\n   * Streamlit will defer emitting RENDER events until it receives the\n   * COMPONENT_READY message.\n   */\n  public static setComponentReady = (): void => {\n    if (!Streamlit.registeredMessageListener) {\n      // Register for message events if we haven't already\n      window.addEventListener(\"message\", Streamlit.onMessageEvent)\n      Streamlit.registeredMessageListener = true\n    }\n\n    Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n      apiVersion: Streamlit.API_VERSION,\n    })\n  }\n\n  /**\n   * Report the component's height to Streamlit.\n   * This should be called every time the component changes its DOM - that is,\n   * when it's first loaded, and any time it updates.\n   */\n  public static setFrameHeight = (height?: number): void => {\n    if (height === undefined) {\n      // `height` is optional. If undefined, it defaults to scrollHeight,\n      // which is the entire height of the element minus its border,\n      // scrollbar, and margin.\n      height = document.body.scrollHeight\n    }\n\n    if (height === Streamlit.lastFrameHeight) {\n      // Don't bother updating if our height hasn't changed.\n      return\n    }\n\n    Streamlit.lastFrameHeight = height\n    Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height })\n  }\n\n  /**\n   * Set the component's value. This value will be returned to the Python\n   * script, and the script will be re-run.\n   *\n   * For example:\n   *\n   * JavaScript:\n   * Streamlit.setComponentValue(\"ahoy!\")\n   *\n   * Python:\n   * value = st.my_component(...)\n   * st.write(value) # -> \"ahoy!\"\n   *\n   * The value must be serializable into JSON or ArrowTable.\n   */\n  public static setComponentValue = (value: any): void => {\n    let dataType\n    if (value instanceof ArrowTable) {\n      dataType = \"dataframe\"\n      value = value.serialize()\n    } else {\n      dataType = \"json\"\n    }\n    Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {\n      value,\n      dataType,\n    })\n  }\n\n  /** Receive a ForwardMsg from the Streamlit app */\n  private static onMessageEvent = (event: MessageEvent): void => {\n    const type = event.data[\"type\"]\n    switch (type) {\n      case Streamlit.RENDER_EVENT:\n        Streamlit.onRenderMessage(event.data)\n        break\n    }\n  }\n\n  /**\n   * Handle an untyped Streamlit render event and redispatch it as a\n   * StreamlitRenderEvent.\n   */\n  private static onRenderMessage = (data: any): void => {\n    let args = data[\"args\"]\n    if (args == null) {\n      console.error(\n        `Got null args in onRenderMessage. This should never happen`\n      )\n      args = {}\n    }\n\n    // Parse our dataframe arguments with arrow, and merge them into our args dict\n    const dataframeArgs =\n      data[\"dfs\"] && data[\"dfs\"].length > 0\n        ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n        : {}\n\n    args = {\n      ...args,\n      ...dataframeArgs,\n    }\n\n    const disabled = Boolean(data[\"disabled\"])\n\n    // Dispatch a render event!\n    const eventData = { disabled, args }\n    const event = new CustomEvent<RenderData>(Streamlit.RENDER_EVENT, {\n      detail: eventData,\n    })\n    Streamlit.events.dispatchEvent(event)\n  }\n\n  private static argsDataframeToObject = (\n    argsDataframe: ArgsDataframe[]\n  ): object => {\n    const argsDataframeArrow = argsDataframe.map(\n      ({ key, value }: ArgsDataframe) => [key, Streamlit.toArrowTable(value)]\n    )\n    return Object.fromEntries(argsDataframeArrow)\n  }\n\n  private static toArrowTable = (df: ArrowDataframeProto): ArrowTable => {\n    const { data, index, columns, styler } = df.data\n    return new ArrowTable(data, index, columns, styler)\n  }\n\n  /** Post a message to the Streamlit app. */\n  private static sendBackMsg = (type: string, data?: any): void => {\n    window.parent.postMessage(\n      {\n        isStreamlitMessage: true,\n        type: type,\n        ...data,\n      },\n      \"*\"\n    )\n  }\n}\n\ninterface ArgsDataframe {\n  key: string\n  value: ArrowDataframeProto\n}\n","/**\n * @license\n * Copyright 2018-2019 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Table, Type } from \"apache-arrow\"\n\ntype CellType = \"blank\" | \"index\" | \"columns\" | \"data\"\n\nexport interface ArrowDataframeProto {\n  data: ArrowTableProto\n  height: string\n  width: string\n}\n\nexport interface ArrowTableProto {\n  data: Uint8Array\n  index: Uint8Array\n  columns: Uint8Array\n  styler?: Styler\n}\n\ninterface Cell {\n  classNames: string\n  content: string\n  id?: string\n  type: CellType\n}\n\ninterface Styler {\n  caption?: string\n  displayValuesTable: Table\n  styles?: string\n  uuid: string\n}\n\nexport class ArrowTable {\n  private readonly dataTable: Table\n  private readonly indexTable: Table\n  private readonly columnsTable: Table\n  private readonly styler?: Styler\n\n  constructor(\n    dataBuffer: Uint8Array,\n    indexBuffer: Uint8Array,\n    columnsBuffer: Uint8Array,\n    styler?: any\n  ) {\n    this.dataTable = Table.from(dataBuffer)\n    this.indexTable = Table.from(indexBuffer)\n    this.columnsTable = Table.from(columnsBuffer)\n    this.styler = styler\n      ? {\n          caption: styler.caption,\n          displayValuesTable: Table.from(styler.displayValues),\n          styles: styler.styles,\n          uuid: styler.uuid,\n        }\n      : undefined\n  }\n\n  get rows(): number {\n    return this.indexTable.length + this.columnsTable.numCols\n  }\n\n  get columns(): number {\n    return this.indexTable.numCols + this.columnsTable.length\n  }\n\n  get headerRows(): number {\n    return this.rows - this.dataRows\n  }\n\n  get headerColumns(): number {\n    return this.columns - this.dataColumns\n  }\n\n  get dataRows(): number {\n    return this.dataTable.length\n  }\n\n  get dataColumns(): number {\n    return this.dataTable.numCols\n  }\n\n  get uuid(): string | undefined {\n    return this.styler && this.styler.uuid\n  }\n\n  get caption(): string | undefined {\n    return this.styler && this.styler.caption\n  }\n\n  get styles(): string | undefined {\n    return this.styler && this.styler.styles\n  }\n\n  get table(): Table {\n    return this.dataTable\n  }\n\n  get index(): Table {\n    return this.indexTable\n  }\n\n  get columnTable(): Table {\n    return this.columnsTable\n  }\n\n  public getCell = (rowIndex: number, columnIndex: number): Cell => {\n    const isBlankCell =\n      rowIndex < this.headerRows && columnIndex < this.headerColumns\n    const isIndexCell =\n      rowIndex >= this.headerRows && columnIndex < this.headerColumns\n    const isColumnsCell =\n      rowIndex < this.headerRows && columnIndex >= this.headerColumns\n\n    if (isBlankCell) {\n      const classNames = [\"blank\"]\n      if (columnIndex > 0) {\n        classNames.push(\"level\" + rowIndex)\n      }\n\n      return {\n        type: \"blank\",\n        classNames: classNames.join(\" \"),\n        content: \"\",\n      }\n    } else if (isColumnsCell) {\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"col_heading\",\n        \"level\" + rowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n\n      return {\n        type: \"columns\",\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.columnsTable, dataColumnIndex, rowIndex),\n      }\n    } else if (isIndexCell) {\n      const dataRowIndex = rowIndex - this.headerRows\n      const classNames = [\n        \"row_heading\",\n        \"level\" + columnIndex,\n        \"row\" + dataRowIndex,\n      ]\n\n      return {\n        type: \"index\",\n        id: `T_${this.uuid}level${columnIndex}_row${dataRowIndex}`,\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.indexTable, dataRowIndex, columnIndex),\n      }\n    } else {\n      const dataRowIndex = rowIndex - this.headerRows\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\"data\", \"row\" + dataRowIndex, \"col\" + dataColumnIndex]\n      const content = this.styler\n        ? this.getContent(\n            this.styler.displayValuesTable,\n            dataRowIndex,\n            dataColumnIndex\n          )\n        : this.getContent(this.dataTable, dataRowIndex, dataColumnIndex)\n\n      return {\n        type: \"data\",\n        id: `T_${this.uuid}row${dataRowIndex}_col${dataColumnIndex}`,\n        classNames: classNames.join(\" \"),\n        content,\n      }\n    }\n  }\n\n  public getContent = (\n    table: Table,\n    rowIndex: number,\n    columnIndex: number\n  ): any => {\n    const column = table.getColumnAt(columnIndex)\n    if (column === null) {\n      return \"\"\n    }\n\n    const columnTypeId = this.getColumnTypeId(table, columnIndex)\n    switch (columnTypeId) {\n      case Type.Timestamp: {\n        return this.nanosToDate(column.get(rowIndex))\n      }\n      default: {\n        return column.get(rowIndex)\n      }\n    }\n  }\n\n  /**\n   * Serialize arrow table.\n   */\n  public serialize(): ArrowTableProto {\n    return {\n      data: this.dataTable.serialize(),\n      index: this.indexTable.serialize(),\n      columns: this.columnsTable.serialize(),\n    }\n  }\n\n  /**\n   * Returns apache-arrow specific typeId of column.\n   */\n  private getColumnTypeId(table: Table, columnIndex: number): Type {\n    return table.schema.fields[columnIndex].type.typeId\n  }\n\n  private nanosToDate(nanos: number): Date {\n    return new Date(nanos / 1e6)\n  }\n}\n","import hoistNonReactStatics from \"hoist-non-react-statics\"\nimport React, { ReactNode } from \"react\"\nimport { RenderData, Streamlit } from \"./streamlit\"\n\n/**\n * Props passed to custom Streamlit components.\n */\nexport interface ComponentProps {\n  /** Named dictionary of arguments passed from Python. */\n  args: any\n\n  /** The component's width. */\n  width: number\n\n  /**\n   * True if the component should be disabled.\n   * All components get disabled while the app is being re-run,\n   * and become re-enabled when the re-run has finished.\n   */\n  disabled: boolean\n}\n\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nexport class StreamlitComponentBase<S = {}> extends React.PureComponent<\n  ComponentProps,\n  S\n> {\n  public componentDidMount(): void {\n    // After we're rendered for the first time, tell Streamlit that our height\n    // has changed.\n    Streamlit.setFrameHeight()\n  }\n\n  public componentDidUpdate(): void {\n    // After we're updated, tell Streamlit that our height may have changed.\n    Streamlit.setFrameHeight()\n  }\n}\n\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(\n  WrappedComponent: React.ComponentType<ComponentProps>\n): React.ComponentType {\n  interface WrapperProps {}\n\n  interface WrapperState {\n    renderData?: RenderData\n    componentError?: Error\n  }\n\n  class ComponentWrapper extends React.PureComponent<\n    WrapperProps,\n    WrapperState\n  > {\n    public constructor(props: WrapperProps) {\n      super(props)\n      this.state = {\n        renderData: undefined,\n        componentError: undefined,\n      }\n    }\n\n    public static getDerivedStateFromError = (\n      error: Error\n    ): Partial<WrapperState> => {\n      return { componentError: error }\n    }\n\n    public componentDidMount = (): void => {\n      // Set up event listeners, and signal to Streamlit that we're ready.\n      // We won't render the component until we receive the first RENDER_EVENT.\n      Streamlit.events.addEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n      Streamlit.setComponentReady()\n    }\n\n    public componentWillUnmount = (): void => {\n      Streamlit.events.removeEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n    }\n\n    /**\n     * Streamlit is telling this component to redraw.\n     * We save the render data in State, so that it can be passed to the\n     * component in our own render() function.\n     */\n    private onRenderEvent = (event: Event): void => {\n      // Update our state with the newest render data\n      const renderEvent = event as CustomEvent<RenderData>\n      this.setState({ renderData: renderEvent.detail })\n    }\n\n    public render = (): ReactNode => {\n      // If our wrapped component threw an error, display it.\n      if (this.state.componentError != null) {\n        return (\n          <div>\n            <h1>Component Error</h1>\n            <span>{this.state.componentError.message}</span>\n          </div>\n        )\n      }\n\n      // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n      if (this.state.renderData == null) {\n        return null\n      }\n\n      return (\n        <WrappedComponent\n          width={window.innerWidth}\n          disabled={this.state.renderData.disabled}\n          args={this.state.renderData.args}\n        />\n      )\n    }\n  }\n\n  return hoistNonReactStatics(ComponentWrapper, WrappedComponent)\n}\n","import React, { useEffect, useRef } from \"react\"\nimport AceEditor from \"react-ace\"\nimport { IAceEditor } from \"react-ace/lib/types\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"./streamlit\"\n\nimport \"ace-builds/webpack-resolver\"\nimport \"ace-builds/src-min-noconflict/ext-emmet\"\nimport \"ace-builds/src-min-noconflict/ext-language_tools\"\n\ninterface AceProps extends ComponentProps {\n  args: any\n}\n\nconst Ace = ({ args }: AceProps) => {\n  const pendingRef = useRef<HTMLDivElement>(null)\n\n  const isPending = () => pendingRef.current?.style.display === \"block\"\n\n  const showPending = (display: boolean) => {\n    if (pendingRef.current) {\n      pendingRef.current.style.display = display ? \"block\" : \"none\"\n    }\n  }\n\n  // Send editor content to streamlit\n  const updateStreamlit = (value: string) => {\n    Streamlit.setComponentValue(value)\n    showPending(false)\n  }\n\n  // Called on editor update\n  const handleChange = (value: string) => {\n    if (args.autoUpdate) {\n      updateStreamlit(value)      \n    }\n    else {\n      showPending(true)\n    }\n  }\n  \n  // Update component height with an offset for the pending message\n  useEffect(() => {\n    Streamlit.setFrameHeight(args.height + 20)\n  })\n\n  // Set default prop values that shouldn't be exposed to python\n  args.enableBasicAutocompletion = true\n  args.enableLiveAutocompletion = true\n  args.debounceChangePeriod = 100\n  args.onChange = handleChange\n  args.width = \"100%\"\n  args.commands = [{\n    name: \"updateStreamlit\",\n    bindKey: { mac: \"Command-Enter\", win: \"Ctrl-Enter\" },\n    exec: (editor: IAceEditor) => {\n      if (isPending()) {\n        updateStreamlit(editor.getValue())\n      }\n    }\n  }]\n\n  return <>\n    <AceEditor {...args} />\n    <div\n      ref={pendingRef}\n      style={{\n        textAlign: \"right\",\n        fontSize: \".8rem\",\n        color: \"#a3a8b8\",\n        display: \"none\"\n      }}\n    >\n      Press Ctrl+Enter to apply\n    </div>\n  </>\n}\n\nexport default withStreamlitConnection(Ace)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Ace from \"./Ace\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Ace />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}