# coding: utf-8

"""
    Agilicus API

    Agilicus API endpoints  # noqa: E501

    The version of the OpenAPI document: 2020.09.21
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import agilicus_api
from agilicus_api.models.mfa_challenge_question_input import MFAChallengeQuestionInput  # noqa: E501
from agilicus_api.rest import ApiException

class TestMFAChallengeQuestionInput(unittest.TestCase):
    """MFAChallengeQuestionInput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test MFAChallengeQuestionInput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = agilicus_api.models.mfa_challenge_question_input.MFAChallengeQuestionInput()  # noqa: E501
        if include_optional :
            return MFAChallengeQuestionInput(
                login_info = agilicus_api.models.mfa_challenge_question_login_info.MFAChallengeQuestionLoginInfo(
                    user_preference = 'organisation_policy', 
                    client_id = 'app-1', 
                    issuer_org_id = 'absjfladasdf23', 
                    org_id = 'absjfladasdf23', 
                    user_id = 'jjkkGmwB9oTJWDjIglTU', 
                    upstream_idp = 'city-adfs', 
                    ip_address = '127.0.0.1', 
                    amr_claim_present = True, )
            )
        else :
            return MFAChallengeQuestionInput(
                login_info = agilicus_api.models.mfa_challenge_question_login_info.MFAChallengeQuestionLoginInfo(
                    user_preference = 'organisation_policy', 
                    client_id = 'app-1', 
                    issuer_org_id = 'absjfladasdf23', 
                    org_id = 'absjfladasdf23', 
                    user_id = 'jjkkGmwB9oTJWDjIglTU', 
                    upstream_idp = 'city-adfs', 
                    ip_address = '127.0.0.1', 
                    amr_claim_present = True, ),
        )

    def testMFAChallengeQuestionInput(self):
        """Test MFAChallengeQuestionInput"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
