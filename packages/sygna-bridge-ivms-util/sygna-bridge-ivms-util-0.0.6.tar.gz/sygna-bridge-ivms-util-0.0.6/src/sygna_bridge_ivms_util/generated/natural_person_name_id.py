# coding: utf-8

"""
    Bridge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class NaturalPersonNameId(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'primary_identifier': 'str',
        'secondary_identifier': 'str',
        'name_identifier_type': 'str'
    }

    attribute_map = {
        'primary_identifier': 'primary_identifier',
        'secondary_identifier': 'secondary_identifier',
        'name_identifier_type': 'name_identifier_type'
    }

    def __init__(self, primary_identifier=None, secondary_identifier=None, name_identifier_type=None):  # noqa: E501
        """NaturalPersonNameId - a model defined in OpenAPI"""  # noqa: E501

        self._primary_identifier = None
        self._secondary_identifier = None
        self._name_identifier_type = None
        self.discriminator = None

        if primary_identifier is not None:
            self.primary_identifier = primary_identifier
        if secondary_identifier is not None:
            self.secondary_identifier = secondary_identifier
        if name_identifier_type is not None:
            self.name_identifier_type = name_identifier_type

    @property
    def primary_identifier(self):
        """Gets the primary_identifier of this NaturalPersonNameId.  # noqa: E501


        :return: The primary_identifier of this NaturalPersonNameId.  # noqa: E501
        :rtype: str
        """
        return self._primary_identifier

    @primary_identifier.setter
    def primary_identifier(self, primary_identifier):
        """Sets the primary_identifier of this NaturalPersonNameId.


        :param primary_identifier: The primary_identifier of this NaturalPersonNameId.  # noqa: E501
        :type primary_identifier: str
        """

        self._primary_identifier = primary_identifier

    @property
    def secondary_identifier(self):
        """Gets the secondary_identifier of this NaturalPersonNameId.  # noqa: E501


        :return: The secondary_identifier of this NaturalPersonNameId.  # noqa: E501
        :rtype: str
        """
        return self._secondary_identifier

    @secondary_identifier.setter
    def secondary_identifier(self, secondary_identifier):
        """Sets the secondary_identifier of this NaturalPersonNameId.


        :param secondary_identifier: The secondary_identifier of this NaturalPersonNameId.  # noqa: E501
        :type secondary_identifier: str
        """

        self._secondary_identifier = secondary_identifier

    @property
    def name_identifier_type(self):
        """Gets the name_identifier_type of this NaturalPersonNameId.  # noqa: E501


        :return: The name_identifier_type of this NaturalPersonNameId.  # noqa: E501
        :rtype: str
        """
        return self._name_identifier_type

    @name_identifier_type.setter
    def name_identifier_type(self, name_identifier_type):
        """Sets the name_identifier_type of this NaturalPersonNameId.


        :param name_identifier_type: The name_identifier_type of this NaturalPersonNameId.  # noqa: E501
        :type name_identifier_type: str
        """
        allowed_values = ["ALIA", "BIRT", "MAID", "LEGL", "MISC"]  # noqa: E501
        if name_identifier_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `name_identifier_type` ({0}), must be one of {1}"  # noqa: E501
                .format(name_identifier_type, allowed_values)
            )

        self._name_identifier_type = name_identifier_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NaturalPersonNameId):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NaturalPersonNameId):
            return True

        return self.to_dict() != other.to_dict()
