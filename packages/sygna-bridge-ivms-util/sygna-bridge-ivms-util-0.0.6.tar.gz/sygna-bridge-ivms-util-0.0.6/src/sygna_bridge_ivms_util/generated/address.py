# coding: utf-8

"""
    Bridge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address_type': 'str',
        'department': 'str',
        'sub_department': 'str',
        'street_name': 'str',
        'building_number': 'str',
        'building_name': 'str',
        'floor': 'str',
        'post_box': 'str',
        'room': 'str',
        'post_code': 'str',
        'town_name': 'str',
        'town_location_name': 'str',
        'district_name': 'str',
        'country_sub_division': 'str',
        'address_line': 'list[str]',
        'country': 'str'
    }

    attribute_map = {
        'address_type': 'address_type',
        'department': 'department',
        'sub_department': 'sub_department',
        'street_name': 'street_name',
        'building_number': 'building_number',
        'building_name': 'building_name',
        'floor': 'floor',
        'post_box': 'post_box',
        'room': 'room',
        'post_code': 'post_code',
        'town_name': 'town_name',
        'town_location_name': 'town_location_name',
        'district_name': 'district_name',
        'country_sub_division': 'country_sub_division',
        'address_line': 'address_line',
        'country': 'country'
    }

    def __init__(self, address_type=None, department=None, sub_department=None, street_name=None, building_number=None, building_name=None, floor=None, post_box=None, room=None, post_code=None, town_name=None, town_location_name=None, district_name=None, country_sub_division=None, address_line=None, country=None):  # noqa: E501
        """Address - a model defined in OpenAPI"""  # noqa: E501

        self._address_type = None
        self._department = None
        self._sub_department = None
        self._street_name = None
        self._building_number = None
        self._building_name = None
        self._floor = None
        self._post_box = None
        self._room = None
        self._post_code = None
        self._town_name = None
        self._town_location_name = None
        self._district_name = None
        self._country_sub_division = None
        self._address_line = None
        self._country = None
        self.discriminator = None

        if address_type is not None:
            self.address_type = address_type
        if department is not None:
            self.department = department
        if sub_department is not None:
            self.sub_department = sub_department
        if street_name is not None:
            self.street_name = street_name
        if building_number is not None:
            self.building_number = building_number
        if building_name is not None:
            self.building_name = building_name
        if floor is not None:
            self.floor = floor
        if post_box is not None:
            self.post_box = post_box
        if room is not None:
            self.room = room
        if post_code is not None:
            self.post_code = post_code
        if town_name is not None:
            self.town_name = town_name
        if town_location_name is not None:
            self.town_location_name = town_location_name
        if district_name is not None:
            self.district_name = district_name
        if country_sub_division is not None:
            self.country_sub_division = country_sub_division
        if address_line is not None:
            self.address_line = address_line
        if country is not None:
            self.country = country

    @property
    def address_type(self):
        """Gets the address_type of this Address.  # noqa: E501


        :return: The address_type of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this Address.


        :param address_type: The address_type of this Address.  # noqa: E501
        :type address_type: str
        """
        allowed_values = ["HOME", "BIZZ", "GEOG"]  # noqa: E501
        if address_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `address_type` ({0}), must be one of {1}"  # noqa: E501
                .format(address_type, allowed_values)
            )

        self._address_type = address_type

    @property
    def department(self):
        """Gets the department of this Address.  # noqa: E501


        :return: The department of this Address.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Address.


        :param department: The department of this Address.  # noqa: E501
        :type department: str
        """

        self._department = department

    @property
    def sub_department(self):
        """Gets the sub_department of this Address.  # noqa: E501


        :return: The sub_department of this Address.  # noqa: E501
        :rtype: str
        """
        return self._sub_department

    @sub_department.setter
    def sub_department(self, sub_department):
        """Sets the sub_department of this Address.


        :param sub_department: The sub_department of this Address.  # noqa: E501
        :type sub_department: str
        """

        self._sub_department = sub_department

    @property
    def street_name(self):
        """Gets the street_name of this Address.  # noqa: E501


        :return: The street_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this Address.


        :param street_name: The street_name of this Address.  # noqa: E501
        :type street_name: str
        """

        self._street_name = street_name

    @property
    def building_number(self):
        """Gets the building_number of this Address.  # noqa: E501


        :return: The building_number of this Address.  # noqa: E501
        :rtype: str
        """
        return self._building_number

    @building_number.setter
    def building_number(self, building_number):
        """Sets the building_number of this Address.


        :param building_number: The building_number of this Address.  # noqa: E501
        :type building_number: str
        """

        self._building_number = building_number

    @property
    def building_name(self):
        """Gets the building_name of this Address.  # noqa: E501


        :return: The building_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._building_name

    @building_name.setter
    def building_name(self, building_name):
        """Sets the building_name of this Address.


        :param building_name: The building_name of this Address.  # noqa: E501
        :type building_name: str
        """

        self._building_name = building_name

    @property
    def floor(self):
        """Gets the floor of this Address.  # noqa: E501


        :return: The floor of this Address.  # noqa: E501
        :rtype: str
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this Address.


        :param floor: The floor of this Address.  # noqa: E501
        :type floor: str
        """

        self._floor = floor

    @property
    def post_box(self):
        """Gets the post_box of this Address.  # noqa: E501


        :return: The post_box of this Address.  # noqa: E501
        :rtype: str
        """
        return self._post_box

    @post_box.setter
    def post_box(self, post_box):
        """Sets the post_box of this Address.


        :param post_box: The post_box of this Address.  # noqa: E501
        :type post_box: str
        """

        self._post_box = post_box

    @property
    def room(self):
        """Gets the room of this Address.  # noqa: E501


        :return: The room of this Address.  # noqa: E501
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this Address.


        :param room: The room of this Address.  # noqa: E501
        :type room: str
        """

        self._room = room

    @property
    def post_code(self):
        """Gets the post_code of this Address.  # noqa: E501


        :return: The post_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this Address.


        :param post_code: The post_code of this Address.  # noqa: E501
        :type post_code: str
        """

        self._post_code = post_code

    @property
    def town_name(self):
        """Gets the town_name of this Address.  # noqa: E501


        :return: The town_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._town_name

    @town_name.setter
    def town_name(self, town_name):
        """Sets the town_name of this Address.


        :param town_name: The town_name of this Address.  # noqa: E501
        :type town_name: str
        """

        self._town_name = town_name

    @property
    def town_location_name(self):
        """Gets the town_location_name of this Address.  # noqa: E501


        :return: The town_location_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._town_location_name

    @town_location_name.setter
    def town_location_name(self, town_location_name):
        """Sets the town_location_name of this Address.


        :param town_location_name: The town_location_name of this Address.  # noqa: E501
        :type town_location_name: str
        """

        self._town_location_name = town_location_name

    @property
    def district_name(self):
        """Gets the district_name of this Address.  # noqa: E501


        :return: The district_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._district_name

    @district_name.setter
    def district_name(self, district_name):
        """Sets the district_name of this Address.


        :param district_name: The district_name of this Address.  # noqa: E501
        :type district_name: str
        """

        self._district_name = district_name

    @property
    def country_sub_division(self):
        """Gets the country_sub_division of this Address.  # noqa: E501


        :return: The country_sub_division of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_sub_division

    @country_sub_division.setter
    def country_sub_division(self, country_sub_division):
        """Sets the country_sub_division of this Address.


        :param country_sub_division: The country_sub_division of this Address.  # noqa: E501
        :type country_sub_division: str
        """

        self._country_sub_division = country_sub_division

    @property
    def address_line(self):
        """Gets the address_line of this Address.  # noqa: E501


        :return: The address_line of this Address.  # noqa: E501
        :rtype: list[str]
        """
        return self._address_line

    @address_line.setter
    def address_line(self, address_line):
        """Sets the address_line of this Address.


        :param address_line: The address_line of this Address.  # noqa: E501
        :type address_line: list[str]
        """

        self._address_line = address_line

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501


        :return: The country of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.  # noqa: E501
        :type country: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Address):
            return True

        return self.to_dict() != other.to_dict()
