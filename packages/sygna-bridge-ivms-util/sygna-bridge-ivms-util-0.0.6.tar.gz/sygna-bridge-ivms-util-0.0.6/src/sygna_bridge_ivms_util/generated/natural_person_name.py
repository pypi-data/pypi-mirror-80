# coding: utf-8

"""
    Bridge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class NaturalPersonName(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name_identifiers': 'list[NaturalPersonNameId]',
        'local_name_identifiers': 'list[LocalNaturalPersonNameId]',
        'phonetic_name_identifiers': 'list[LocalNaturalPersonNameId]'
    }

    attribute_map = {
        'name_identifiers': 'name_identifiers',
        'local_name_identifiers': 'local_name_identifiers',
        'phonetic_name_identifiers': 'phonetic_name_identifiers'
    }

    def __init__(self, name_identifiers=None, local_name_identifiers=None, phonetic_name_identifiers=None):  # noqa: E501
        """NaturalPersonName - a model defined in OpenAPI"""  # noqa: E501

        self._name_identifiers = None
        self._local_name_identifiers = None
        self._phonetic_name_identifiers = None
        self.discriminator = None

        if name_identifiers is not None:
            self.name_identifiers = name_identifiers
        if local_name_identifiers is not None:
            self.local_name_identifiers = local_name_identifiers
        if phonetic_name_identifiers is not None:
            self.phonetic_name_identifiers = phonetic_name_identifiers

    @property
    def name_identifiers(self):
        """Gets the name_identifiers of this NaturalPersonName.  # noqa: E501


        :return: The name_identifiers of this NaturalPersonName.  # noqa: E501
        :rtype: list[NaturalPersonNameId]
        """
        return self._name_identifiers

    @name_identifiers.setter
    def name_identifiers(self, name_identifiers):
        """Sets the name_identifiers of this NaturalPersonName.


        :param name_identifiers: The name_identifiers of this NaturalPersonName.  # noqa: E501
        :type name_identifiers: list[NaturalPersonNameId]
        """

        self._name_identifiers = name_identifiers

    @property
    def local_name_identifiers(self):
        """Gets the local_name_identifiers of this NaturalPersonName.  # noqa: E501


        :return: The local_name_identifiers of this NaturalPersonName.  # noqa: E501
        :rtype: list[LocalNaturalPersonNameId]
        """
        return self._local_name_identifiers

    @local_name_identifiers.setter
    def local_name_identifiers(self, local_name_identifiers):
        """Sets the local_name_identifiers of this NaturalPersonName.


        :param local_name_identifiers: The local_name_identifiers of this NaturalPersonName.  # noqa: E501
        :type local_name_identifiers: list[LocalNaturalPersonNameId]
        """

        self._local_name_identifiers = local_name_identifiers

    @property
    def phonetic_name_identifiers(self):
        """Gets the phonetic_name_identifiers of this NaturalPersonName.  # noqa: E501


        :return: The phonetic_name_identifiers of this NaturalPersonName.  # noqa: E501
        :rtype: list[LocalNaturalPersonNameId]
        """
        return self._phonetic_name_identifiers

    @phonetic_name_identifiers.setter
    def phonetic_name_identifiers(self, phonetic_name_identifiers):
        """Sets the phonetic_name_identifiers of this NaturalPersonName.


        :param phonetic_name_identifiers: The phonetic_name_identifiers of this NaturalPersonName.  # noqa: E501
        :type phonetic_name_identifiers: list[LocalNaturalPersonNameId]
        """

        self._phonetic_name_identifiers = phonetic_name_identifiers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NaturalPersonName):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NaturalPersonName):
            return True

        return self.to_dict() != other.to_dict()
