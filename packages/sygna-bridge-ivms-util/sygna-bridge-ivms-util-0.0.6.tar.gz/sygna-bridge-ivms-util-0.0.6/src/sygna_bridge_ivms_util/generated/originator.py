# coding: utf-8

"""
    Bridge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class Originator(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'originator_persons': 'list[Person]',
        'account_numbers': 'list[str]'
    }

    attribute_map = {
        'originator_persons': 'originator_persons',
        'account_numbers': 'account_numbers'
    }

    def __init__(self, originator_persons=None, account_numbers=None):  # noqa: E501
        """Originator - a model defined in OpenAPI"""  # noqa: E501

        self._originator_persons = None
        self._account_numbers = None
        self.discriminator = None

        if originator_persons is not None:
            self.originator_persons = originator_persons
        if account_numbers is not None:
            self.account_numbers = account_numbers

    @property
    def originator_persons(self):
        """Gets the originator_persons of this Originator.  # noqa: E501


        :return: The originator_persons of this Originator.  # noqa: E501
        :rtype: list[Person]
        """
        return self._originator_persons

    @originator_persons.setter
    def originator_persons(self, originator_persons):
        """Sets the originator_persons of this Originator.


        :param originator_persons: The originator_persons of this Originator.  # noqa: E501
        :type originator_persons: list[Person]
        """

        self._originator_persons = originator_persons

    @property
    def account_numbers(self):
        """Gets the account_numbers of this Originator.  # noqa: E501


        :return: The account_numbers of this Originator.  # noqa: E501
        :rtype: list[str]
        """
        return self._account_numbers

    @account_numbers.setter
    def account_numbers(self, account_numbers):
        """Sets the account_numbers of this Originator.


        :param account_numbers: The account_numbers of this Originator.  # noqa: E501
        :type account_numbers: list[str]
        """

        self._account_numbers = account_numbers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Originator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Originator):
            return True

        return self.to_dict() != other.to_dict()
