# coding: utf-8

"""
    Bridge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class IdentityPayload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'originator': 'Originator',
        'beneficiary': 'Beneficiary',
        'originating_vasp': 'OriginatingVasp',
        'beneficiary_vasp': 'BeneficiaryVasp',
        'transfer_path': 'list[IntermediaryVasp]',
        'payload_metadata': 'PayloadMetadata'
    }

    attribute_map = {
        'originator': 'originator',
        'beneficiary': 'beneficiary',
        'originating_vasp': 'originating_vasp',
        'beneficiary_vasp': 'beneficiary_vasp',
        'transfer_path': 'transfer_path',
        'payload_metadata': 'payload_metadata'
    }

    def __init__(self, originator=None, beneficiary=None, originating_vasp=None, beneficiary_vasp=None, transfer_path=None, payload_metadata=None):  # noqa: E501
        """IdentityPayload - a model defined in OpenAPI"""  # noqa: E501

        self._originator = None
        self._beneficiary = None
        self._originating_vasp = None
        self._beneficiary_vasp = None
        self._transfer_path = None
        self._payload_metadata = None
        self.discriminator = None

        if originator is not None:
            self.originator = originator
        if beneficiary is not None:
            self.beneficiary = beneficiary
        if originating_vasp is not None:
            self.originating_vasp = originating_vasp
        if beneficiary_vasp is not None:
            self.beneficiary_vasp = beneficiary_vasp
        if transfer_path is not None:
            self.transfer_path = transfer_path
        if payload_metadata is not None:
            self.payload_metadata = payload_metadata

    @property
    def originator(self):
        """Gets the originator of this IdentityPayload.  # noqa: E501


        :return: The originator of this IdentityPayload.  # noqa: E501
        :rtype: Originator
        """
        return self._originator

    @originator.setter
    def originator(self, originator):
        """Sets the originator of this IdentityPayload.


        :param originator: The originator of this IdentityPayload.  # noqa: E501
        :type originator: Originator
        """

        self._originator = originator

    @property
    def beneficiary(self):
        """Gets the beneficiary of this IdentityPayload.  # noqa: E501


        :return: The beneficiary of this IdentityPayload.  # noqa: E501
        :rtype: Beneficiary
        """
        return self._beneficiary

    @beneficiary.setter
    def beneficiary(self, beneficiary):
        """Sets the beneficiary of this IdentityPayload.


        :param beneficiary: The beneficiary of this IdentityPayload.  # noqa: E501
        :type beneficiary: Beneficiary
        """

        self._beneficiary = beneficiary

    @property
    def originating_vasp(self):
        """Gets the originating_vasp of this IdentityPayload.  # noqa: E501


        :return: The originating_vasp of this IdentityPayload.  # noqa: E501
        :rtype: OriginatingVasp
        """
        return self._originating_vasp

    @originating_vasp.setter
    def originating_vasp(self, originating_vasp):
        """Sets the originating_vasp of this IdentityPayload.


        :param originating_vasp: The originating_vasp of this IdentityPayload.  # noqa: E501
        :type originating_vasp: OriginatingVasp
        """

        self._originating_vasp = originating_vasp

    @property
    def beneficiary_vasp(self):
        """Gets the beneficiary_vasp of this IdentityPayload.  # noqa: E501


        :return: The beneficiary_vasp of this IdentityPayload.  # noqa: E501
        :rtype: BeneficiaryVasp
        """
        return self._beneficiary_vasp

    @beneficiary_vasp.setter
    def beneficiary_vasp(self, beneficiary_vasp):
        """Sets the beneficiary_vasp of this IdentityPayload.


        :param beneficiary_vasp: The beneficiary_vasp of this IdentityPayload.  # noqa: E501
        :type beneficiary_vasp: BeneficiaryVasp
        """

        self._beneficiary_vasp = beneficiary_vasp

    @property
    def transfer_path(self):
        """Gets the transfer_path of this IdentityPayload.  # noqa: E501


        :return: The transfer_path of this IdentityPayload.  # noqa: E501
        :rtype: list[IntermediaryVasp]
        """
        return self._transfer_path

    @transfer_path.setter
    def transfer_path(self, transfer_path):
        """Sets the transfer_path of this IdentityPayload.


        :param transfer_path: The transfer_path of this IdentityPayload.  # noqa: E501
        :type transfer_path: list[IntermediaryVasp]
        """

        self._transfer_path = transfer_path

    @property
    def payload_metadata(self):
        """Gets the payload_metadata of this IdentityPayload.  # noqa: E501


        :return: The payload_metadata of this IdentityPayload.  # noqa: E501
        :rtype: PayloadMetadata
        """
        return self._payload_metadata

    @payload_metadata.setter
    def payload_metadata(self, payload_metadata):
        """Sets the payload_metadata of this IdentityPayload.


        :param payload_metadata: The payload_metadata of this IdentityPayload.  # noqa: E501
        :type payload_metadata: PayloadMetadata
        """

        self._payload_metadata = payload_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdentityPayload):
            return True

        return self.to_dict() != other.to_dict()
