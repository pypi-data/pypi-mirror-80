# coding: utf-8

"""
    Bridge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class LegalPerson(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'LegalPersonName',
        'geographic_addresses': 'list[Address]',
        'customer_number': 'str',
        'national_identification': 'NationalIdentification',
        'country_of_registration': 'str'
    }

    attribute_map = {
        'name': 'name',
        'geographic_addresses': 'geographic_addresses',
        'customer_number': 'customer_number',
        'national_identification': 'national_identification',
        'country_of_registration': 'country_of_registration'
    }

    def __init__(self, name=None, geographic_addresses=None, customer_number=None, national_identification=None, country_of_registration=None):  # noqa: E501
        """LegalPerson - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._geographic_addresses = None
        self._customer_number = None
        self._national_identification = None
        self._country_of_registration = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if geographic_addresses is not None:
            self.geographic_addresses = geographic_addresses
        if customer_number is not None:
            self.customer_number = customer_number
        if national_identification is not None:
            self.national_identification = national_identification
        if country_of_registration is not None:
            self.country_of_registration = country_of_registration

    @property
    def name(self):
        """Gets the name of this LegalPerson.  # noqa: E501


        :return: The name of this LegalPerson.  # noqa: E501
        :rtype: LegalPersonName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LegalPerson.


        :param name: The name of this LegalPerson.  # noqa: E501
        :type name: LegalPersonName
        """

        self._name = name

    @property
    def geographic_addresses(self):
        """Gets the geographic_addresses of this LegalPerson.  # noqa: E501


        :return: The geographic_addresses of this LegalPerson.  # noqa: E501
        :rtype: list[Address]
        """
        return self._geographic_addresses

    @geographic_addresses.setter
    def geographic_addresses(self, geographic_addresses):
        """Sets the geographic_addresses of this LegalPerson.


        :param geographic_addresses: The geographic_addresses of this LegalPerson.  # noqa: E501
        :type geographic_addresses: list[Address]
        """

        self._geographic_addresses = geographic_addresses

    @property
    def customer_number(self):
        """Gets the customer_number of this LegalPerson.  # noqa: E501


        :return: The customer_number of this LegalPerson.  # noqa: E501
        :rtype: str
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this LegalPerson.


        :param customer_number: The customer_number of this LegalPerson.  # noqa: E501
        :type customer_number: str
        """

        self._customer_number = customer_number

    @property
    def national_identification(self):
        """Gets the national_identification of this LegalPerson.  # noqa: E501


        :return: The national_identification of this LegalPerson.  # noqa: E501
        :rtype: NationalIdentification
        """
        return self._national_identification

    @national_identification.setter
    def national_identification(self, national_identification):
        """Sets the national_identification of this LegalPerson.


        :param national_identification: The national_identification of this LegalPerson.  # noqa: E501
        :type national_identification: NationalIdentification
        """

        self._national_identification = national_identification

    @property
    def country_of_registration(self):
        """Gets the country_of_registration of this LegalPerson.  # noqa: E501


        :return: The country_of_registration of this LegalPerson.  # noqa: E501
        :rtype: str
        """
        return self._country_of_registration

    @country_of_registration.setter
    def country_of_registration(self, country_of_registration):
        """Sets the country_of_registration of this LegalPerson.


        :param country_of_registration: The country_of_registration of this LegalPerson.  # noqa: E501
        :type country_of_registration: str
        """

        self._country_of_registration = country_of_registration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegalPerson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LegalPerson):
            return True

        return self.to_dict() != other.to_dict()
