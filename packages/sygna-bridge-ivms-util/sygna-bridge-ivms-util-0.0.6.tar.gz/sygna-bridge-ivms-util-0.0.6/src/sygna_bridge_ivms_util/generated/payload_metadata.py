# coding: utf-8

"""
    Bridge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class PayloadMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transliteration_method': 'list[str]'
    }

    attribute_map = {
        'transliteration_method': 'transliteration_method'
    }

    def __init__(self, transliteration_method=None):  # noqa: E501
        """PayloadMetadata - a model defined in OpenAPI"""  # noqa: E501

        self._transliteration_method = None
        self.discriminator = None

        if transliteration_method is not None:
            self.transliteration_method = transliteration_method

    @property
    def transliteration_method(self):
        """Gets the transliteration_method of this PayloadMetadata.  # noqa: E501


        :return: The transliteration_method of this PayloadMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._transliteration_method

    @transliteration_method.setter
    def transliteration_method(self, transliteration_method):
        """Sets the transliteration_method of this PayloadMetadata.


        :param transliteration_method: The transliteration_method of this PayloadMetadata.  # noqa: E501
        :type transliteration_method: list[str]
        """
        allowed_values = ["ARAB", "ARAN", "ARMN", "CYRL", "DEVA", "GEOR", "GREK", "HANI", "HEBR", "KANA", "KORE", "THAI", "OTHR"]  # noqa: E501
        if (not set(transliteration_method).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `transliteration_method` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(transliteration_method) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._transliteration_method = transliteration_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayloadMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PayloadMetadata):
            return True

        return self.to_dict() != other.to_dict()
