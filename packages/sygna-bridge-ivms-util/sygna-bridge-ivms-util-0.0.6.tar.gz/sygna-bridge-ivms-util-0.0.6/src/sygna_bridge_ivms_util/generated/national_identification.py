# coding: utf-8

"""
    Bridge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class NationalIdentification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'national_identifier': 'str',
        'national_identifier_type': 'str',
        'country_of_issue': 'str',
        'registration_authority': 'str'
    }

    attribute_map = {
        'national_identifier': 'national_identifier',
        'national_identifier_type': 'national_identifier_type',
        'country_of_issue': 'country_of_issue',
        'registration_authority': 'registration_authority'
    }

    def __init__(self, national_identifier=None, national_identifier_type=None, country_of_issue=None, registration_authority=None):  # noqa: E501
        """NationalIdentification - a model defined in OpenAPI"""  # noqa: E501

        self._national_identifier = None
        self._national_identifier_type = None
        self._country_of_issue = None
        self._registration_authority = None
        self.discriminator = None

        if national_identifier is not None:
            self.national_identifier = national_identifier
        if national_identifier_type is not None:
            self.national_identifier_type = national_identifier_type
        if country_of_issue is not None:
            self.country_of_issue = country_of_issue
        if registration_authority is not None:
            self.registration_authority = registration_authority

    @property
    def national_identifier(self):
        """Gets the national_identifier of this NationalIdentification.  # noqa: E501


        :return: The national_identifier of this NationalIdentification.  # noqa: E501
        :rtype: str
        """
        return self._national_identifier

    @national_identifier.setter
    def national_identifier(self, national_identifier):
        """Sets the national_identifier of this NationalIdentification.


        :param national_identifier: The national_identifier of this NationalIdentification.  # noqa: E501
        :type national_identifier: str
        """

        self._national_identifier = national_identifier

    @property
    def national_identifier_type(self):
        """Gets the national_identifier_type of this NationalIdentification.  # noqa: E501


        :return: The national_identifier_type of this NationalIdentification.  # noqa: E501
        :rtype: str
        """
        return self._national_identifier_type

    @national_identifier_type.setter
    def national_identifier_type(self, national_identifier_type):
        """Sets the national_identifier_type of this NationalIdentification.


        :param national_identifier_type: The national_identifier_type of this NationalIdentification.  # noqa: E501
        :type national_identifier_type: str
        """
        allowed_values = ["ARNU", "CCPT", "RAID", "DRLC", "FIIN", "TXID", "SOCS", "IDCD", "LEIX", "MISC"]  # noqa: E501
        if national_identifier_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `national_identifier_type` ({0}), must be one of {1}"  # noqa: E501
                .format(national_identifier_type, allowed_values)
            )

        self._national_identifier_type = national_identifier_type

    @property
    def country_of_issue(self):
        """Gets the country_of_issue of this NationalIdentification.  # noqa: E501


        :return: The country_of_issue of this NationalIdentification.  # noqa: E501
        :rtype: str
        """
        return self._country_of_issue

    @country_of_issue.setter
    def country_of_issue(self, country_of_issue):
        """Sets the country_of_issue of this NationalIdentification.


        :param country_of_issue: The country_of_issue of this NationalIdentification.  # noqa: E501
        :type country_of_issue: str
        """

        self._country_of_issue = country_of_issue

    @property
    def registration_authority(self):
        """Gets the registration_authority of this NationalIdentification.  # noqa: E501


        :return: The registration_authority of this NationalIdentification.  # noqa: E501
        :rtype: str
        """
        return self._registration_authority

    @registration_authority.setter
    def registration_authority(self, registration_authority):
        """Sets the registration_authority of this NationalIdentification.


        :param registration_authority: The registration_authority of this NationalIdentification.  # noqa: E501
        :type registration_authority: str
        """

        self._registration_authority = registration_authority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NationalIdentification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NationalIdentification):
            return True

        return self.to_dict() != other.to_dict()
