# coding: utf-8

"""
    Model Management Service

    Model Management System (MMS) is a version control system for structured data. It exposes model information through RESTful web services that can be used for CRUD operations, branching, and tagging of the model repository.  # noqa: E501

    OpenAPI spec version: 3.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConvertRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'body': 'str',
        'accepts': 'str',
        'css': 'str'
    }

    attribute_map = {
        'name': 'name',
        'body': 'body',
        'accepts': 'Accepts',
        'css': 'css'
    }

    def __init__(self, name=None, body=None, accepts=None, css=None):  # noqa: E501
        """ConvertRequest - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._body = None
        self._accepts = None
        self._css = None
        self.discriminator = None

        self.name = name
        self.body = body
        self.accepts = accepts
        if css is not None:
            self.css = css

    @property
    def name(self):
        """Gets the name of this ConvertRequest.  # noqa: E501


        :return: The name of this ConvertRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConvertRequest.


        :param name: The name of this ConvertRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def body(self):
        """Gets the body of this ConvertRequest.  # noqa: E501


        :return: The body of this ConvertRequest.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ConvertRequest.


        :param body: The body of this ConvertRequest.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def accepts(self):
        """Gets the accepts of this ConvertRequest.  # noqa: E501


        :return: The accepts of this ConvertRequest.  # noqa: E501
        :rtype: str
        """
        return self._accepts

    @accepts.setter
    def accepts(self, accepts):
        """Sets the accepts of this ConvertRequest.


        :param accepts: The accepts of this ConvertRequest.  # noqa: E501
        :type: str
        """
        if accepts is None:
            raise ValueError("Invalid value for `accepts`, must not be `None`")  # noqa: E501

        self._accepts = accepts

    @property
    def css(self):
        """Gets the css of this ConvertRequest.  # noqa: E501


        :return: The css of this ConvertRequest.  # noqa: E501
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this ConvertRequest.


        :param css: The css of this ConvertRequest.  # noqa: E501
        :type: str
        """

        self._css = css

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConvertRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
