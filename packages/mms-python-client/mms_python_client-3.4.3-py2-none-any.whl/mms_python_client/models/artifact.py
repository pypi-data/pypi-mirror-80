# coding: utf-8

"""
    Model Management Service

    Model Management System (MMS) is a version control system for structured data. It exposes model information through RESTful web services that can be used for CRUD operations, branching, and tagging of the model repository.  # noqa: E501

    OpenAPI spec version: 3.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Artifact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'content_type': 'str',
        'checksum': 'str',
        'artifact_location': 'str',
        'name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'content_type': 'contentType',
        'checksum': 'checksum',
        'artifact_location': 'artifactLocation',
        'name': 'name'
    }

    def __init__(self, id=None, content_type=None, checksum=None, artifact_location=None, name=None):  # noqa: E501
        """Artifact - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._content_type = None
        self._checksum = None
        self._artifact_location = None
        self._name = None
        self.discriminator = None

        self.id = id
        self.content_type = content_type
        self.checksum = checksum
        self.artifact_location = artifact_location
        if name is not None:
            self.name = name

    @property
    def id(self):
        """Gets the id of this Artifact.  # noqa: E501


        :return: The id of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Artifact.


        :param id: The id of this Artifact.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def content_type(self):
        """Gets the content_type of this Artifact.  # noqa: E501


        :return: The content_type of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Artifact.


        :param content_type: The content_type of this Artifact.  # noqa: E501
        :type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def checksum(self):
        """Gets the checksum of this Artifact.  # noqa: E501


        :return: The checksum of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this Artifact.


        :param checksum: The checksum of this Artifact.  # noqa: E501
        :type: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")  # noqa: E501

        self._checksum = checksum

    @property
    def artifact_location(self):
        """Gets the artifact_location of this Artifact.  # noqa: E501


        :return: The artifact_location of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_location

    @artifact_location.setter
    def artifact_location(self, artifact_location):
        """Sets the artifact_location of this Artifact.


        :param artifact_location: The artifact_location of this Artifact.  # noqa: E501
        :type: str
        """
        if artifact_location is None:
            raise ValueError("Invalid value for `artifact_location`, must not be `None`")  # noqa: E501

        self._artifact_location = artifact_location

    @property
    def name(self):
        """Gets the name of this Artifact.  # noqa: E501


        :return: The name of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Artifact.


        :param name: The name of this Artifact.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Artifact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
