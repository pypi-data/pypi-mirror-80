# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['healthchecker', 'healthchecker.tests']

package_data = \
{'': ['*']}

install_requires = \
['PyGithub>=1.44.1,<2.0.0', 'requests>=2.22.0,<3.0.0']

entry_points = \
{'console_scripts': ['healthchecker = healthchecker.__main__:run']}

setup_kwargs = {
    'name': 'healthchecker',
    'version': '1.1.1',
    'description': 'Check sites health and publish results in a file in Github, filesystem or an API',
    'long_description': '# HealthChecker\n\nA very simple python script to check the *health* of a service: make a GET request to it and if it answers it on time, then it\'s alive.  \nAdditionally, it can write the result of the operation in a git repo hosted on Github or in a local file. Or notify dead services through a POST to some JSON API.\n\nActions are logged using Python\'s standard logger and displayed according to the log level set.\n\nThis app was thought mainly for our [status page](https://github.com/rlyehlab/status). It\'s currently being maintained in our [repository](https://git.rlab.be/sysadmins/healthchecker).\n\n## Requirements\n\n* Python 3.7+\n* PyGithub 1.43+\n* requests 2.21+\n\n## Usage\n\n```\nusage: healthchecker [-h] [--gh-repo GH_REPO] [--gh-filename GH_FILENAME]\n                     [--gh-branch GH_BRANCH] [--gh-token GH_TOKEN]\n                     [--gh-email GH_EMAIL] [--notify-url NOTIFY_URL]\n                     [--notify-payload NOTIFY_PAYLOAD]\n                     [--notify-header NOTIFY_HEADER] [--notify-json]\n                     [--version] [--validation VALIDATION] [--output OUTPUT]\n                     [url [url ...]]\n\nHealthChecker v1.1.0 by HacKan (https://hackan.net) FOSS under GNU GPL v3.0 or\nnewer. Checks URLs through HTTP GET requests to verify their availability.\nOptionally writes the status result to a file in Github. Using Github requires\nthe repository name, the filename and an API token. Besides the ones listed\nbelow, the following env vars exist: HEALTHCHECKER_LOG_LEVEL sets the minimal\nlogging level and defaults to info (can be: debug, info, warning, error,\ncritical); HEALTHCHECKER_REQUESTS_TIMEOUT sets the amount of time in seconds\nto wait for services to respond and defaults to 10 seconds (setting a very low\nvalue might cause several false positives). Note: command-line parameters will\nalways supersede env vars.\n\npositional arguments:\n  url                   (HEALTHCHECKER_URLS (comma-separated)) URL to check\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show version and exit\n  --validation VALIDATION\n                        (HEALTHCHECKER_URLS_VALIDATION (comma-separated))\n                        string to find in the body of a request to an URL as a\n                        validation, one per URL (or the last one is used for\n                        the remaining URLs) (this parameter can be repeated as\n                        needed)\n  --output OUTPUT, -o OUTPUT\n                        (HEALTHCHECKER_OUTPUT) store result in a file,\n                        overwriting if exists (use `-` for standard output)\n\ngithub options:\n  --gh-repo GH_REPO     (HEALTHCHECKER_GITHUB_REPO) repository in the form of\n                        <user|org>/<repo> (case insensitive), i.e.:\n                        HacKanCuBa/b2rsum\n  --gh-filename GH_FILENAME\n                        (HEALTHCHECKER_GITHUB_FILENAME) filename to modify\n                        (include path if it is in a subdir such as\n                        path/to/file.ext)\n  --gh-branch GH_BRANCH\n                        (HEALTHCHECKER_GITHUB_BRANCH) branch where commits are\n                        done (defaults to main)\n  --gh-token GH_TOKEN   (HEALTHCHECKER_GITHUB_API_TOKEN) API token or\n                        client_id,client_secret (bypasses the one supplied\n                        through the environment)\n  --gh-email GH_EMAIL   (HEALTHCHECKER_GITHUB_COMMITTER_EMAIL) git committer\n                        email (the committer name is hardcoded to\n                        HealthChecker)\n\nnotify options:\n  --notify-url NOTIFY_URL\n                        (HEALTHCHECKER_NOTIFY_URL) URL to POST the status\n                        notification\n  --notify-payload NOTIFY_PAYLOAD\n                        (HEALTHCHECKER_NOTIFY_PAYLOAD) payload to send to the\n                        notify URL: it is prepended to the comma-separated\n                        list of URLs that failed validation, unless that it\n                        contains the string HEALTHCHECKER_FAILED_URLS (case\n                        sensitive), where it will replace that string by the\n                        comma-separated list of URLs, and send the entire\n                        payload\n  --notify-header NOTIFY_HEADER\n                        (HEALTHCHECKER_NOTIFY_HEADERS (comma-separated))\n                        header to send to the notify URL, which must be\n                        specified as name and value separated by a semicolon:\n                        <header name>:<header value> (this parameter can be\n                        repeated as needed)\n  --notify-json         (HEALTHCHECKER_NOTIFY_JSON (true/false)) send the\n                        payload JSON encoded (it also adds the proper Content-\n                        Type header)\n```\n\n### Environment variables\n\n* `HEALTHCHECKER_GITHUB_REPO`: repository in the form of <user|org>/<repo> (case insensitive), i.e.: HacKanCuBa/b2rsum.\n* `HEALTHCHECKER_GITHUB_FILENAME`: filename to modify (include path if it is in a subdir such as path/to/file.ext).\n* `HEALTHCHECKER_GITHUB_BRANCH`: branch where commits are done (defaults to main).\n* `HEALTHCHECKER_GITHUB_API_TOKEN`: API token or client_id,client_secret (bypasses the one supplied through the environment).\n* `HEALTHCHECKER_GITHUB_COMMITTER_EMAIL`: git committer email (the committer name is hardcoded to HealthChecker).\n* `HEALTHCHECKER_URLS`: URLs to check, comma-separated.\n* `HEALTHCHECKER_LOG_LEVEL`: minimal logging level, defaults to info (can be: debug, info, warning, error, critical).\n* `HEALTHCHECKER_REQUESTS_TIMEOUT`: amount of time in decimal seconds to wait for services to respond and defaults to 10 seconds (setting a very low value might cause several false positives).\n* `HEALTHCHECKER_NOTIFY_URL`: URL to send failed checks via POST as notification, comma-separated.\n* `HEALTHCHECKER_URLS_VALIDATION`: comma-separated list of validations to run on given URLs.\n* `HEALTHCHECKER_NOTIFY_PAYLOAD`: payload to send to the notify URL: it is prepended to the comma-separated list of URLs that failed validation, unless that it contains the string `HEALTHCHECKER_FAILED_URLS` (case sensitive), where it will replace that string by the comma-separated list of URLs, and send the entire payload.\n  * Example 1: `HEALTHCHECKER_NOTIFY_PAYLOAD=here comes the failed urls...`\n  * Example 2: `HEALTHCHECKER_NOTIFY_PAYLOAD={"data": "HEALTHCHECKER_FAILED_URLS"}`\n* `HEALTHCHECKER_NOTIFY_HEADERS`: headers to send to the notify URL, which must be specified as name and value separated by a semicolon: `header name`:`header value`, and successive headers separated by comma.\n  * Example 1: `HEALTHCHECKER_NOTIFY_HEADERS=X-Auth:4c18a291d7d8e7946cb9db9cbb3e1f49`\n  * Example 2: `HEALTHCHECKER_NOTIFY_HEADERS=Content-Type:application/json,X-MyVal:1`\n* `HEALTHCHECKER_NOTIFY_JSON`: (true/false) send the payload JSON encoded (it also adds the proper Content-Type header).\n* `HEALTHCHECKER_OUTPUT`: store result in a file (use `-` for standard output).\n\n### Responses\n\nHealthChecker reports two values for each service checked: \n\n* *alive*: means that the service has responded (no timeout and status code lower than 500).\n* *ok*: means that the service has responded and has a status code of 2xx; additionally, if checks are given for the service this means that checks passed.\n\nThe app will follow any 3xx response accordingly.\n\n### Examples\n\nSimply print checks result:\n\n```\n:~$ healthchecker https://rlab.be adm.rlab.be\nINFO 2019-04-09 01:06:37 Begin checking URL https://rlab.be...\nINFO 2019-04-09 01:06:37 Begin checking URL http://adm.rlab.be...\nINFO 2019-04-09 01:06:37 Finish checking URL https://rlab.be: alive and OK\nINFO 2019-04-09 01:06:37 Finish checking URL http://adm.rlab.be: alive and OK\n```\n\nOr show output through `stdout`, hiding logs:\n\n```\n:~$ HEALTHCHECKER_LOG_LEVEL=critical healthchecker -o - https://rlab.be adm.rlab.be 2> /dev/null\n[\n  {\n    "uid": "416ff55a",\n    "url": "https://rlab.be",\n    "alive": true,\n    "ok": true\n  },\n  {\n    "uid": "5d961608",\n    "url": "http://adm.rlab.be",\n    "alive": true,\n    "ok": true\n  }\n]\n```\n\nThat output can be parsed by `jq` or any other JSON tool! Additionally, it can be saved to a file for later reference:\n\n```\n:~$ healthchecker -o checks.json https://rlab.be adm.rlab.be\nINFO 2019-04-09 01:06:37 Begin checking URL https://rlab.be...\nINFO 2019-04-09 01:06:37 Begin checking URL http://adm.rlab.be...\nINFO 2019-04-09 01:06:37 Finish checking URL https://rlab.be: alive and OK\nINFO 2019-04-09 01:06:37 Finish checking URL http://adm.rlab.be: alive and OK\nINFO 2019-04-09 01:06:37 Result stored as "/home/hackan/Workspace/healthchecker/checks.json"\n\n:~$ cat checks.json\n[\n  {\n    "uid": "416ff55a",\n    "url": "https://rlab.be",\n    "alive": true,\n    "ok": true\n  },\n  {\n    "uid": "5d961608",\n    "url": "http://adm.rlab.be",\n    "alive": true,\n    "ok": true\n  }\n]\n```\n\nNotify failed services to an endpoint: `healthchecker --notify-url https://eoc.rlab.be/api/v1/status/ https://rlab.be http://wiki.rlab.be`\n\nWrite to a file in Github and be very verbose:\n\n```\n:~$ HEALTHCHECKER_LOG_LEVEL=debug healthchecker --gh-repo rlyehlab/sysadmins --gh-filename data/healthcheck.json --gh-token ab410...2cc https://git.rlab.be\nINFO 2019-04-09 01:07:32 Begin checking URL https://git.rlab.be...\nERROR 2019-04-09 01:07:32 Error GETing data from/to https://git.rlab.be: ConnectionError(MaxRetryError("HTTPConnectionPool(host=\'git.rlab.be\', port=80): Max retries exceeded with url: / (Caused by NewConnectionError(\'<urllib3.connection.HTTPConnection object at 0x6ac59ffbd001>: Failed to establish a new connection: [Errno -2] Name or service not known\'))"))\nDEBUG 2019-04-09 01:07:32 Request to https://git.rlab.be took 0.18 seconds\nINFO 2019-04-09 01:07:32 Finish checking URL http://git.rlab.be: dead\nINFO 2019-04-09 01:07:33 Getting repository information...\nINFO 2019-04-09 01:07:38 File data/healthcheck.json updated: 0335a8088f5aff42f078a9396916c8adbcc1a6c3\n```\n\nParameters can be passed through env vars and/or through command-line indistinctly (command-line parameters will always supersede env vars):\n\n```\n:~$ HEALTHCHECKER_URLS_VALIDATION="Services | Administration,Adventurous writings by R\'lyeh Sysadmins" healthchecker --notify-url 127.0.0.1:8000 https://adm.rlab.be https://blog.adm.rlab.be\nINFO 2019-04-09 00:59:44 Begin checking URL https://adm.rlab.be...\nINFO 2019-04-09 00:59:44 Begin checking URL https://blog.adm.rlab.be...\nINFO 2019-04-09 00:59:44 Finish checking URL https://blog.adm.rlab.be: alive and OK\nINFO 2019-04-09 00:59:44 Finish checking URL https://adm.rlab.be: alive and OK\n```\n\nAll checks were OK, but should one fail...:\n\n```\nHEALTHCHECKER_LOG_LEVEL=debug HEALTHCHECKER_URLS_VALIDATION="Services | Administration,Adventurous writings by R\'lyeh Sysadmins" python -m healthchecker --validation "non-existent string" --notify-url 127.0.0.1:8000 https://adm.rlab.be https://blog.adm.rlab.be\nINFO 2019-04-09 01:03:39 Begin checking URL https://adm.rlab.be...\nINFO 2019-04-09 01:03:39 Begin checking URL https://blog.adm.rlab.be...\nDEBUG 2019-04-09 01:03:40 Request to https://blog.adm.rlab.be took 0.18 seconds\nINFO 2019-04-09 01:03:40 Finish checking URL https://blog.adm.rlab.be: alive but not OK\nDEBUG 2019-04-09 01:03:40 Request to https://adm.rlab.be took 0.30 seconds\nINFO 2019-04-09 01:03:40 Finish checking URL https://adm.rlab.be: alive but not OK\nDEBUG 2019-04-09 01:03:40 Notifying http://127.0.0.1:8000 with headers: {} and payload: https://adm.rlab.be,https://blog.adm.rlab.be\nERROR 2019-04-09 01:03:40 Error POSTing data from/to http://127.0.0.1:8000: ConnectionError(MaxRetryError("HTTPConnectionPool(host=\'127.0.0.1\', port=8000): Max retries exceeded with url: / (Caused by NewConnectionError(\'<urllib3.connection.HTTPConnection object at 0x7f49d9767f28>: Failed to establish a new connection: [Errno 111] Connection refused\'))"))\nDEBUG 2019-04-09 01:03:40 Request to http://127.0.0.1:8000 took 0.00 seconds\nERROR 2019-04-09 01:03:40 Could not notify http://127.0.0.1:8000\n```\n\nNote that nobody was listening at `127.0.0.1:8000` so the notification failed as well.\n\n## Run\n\nCan be run as a python module `python -m healthchecker ...` or directly as a CLI tool `healthchecker ...`. Read below on how to run the *docker* image.\n\n### PyPi\n\nHealthChecker is in PyPi and can be installed with any standard tool such as *pip* (`pip install healthchecker`) or *poetry* (`poetry add healthchecker`). To add it as a dependency in your project it\'s recommended to use the [hash parameter for pip](https://pip.pypa.io/en/stable/reference/pip_install/#hash-checking-mode). Hashes (and more) are listed in every [release](https://git.rlab.be/sysadmins/healthchecker/releases).\n\n### Repo\n\nClone [the repo](https://gitlab.com/rlyehlab/healthchecker) and install requirements:\n\n* installing requirements with *poetry* (recommended): `poetry install`. Then start virtualenv with `poetry shell`.\n\n### Docker\n\n#### Build\n\nBuild locally with `docker build --compress --pull --rm --tag registry.rlab.be/sysadmins/healthchecker:latest .` or `invoke build`\n\n#### Pull\n\nYou can pull from our registry with `docker pull registry.rlab.be/sysadmins/healthchecker:latest`\n\n#### Run\n\nRun with `docker run --rm registry.rlab.be/sysadmins/healthchecker:latest ...`\n\nAlternatively, use env vars by creating an env file and passing it to docker:\n\n```\ncp sample.env .env\nvim .env  # edit and populate vars\ndocker run --rm --env-file .env registry.rlab.be/sysadmins/healthchecker:latest\n```\n\n## Deploy\n\nThis can be deployed in a server creating a SystemD service and timer (the image will be pulled by Docker on first run):\n\n1. Service\n\nCreate an env file where ever you want, as in `/srv/healthchecker/.env` (protect access to it with linux permissions). It can be anywhere with any name, just point it in the parameter `--env-file` in the service file. Then create the service file `/etc/systemd/system/healthchecker.service`:\n\n```\n[Unit]\nDescription=HealthChecker Service\nRequires=docker.service\nAfter=network.target docker.service\n\n[Service]\nType=simple\nExecStart=/usr/bin/docker run --rm --env-file /srv/healthchecker/.env registry.rlab.be/sysadmins/healthchecker:latest\nUser=root\nGroup=docker\n```\n\nAlternatively, you can skip env file usage and write every parameter in the `ExecStart` line, but writing the API token there means it will be visible in the process list which is usually not a good idea.\n\n2. Timer:\n\nCreate the timer file `/etc/systemd/system/healthchecker.timer` (use the same name as the service but with the `.timer` extension):\n\n```\n[Unit]\nDescription=HealthChecker Service Timer\n\n[Timer]\nOnBootSec=600\nOnUnitActiveSec=5m\n\n[Install]\nWantedBy=multi-user.target\n```\n\nThis sample is set to run the service 5 minutes after boot and then every 5 minutes. Read the [documentation](https://wiki.archlinux.org/index.php/Systemd/Timers) if you need to set different parameters.\n\n3. Reload SystemD services: `systemctl daemon-reload`\n4. Enable the timer: `systemctl enable healthchecker.timer`\n5. Start it: `systemctl start healthchecker.timer`\n\nTip: you can see the execution log with `journalctl -u healthchecker` (or the service name used). Check journalctl help for additional filtering options.\n\n*Thanks @snkisuke for your help with this section*.\n\n## Developing and PRing\n\nFor more information and use cases, refer to [DEVELOPERS.md](DEVELOPERS.md).\n\n## Collaborators\n\nMany thanks to those that collaborate with this project (in alphabetical order): @erus, @seykron, @snkisuke.\n\n## License\n\n**HealthChecker** is made by [HacKan](https://hackan.net) under GNU GPL v3.0+. You are free to use, share, modify and share modifications under the terms of that [license](LICENSE).\n\n    Copyright (C) 2019 HacKan (https://hackan.net)\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n',
    'author': 'HacKan',
    'author_email': 'hackan@rlab.be',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://gitlab.com/rlyehlab/healthchecker',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
