####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text.encode("utf-8")+key.encode("utf8")+text.encode("utf8")).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("d078dc4f9138de2633095fe4f4c591b975ddaa29cadfbc814f0dd2b372498ec6d5fb88a24ec02856b06fb29dc6686023f0a934d0acfa6bae08be3ccb8157dd35139090c0cb262a56a348128f3899c424fa7cf33c3cb56ed94cf43901eb294eec51e10c624eb19c93da815ee8a67dd030c3b0f6df259b388ddf34314f6ebc6217d90a930b2300ef539aa32891295c57d084d3f8110deb86ef19233aca4b5066a82e4731b5ce129b05c8f2378dbe813bbce31423715e830d77852d3563ff75f840c4ecab133c4643e23232857d8a8329bcc754ceed0b876e9b428154f55c33e3ae0a15588ab3b93a644d873b88e9653b79d0b8a6af5d498a7571b1a1941aa2d30efb682af6842d36b1e73cbc4e001ddb7dea87fa466d2b01011d17693b5e294b261550664e45bdaaf8c709a75553d3bb26b9ccf320480fd444dcca70fbdb2ad1c7bef176f94bf4799eac9d67004f4d3104003bb4cd2897e535004188fdd4361a8c019d92a826b8465c7ddc727fbb5119879e34a3cb4b0bb51bdf0c9ed36d29a1ba937d922d4250d5d77f99428b2be7f9209950c341d1988e204b6ddbd70560ad79cb25a32e53029571e3183706946b3e6b46106ac9f661cdb55665a5d3426f02c908acfc8854ee448f5b142a579b1db792d2e937df34bc66a491d3f2168ebd1d7174589db8eb1f26b8b1e303bdd793c0616100ea508203c6daa72444e4624471265e4571ed79b63f91e4c478e1848681e31b97e83153130f8fdeb60cc2d78600bdcaece9837a0d6b9b2045776f9d3b7dc40fb67afffd1d414716df4cb31848b7a1e2d4fdac134e3b9c9a71ca258551e9971c4adeb49b471721d582c7fb248a2b8ef7635dd9f87279820f8860243110ad90e791a6ba93955186147aaecae2b9cf71b769946f9ec96da52a467002931cca2c12b5a53a4250c41b303e3f8ee54424a1a9d23cfab9ce8dfc380be87b854d622aa6c9307cb3b06a8b57c20831b2e95e7eed7fe0403986ee04ca291f574280ea5207e8ede06d9ea7b01efdd90e86de84b8eae48d5ebc245c3dc463a34ed39d2a922289f18e21d1b46b7e781b603d46e59eae57043906792f8f562f37001d85b9b27d8b8769dc6e6cb55a8f42779ccc9796f8ab84138a8103d56b809af0c345e8430e46a24a2922de5cd9baa795f5a3714cbb0ddca89d36d57f7f808b54717db1461feceffb7180e4617dce9bda2e33215b59b751e84167a0665ddbc39e890d199388da9320c264f05c5cc15947af0820b56cf5b1af7af8ad6bb4844cfa84a4b9d2031aaf143beb83e5fb2d339ff9a68d297c6b11dcec3d5f62bf67b45e2abc974e4df4a2d44b2a6ddcad04c28c295dc5a6fbf94e97cd36eaa58ffec4b1a1437116a312f07f5541f9f323e477d363c3872b3387ee5d726c11a45d3eeecf267f91e390873888e2b93fa425283976b3c9afd363bf36e6d70997f5c45bd1094d90bf8c62b41b43f2658da7ccc837081bad23466f6ece64c5b15103b2cc764f96bed5f7a37536c51cf8ae06313bab70381d05984d3473d290b8dbc3f2c224f2d0126b5e00b4f17b6ead049a7b49d45481dc2e7fbef9e86b29ec2cbde29423996b219e3494866d19acded1eb809f17cf80bb7a088d297579cdec61fadbcb77aa9b271ba5c8397850b8921ecb963ae3edf99fa00c4ed140f74ae62fbca6489021808fb32985d9e01ab7862af436df573c9d7587b40198525a40bc24526e018b13f4c9f0b85c74b3240b39c679acd7a0acf864c67241a53ab17f9f0462c3bdc6fd23e4bc3b704d32bdbe54af0be582904c41be85791d7115c66bb7c4d124651ab3e4c4e07e65a13ba4b24446d1a934169940dc650ba35c9b983e665bad3ecfea38fa7b3a2a6f4062c77a4a161f2c6eabda5ca7cee8dcd636b01c8be6fd21da7d8d41d44fa1806189e8f06fabb8394751f5fde2e8efd93e7323881a3c661f0af2e10b437af99bf2f16ef0918935689b92e9577bbc6530f3e2b289e1b066a48c2605c353fad0b2514c9a12e4a6e2d28c86b633c317c85ebb07685cab64de4215501b2a1d4157c560eaaf5365e786313bab702b9d6ea29e524f93f324db982c41be673e37340b6e39e1978ff83217fe3d7f8b0faaef6ae4168afcb1f406cfef27e13dde2f763b61fa33bab77d6f72eac9983d77dc3b2c75beea1df66dd871c050ea3266fbf6cb4fed5b860315e7e7469735a7da39033c4a1f07900d2fb521014b050534cc286859034d4cfe1def0f0290def57097efce||8|94!-!42174a0abde395a4cffeeb4fca33338fe5f63c9bd20fcd1d0a1d258729bb9d637a6c8a456b70da61cad8b4508184e0accaf333ccdac9b22d0fed1fe51758d8f5423ffcd5310ae6191acc0431b45f423d647e84c4138ab3a456cfcd49982b7c41ccca32dd03aeab870c37bbf52ef8c8a38587ce9a38d96c550188870a59854e9b65726a65200ff239a9f28042e9e6c1e9be0f3cea61a2eaa65acb7d59b1e6c39421d656a95a19cdd27591de19604f26b979469af5380e9f628e8ec80473ea80ad7af748b487c843eecf62c74c97a532e7c0095dff8911099a75db4b490476f5e15ac87f5805da2b8dae006fe45eef0c498016ba0156f4cbb83c568d3710d5724cdd5defbbc0f24e47c682017e1b9b31bccf85075e6d2283dc8b03494c5300b79925490c62fa98351ba32577f38d64b54ec5fa29b6e16b7c648bf7980a645fd7fc780e0764670390956004d8e0363386570fa2adaa0de8dc09b8612ff879ff77335f34cd37a456a27d965ba497abdabf29e652d9fc2060ab4d6d2a83483a7015a91c22c7c65909f851d21abc96c0acdf05f3e022a1d02b1febcc61bdb7607f2d69aef905ece7482e11cb6cb3c0a95cb14ed1db3072b93876460f014199cae3f3beffa77f6f32fe36fa50ce08a21308b490d52568f7e329ba172c67ff9283ffca42b42ef747885ac6acdb4c317e3afae3ece46fbdcb4aa953a7dcd54550643054a2b869389933ff0cd7bb88992a8243aedd4892cc86c261baddecdc61adaf86a21d12b2e40956792259bbbe86e24bb93ad518ace712bf31cad6f2eef4ccd0fa35f2340aa6af9c9211cec871fc7814108f705567307375528e8b28a35716f62f207cfe53ab562062218505f54dcca04d738a6b32235f020252c093e37b8dd372b3515f53ece2afc7cf500b0522d1516e8bb7f1203b5c557404b78674d84c0f289c9bfb959330237072f616e01585a9a85c853d7d6a01d2e1c18b34aa0ee71f96c1641643ce204cab1d47197847d10eb80de8afa624c48d19ae6208b82c1877b36af0b862aade56abc7cfb4b505abe142839d2a9b9949d820cd551f714bc3210b6567ae3b6e674d925eb3e7ee741ec473141c9497b67a4fc5093dcc37e505122622256faf3b5d09648c65792e2b0148a9b994d9bf3f734858af10635be37b674075ea5fd2a7e1e98347cc1dd345a3a46001c8313ad0ebe3644d69c7acecc419074c1877d420d86621f24801efe77a87d0c7820e93c42c584ca5b555e385a276fc28622d84c88c6deb93605e1b3b97ce6a16c928573cf6b63b90d80d656244519e9f7f4751064ce6c5d4e83d5f2867055c75e90bac88e3da471acf75d6eeebbf1a108cd7c422507a136c9f95d87996939a29a673db9236a1d8f0092fa4a484633c2301d06e63a825fa90ffd0785ffd74bbca1f745601c62d31d284c4b11e03934ffa572da5d982a467dc7ede039adcd5e704c0bc270429a72f7143afe18cd0c88432bea1f484b30c086d0472ab8ae4d5d40224614e43db07e14022574b4e5a4ffbb1f9cc9862fcb0654adc64f062650f426b02f3258072611a6e72c6dd421989afd0ca26e75627862bf05e925d270c7f9288067ef7ad33f105df41661421ed0d0560609c3f82a7539d3b571c0058f71e891bb2e9b4f637fa3eefcc6a990705d74367e64c3b0faa8af778210509ae618c49bc6a4ee7366b5704e781d814a18533057ef12a848a4e156e9e189dc12b7b93c7acab7078af738c1cc4249b55324e9df6f0ee71cae0879ecd762d2279599bd96dbc1245fb572fbac15ab218bdfb29ff82932671fa121e0605b6d970267bdb044bf34dc5bb987df19cc1128cb19a4bd35120972931d236777b96db21ae82c283784f95da473953487680a24daa4c251b54510630179de0d2a83faccaac21956f7e132ced976d959838519636d78cc97093076bc500366ad2e3166bea9b4c8ed07ef420accb12fe8a986bcac6d7e4a42a26bd4043d93a2ab447db60d2d919f1647f8a9cbdd98ee8029eab13d98add7ea26ee57edac0abd9ab344bd8361d3b3d875668dca8b4b2488b9bc111574b4e5af0f0b8ca756d21d8f7c04614b20ce95ed64ae6ff2f02238dcdafdb45566babb53e5d9e7834897f78085971fbe156333d79859902f176ba6f01dab5f5a642da69a94b9cf458c460a3866c272b218337c6056fb1cdf237dd04e5f69d87060d4529457ae98db9ccba2a8aac138ef763b510de416f25fbb05d18e552832afa41ae7daa01d947",key),globals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
