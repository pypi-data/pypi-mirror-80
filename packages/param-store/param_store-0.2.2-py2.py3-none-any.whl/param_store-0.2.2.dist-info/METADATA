Metadata-Version: 2.1
Name: param-store
Version: 0.2.2
Summary: Parameter store for secrets
Home-page: https://github.com/labd/python-param-store
Author: Lab Digital B.V.
Author-email: opensource@labdigital.nl
License: MIT
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 1.7
Classifier: Framework :: Django :: 1.8
Classifier: Framework :: Django :: 1.9
Classifier: Framework :: Django :: 1.10
Classifier: Framework :: Django :: 1.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Requires-Dist: boto3
Requires-Dist: six (>=1.1)
Provides-Extra: docs
Requires-Dist: sphinx (>=1.4.0) ; extra == 'docs'
Provides-Extra: test
Requires-Dist: coverage (==5.3) ; extra == 'test'
Requires-Dist: pytest (==3.0.5) ; extra == 'test'
Requires-Dist: moto (==1.3.16) ; extra == 'test'
Requires-Dist: mock ; extra == 'test'
Requires-Dist: django-environ (<0.4.2) ; extra == 'test'
Requires-Dist: isort (==4.2.5) ; extra == 'test'
Requires-Dist: flake8 (==3.0.3) ; extra == 'test'
Requires-Dist: flake8-blind-except (==0.1.1) ; extra == 'test'
Requires-Dist: flake8-debugger (==1.4.0) ; extra == 'test'
Requires-Dist: flake8-imports (==0.1.1) ; extra == 'test'

===========
param-store
===========

param-store works with parameter stores (e.g. EC2 Parameter Store) to resolve specific parameters.
It is designed to be pluggable so that stores can be created for e.g. Vault or Azure Key Vault.

A use-case is to store secrets in the EC2 parameter store and resolve them automatically.




Installation
============

.. code-block:: shell

   pip install param-store


Usage
=====

As a standalone package

.. code-block:: python

    from param_store import EC2ParameterStore
    from param_store import interpolate_dict

    data = {
        'key': 'my-secret-{{ parameter-1 }}'
    }

    store = EC2ParameterStore()
    result = interpolate_dict(data, store)
    assert result[key] == 'my-secret-password'


In combination with django-environ

.. code-block:: python

    from environ import Env
    from param_store import EC2ParameterStore
    from param_store.contrib import resolve_django_environ

    env = Env()
    store = EC2ParameterStore()
    resolve_django_environ(env, store)


