[MASTER]

# Specify a configuration file.
rcfile=.pylintrc

# Pickle collected data for later comparisons.
persistent=no

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=saltpylint.pep8,
  saltpylint.pep263,
  saltpylint.strings,
  saltpylint.fileperms,
  saltpylint.py3modernize,
  saltpylint.smartup,
  saltpylint.minpyver


# Fileperms Lint Plugin Settings
fileperms-default = 0644
fileperms-ignore-paths = setup.py


# Py3 Modernize PyLint Plugin Settings
modernize-nofix = libmodernize.fixes.fix_dict_six


# Minimum Python Version To Enforce
minimum-python-version = 3.4


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence=

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time. See also the "--disable" option for examples.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"
#disable=
disable=R,
  I0011,
  I0012,
  I0013,
  E1101,
  E1103,
  C0102,
  C0103,
  C0111,
  C0203,
  C0204,
  C0301,
  C0302,
  C0330,
  W0110,
  W0122,
  W0142,
  W0201,
  W0212,
  W0404,
  W0511,
  W0603,
  W0612,
  W0613,
  W0621,
  W0622,
  W0631,
  W0704,
  W1202,
  W1307,
  F0220,
  F0401,
  E8501,
  E8116,
  E8121,
  E8122,
  E8123,
  E8124,
  E8125,
  E8126,
  E8127,
  E8128,
  E8129,
  E8131,
  E8265,
  E8266,
  E8402,
  E8731

# Disabled:
# R* [refactoring suggestions & reports]
# I0011 (locally-disabling)
# I0012 (locally-enabling)
# I0013 (file-ignored)
# E1101 (no-member) [pylint isn't smart enough]
# E1103 (maybe-no-member)
# C0102 (blacklisted-name) [because it activates C0103 too]
# C0103 (invalid-name)
# C0111 (missing-docstring)
# C0203 (bad-mcs-method-argument)
# C0204 (bad-mcs-classmethod-argument)
# C0301 (line-too-long)
# C0302 (too-many-lines)
# C0330 (bad-continuation)
# W0110 (deprecated-lambda)
# W0122 (exec-statement)
# W0142 (star-args)
# W0201 (attribute-defined-outside-init) [done in several places in the codebase]
# W0212 (protected-access)
# W0404 (reimported) [done intentionally for legit reasons]
# W0511 (fixme) [several outstanding instances currently in the codebase]
# W0603 (global-statement)
# W0612 (unused-variable) [unused return values]
# W0613 (unused-argument)
# W0621 (redefined-outer-name)
# W0622 (redefined-builtin) [many parameter names shadow builtins]
# W0631 (undefined-loop-variable) [~3 instances, seem to be okay]
# W0704 (pointless-except) [misnomer; "ignores the exception" rather than "pointless"]
# F0220 (unresolved-interface)
# F0401 (import-error)
# W1202 (logging-format-interpolation) Use % formatting in logging functions but pass the % parameters as arguments
# W1307 (invalid-format-index) Using invalid lookup key '%s' in format specifier "0['%s']"
#
# E8116 PEP8 E116: unexpected indentation (comment)
# E812* All PEP8 E12*
# E8265 PEP8 E265 - block comment should start with "# "
# E8266 PEP8 E266 - too many leading '#' for block comment
# E8501 PEP8 line too long
# E8402 module level import not at top of file
# E8731 do not assign a lambda expression, use a def


[REPORTS]

# Tells whether to display a full report or only the messages
reports=no

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
msg-template='{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}'
