#ifndef __SYSCALLS2_EXT_H__
#define __SYSCALLS2_EXT_H__
/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 *
 * Note: Function pointers for API calls are declared as extern.
 * The definition of the pointers is guarded by the PLUGIN_MAIN macro.
 * This plugin is defined only for the compilation unit matching the
 * name of the plugin.
 * This allows us to initialize API function pointers once, in the main
 * compilation unit, rather than in every compilation unit.
 */
#include <dlfcn.h>
#include "panda/plugin.h"

typedef const syscall_info_t *(*get_syscall_info_t)(uint32_t callno);
extern get_syscall_info_t __get_syscall_info;
#ifdef PLUGIN_MAIN
get_syscall_info_t __get_syscall_info = NULL;
#endif
static inline const syscall_info_t * get_syscall_info(uint32_t callno);
static inline const syscall_info_t * get_syscall_info(uint32_t callno) {
    assert(__get_syscall_info);
    return __get_syscall_info(callno);
}

typedef const syscall_meta_t *(*get_syscall_meta_t)(void);
extern get_syscall_meta_t __get_syscall_meta;
#ifdef PLUGIN_MAIN
get_syscall_meta_t __get_syscall_meta = NULL;
#endif
static inline const syscall_meta_t * get_syscall_meta(void);
static inline const syscall_meta_t * get_syscall_meta(void) {
    assert(__get_syscall_meta);
    return __get_syscall_meta();
}

typedef target_long(*get_syscall_retval_t)(CPUState *cpu);
extern get_syscall_retval_t __get_syscall_retval;
#ifdef PLUGIN_MAIN
get_syscall_retval_t __get_syscall_retval = NULL;
#endif
static inline target_long get_syscall_retval(CPUState *cpu);
static inline target_long get_syscall_retval(CPUState *cpu) {
    assert(__get_syscall_retval);
    return __get_syscall_retval(cpu);
}

bool init_syscalls2_api(void);

#ifdef PLUGIN_MAIN
#define API_PLUGIN_NAME "syscalls2"
#define IMPORT_PPP(module, func_name) { \
    __##func_name = (func_name##_t) dlsym(module, #func_name); \
    char *err = dlerror(); \
    if (err) { \
        printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
        printf("Error: %s\n", err); \
        return false; \
    } \
}
bool init_syscalls2_api(void) {
    void *module = panda_get_plugin_by_name(API_PLUGIN_NAME);
    if (!module) {
        fprintf(stderr, "Couldn't load %s plugin: %s\n", API_PLUGIN_NAME, dlerror());
        return false;
    }
    IMPORT_PPP(module, get_syscall_info)
    IMPORT_PPP(module, get_syscall_meta)
    IMPORT_PPP(module, get_syscall_retval)
    return true;
}
#undef API_PLUGIN_NAME
#undef IMPORT_PPP
#endif

#endif
