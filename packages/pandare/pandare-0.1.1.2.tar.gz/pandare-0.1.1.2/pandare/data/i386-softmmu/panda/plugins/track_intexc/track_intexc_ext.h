#ifndef __TRACK_INTEXC_EXT_H__
#define __TRACK_INTEXC_EXT_H__
/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 *
 * Note: Function pointers for API calls are declared as extern.
 * The definition of the pointers is guarded by the PLUGIN_MAIN macro.
 * This plugin is defined only for the compilation unit matching the
 * name of the plugin.
 * This allows us to initialize API function pointers once, in the main
 * compilation unit, rather than in every compilation unit.
 */
#include <dlfcn.h>
#include "panda/plugin.h"

typedef bool(*check_in_interrupt_t)(void);
extern check_in_interrupt_t __check_in_interrupt;
#ifdef PLUGIN_MAIN
check_in_interrupt_t __check_in_interrupt = NULL;
#endif
static inline bool check_in_interrupt(void);
static inline bool check_in_interrupt(void) {
    assert(__check_in_interrupt);
    return __check_in_interrupt();
}

typedef bool(*check_in_exception_t)(void);
extern check_in_exception_t __check_in_exception;
#ifdef PLUGIN_MAIN
check_in_exception_t __check_in_exception = NULL;
#endif
static inline bool check_in_exception(void);
static inline bool check_in_exception(void) {
    assert(__check_in_exception);
    return __check_in_exception();
}

bool init_track_intexc_api(void);

#ifdef PLUGIN_MAIN
#define API_PLUGIN_NAME "track_intexc"
#define IMPORT_PPP(module, func_name) { \
    __##func_name = (func_name##_t) dlsym(module, #func_name); \
    char *err = dlerror(); \
    if (err) { \
        printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
        printf("Error: %s\n", err); \
        return false; \
    } \
}
bool init_track_intexc_api(void) {
    void *module = panda_get_plugin_by_name(API_PLUGIN_NAME);
    if (!module) {
        fprintf(stderr, "Couldn't load %s plugin: %s\n", API_PLUGIN_NAME, dlerror());
        return false;
    }
    IMPORT_PPP(module, check_in_interrupt)
    IMPORT_PPP(module, check_in_exception)
    return true;
}
#undef API_PLUGIN_NAME
#undef IMPORT_PPP
#endif

#endif
