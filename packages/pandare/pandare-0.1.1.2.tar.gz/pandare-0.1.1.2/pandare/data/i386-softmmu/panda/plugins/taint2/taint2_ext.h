#ifndef __TAINT2_EXT_H__
#define __TAINT2_EXT_H__
/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 *
 * Note: Function pointers for API calls are declared as extern.
 * The definition of the pointers is guarded by the PLUGIN_MAIN macro.
 * This plugin is defined only for the compilation unit matching the
 * name of the plugin.
 * This allows us to initialize API function pointers once, in the main
 * compilation unit, rather than in every compilation unit.
 */
#include <dlfcn.h>
#include "panda/plugin.h"

typedef void(*taint2_enable_taint_t)(void);
extern taint2_enable_taint_t __taint2_enable_taint;
#ifdef PLUGIN_MAIN
taint2_enable_taint_t __taint2_enable_taint = NULL;
#endif
static inline void taint2_enable_taint(void);
static inline void taint2_enable_taint(void) {
    assert(__taint2_enable_taint);
    return __taint2_enable_taint();
}

typedef void(*taint2_enable_tainted_pointer_t)(void);
extern taint2_enable_tainted_pointer_t __taint2_enable_tainted_pointer;
#ifdef PLUGIN_MAIN
taint2_enable_tainted_pointer_t __taint2_enable_tainted_pointer = NULL;
#endif
static inline void taint2_enable_tainted_pointer(void);
static inline void taint2_enable_tainted_pointer(void) {
    assert(__taint2_enable_tainted_pointer);
    return __taint2_enable_tainted_pointer();
}

typedef int(*taint2_enabled_t)(void);
extern taint2_enabled_t __taint2_enabled;
#ifdef PLUGIN_MAIN
taint2_enabled_t __taint2_enabled = NULL;
#endif
static inline int taint2_enabled(void);
static inline int taint2_enabled(void) {
    assert(__taint2_enabled);
    return __taint2_enabled();
}

typedef void(*taint2_label_addr_t)(Addr a, int offset, uint32_t l);
extern taint2_label_addr_t __taint2_label_addr;
#ifdef PLUGIN_MAIN
taint2_label_addr_t __taint2_label_addr = NULL;
#endif
static inline void taint2_label_addr(Addr a, int offset, uint32_t l);
static inline void taint2_label_addr(Addr a, int offset, uint32_t l) {
    assert(__taint2_label_addr);
    return __taint2_label_addr(a,offset,l);
}

typedef void(*taint2_label_ram_t)(uint64_t RamOffset, uint32_t l);
extern taint2_label_ram_t __taint2_label_ram;
#ifdef PLUGIN_MAIN
taint2_label_ram_t __taint2_label_ram = NULL;
#endif
static inline void taint2_label_ram(uint64_t RamOffset, uint32_t l);
static inline void taint2_label_ram(uint64_t RamOffset, uint32_t l) {
    assert(__taint2_label_ram);
    return __taint2_label_ram(RamOffset,l);
}

typedef void(*taint2_label_reg_t)(int reg_num, int offset, uint32_t l);
extern taint2_label_reg_t __taint2_label_reg;
#ifdef PLUGIN_MAIN
taint2_label_reg_t __taint2_label_reg = NULL;
#endif
static inline void taint2_label_reg(int reg_num, int offset, uint32_t l);
static inline void taint2_label_reg(int reg_num, int offset, uint32_t l) {
    assert(__taint2_label_reg);
    return __taint2_label_reg(reg_num,offset,l);
}

typedef void(*taint2_label_io_t)(uint64_t ia, uint32_t l);
extern taint2_label_io_t __taint2_label_io;
#ifdef PLUGIN_MAIN
taint2_label_io_t __taint2_label_io = NULL;
#endif
static inline void taint2_label_io(uint64_t ia, uint32_t l);
static inline void taint2_label_io(uint64_t ia, uint32_t l) {
    assert(__taint2_label_io);
    return __taint2_label_io(ia,l);
}

typedef void(*taint2_label_ram_additive_t)(uint64_t RamOffset, uint32_t l);
extern taint2_label_ram_additive_t __taint2_label_ram_additive;
#ifdef PLUGIN_MAIN
taint2_label_ram_additive_t __taint2_label_ram_additive = NULL;
#endif
static inline void taint2_label_ram_additive(uint64_t RamOffset, uint32_t l);
static inline void taint2_label_ram_additive(uint64_t RamOffset, uint32_t l) {
    assert(__taint2_label_ram_additive);
    return __taint2_label_ram_additive(RamOffset,l);
}

typedef void(*taint2_label_reg_additive_t)(int reg_num, int offset, uint32_t l);
extern taint2_label_reg_additive_t __taint2_label_reg_additive;
#ifdef PLUGIN_MAIN
taint2_label_reg_additive_t __taint2_label_reg_additive = NULL;
#endif
static inline void taint2_label_reg_additive(int reg_num, int offset, uint32_t l);
static inline void taint2_label_reg_additive(int reg_num, int offset, uint32_t l) {
    assert(__taint2_label_reg_additive);
    return __taint2_label_reg_additive(reg_num,offset,l);
}

typedef void(*taint2_label_io_additive_t)(uint64_t ia, uint32_t l);
extern taint2_label_io_additive_t __taint2_label_io_additive;
#ifdef PLUGIN_MAIN
taint2_label_io_additive_t __taint2_label_io_additive = NULL;
#endif
static inline void taint2_label_io_additive(uint64_t ia, uint32_t l);
static inline void taint2_label_io_additive(uint64_t ia, uint32_t l) {
    assert(__taint2_label_io_additive);
    return __taint2_label_io_additive(ia,l);
}

typedef uint32_t(*taint2_query_t)(Addr a);
extern taint2_query_t __taint2_query;
#ifdef PLUGIN_MAIN
taint2_query_t __taint2_query = NULL;
#endif
static inline uint32_t taint2_query(Addr a);
static inline uint32_t taint2_query(Addr a) {
    assert(__taint2_query);
    return __taint2_query(a);
}

typedef uint32_t(*taint2_query_ram_t)(uint64_t RamOffset);
extern taint2_query_ram_t __taint2_query_ram;
#ifdef PLUGIN_MAIN
taint2_query_ram_t __taint2_query_ram = NULL;
#endif
static inline uint32_t taint2_query_ram(uint64_t RamOffset);
static inline uint32_t taint2_query_ram(uint64_t RamOffset) {
    assert(__taint2_query_ram);
    return __taint2_query_ram(RamOffset);
}

typedef uint32_t(*taint2_query_reg_t)(int reg_num, int offset);
extern taint2_query_reg_t __taint2_query_reg;
#ifdef PLUGIN_MAIN
taint2_query_reg_t __taint2_query_reg = NULL;
#endif
static inline uint32_t taint2_query_reg(int reg_num, int offset);
static inline uint32_t taint2_query_reg(int reg_num, int offset) {
    assert(__taint2_query_reg);
    return __taint2_query_reg(reg_num,offset);
}

typedef uint32_t(*taint2_query_io_t)(uint64_t ia);
extern taint2_query_io_t __taint2_query_io;
#ifdef PLUGIN_MAIN
taint2_query_io_t __taint2_query_io = NULL;
#endif
static inline uint32_t taint2_query_io(uint64_t ia);
static inline uint32_t taint2_query_io(uint64_t ia) {
    assert(__taint2_query_io);
    return __taint2_query_io(ia);
}

typedef uint32_t(*taint2_query_laddr_t)(uint64_t ia, uint64_t offset);
extern taint2_query_laddr_t __taint2_query_laddr;
#ifdef PLUGIN_MAIN
taint2_query_laddr_t __taint2_query_laddr = NULL;
#endif
static inline uint32_t taint2_query_laddr(uint64_t ia, uint64_t offset);
static inline uint32_t taint2_query_laddr(uint64_t ia, uint64_t offset) {
    assert(__taint2_query_laddr);
    return __taint2_query_laddr(ia,offset);
}

typedef uint32_t(*taint2_query_set_a_t)(Addr a, uint32_t **out, uint32_t *outsz);
extern taint2_query_set_a_t __taint2_query_set_a;
#ifdef PLUGIN_MAIN
taint2_query_set_a_t __taint2_query_set_a = NULL;
#endif
static inline uint32_t taint2_query_set_a(Addr a, uint32_t **out, uint32_t *outsz);
static inline uint32_t taint2_query_set_a(Addr a, uint32_t **out, uint32_t *outsz) {
    assert(__taint2_query_set_a);
    return __taint2_query_set_a(a,out,outsz);
}

typedef void(*taint2_query_set_t)(Addr a, uint32_t *out);
extern taint2_query_set_t __taint2_query_set;
#ifdef PLUGIN_MAIN
taint2_query_set_t __taint2_query_set = NULL;
#endif
static inline void taint2_query_set(Addr a, uint32_t *out);
static inline void taint2_query_set(Addr a, uint32_t *out) {
    assert(__taint2_query_set);
    return __taint2_query_set(a,out);
}

typedef void(*taint2_query_set_ram_t)(uint64_t RamOffset, uint32_t *out);
extern taint2_query_set_ram_t __taint2_query_set_ram;
#ifdef PLUGIN_MAIN
taint2_query_set_ram_t __taint2_query_set_ram = NULL;
#endif
static inline void taint2_query_set_ram(uint64_t RamOffset, uint32_t *out);
static inline void taint2_query_set_ram(uint64_t RamOffset, uint32_t *out) {
    assert(__taint2_query_set_ram);
    return __taint2_query_set_ram(RamOffset,out);
}

typedef void(*taint2_query_set_reg_t)(int reg_num, int offset, uint32_t *out);
extern taint2_query_set_reg_t __taint2_query_set_reg;
#ifdef PLUGIN_MAIN
taint2_query_set_reg_t __taint2_query_set_reg = NULL;
#endif
static inline void taint2_query_set_reg(int reg_num, int offset, uint32_t *out);
static inline void taint2_query_set_reg(int reg_num, int offset, uint32_t *out) {
    assert(__taint2_query_set_reg);
    return __taint2_query_set_reg(reg_num,offset,out);
}

typedef void(*taint2_query_set_io_t)(uint64_t ia, uint32_t *out);
extern taint2_query_set_io_t __taint2_query_set_io;
#ifdef PLUGIN_MAIN
taint2_query_set_io_t __taint2_query_set_io = NULL;
#endif
static inline void taint2_query_set_io(uint64_t ia, uint32_t *out);
static inline void taint2_query_set_io(uint64_t ia, uint32_t *out) {
    assert(__taint2_query_set_io);
    return __taint2_query_set_io(ia,out);
}

typedef uint32_t(*taint2_query_tcn_t)(Addr a);
extern taint2_query_tcn_t __taint2_query_tcn;
#ifdef PLUGIN_MAIN
taint2_query_tcn_t __taint2_query_tcn = NULL;
#endif
static inline uint32_t taint2_query_tcn(Addr a);
static inline uint32_t taint2_query_tcn(Addr a) {
    assert(__taint2_query_tcn);
    return __taint2_query_tcn(a);
}

typedef uint32_t(*taint2_query_tcn_ram_t)(uint64_t RamOffset);
extern taint2_query_tcn_ram_t __taint2_query_tcn_ram;
#ifdef PLUGIN_MAIN
taint2_query_tcn_ram_t __taint2_query_tcn_ram = NULL;
#endif
static inline uint32_t taint2_query_tcn_ram(uint64_t RamOffset);
static inline uint32_t taint2_query_tcn_ram(uint64_t RamOffset) {
    assert(__taint2_query_tcn_ram);
    return __taint2_query_tcn_ram(RamOffset);
}

typedef uint32_t(*taint2_query_tcn_reg_t)(int reg_num, int offset);
extern taint2_query_tcn_reg_t __taint2_query_tcn_reg;
#ifdef PLUGIN_MAIN
taint2_query_tcn_reg_t __taint2_query_tcn_reg = NULL;
#endif
static inline uint32_t taint2_query_tcn_reg(int reg_num, int offset);
static inline uint32_t taint2_query_tcn_reg(int reg_num, int offset) {
    assert(__taint2_query_tcn_reg);
    return __taint2_query_tcn_reg(reg_num,offset);
}

typedef uint32_t(*taint2_query_tcn_io_t)(uint64_t ia);
extern taint2_query_tcn_io_t __taint2_query_tcn_io;
#ifdef PLUGIN_MAIN
taint2_query_tcn_io_t __taint2_query_tcn_io = NULL;
#endif
static inline uint32_t taint2_query_tcn_io(uint64_t ia);
static inline uint32_t taint2_query_tcn_io(uint64_t ia) {
    assert(__taint2_query_tcn_io);
    return __taint2_query_tcn_io(ia);
}

typedef uint64_t(*taint2_query_cb_mask_t)(Addr a, uint8_t size);
extern taint2_query_cb_mask_t __taint2_query_cb_mask;
#ifdef PLUGIN_MAIN
taint2_query_cb_mask_t __taint2_query_cb_mask = NULL;
#endif
static inline uint64_t taint2_query_cb_mask(Addr a, uint8_t size);
static inline uint64_t taint2_query_cb_mask(Addr a, uint8_t size) {
    assert(__taint2_query_cb_mask);
    return __taint2_query_cb_mask(a,size);
}

typedef void(*taint2_delete_ram_t)(uint64_t RamOffset);
extern taint2_delete_ram_t __taint2_delete_ram;
#ifdef PLUGIN_MAIN
taint2_delete_ram_t __taint2_delete_ram = NULL;
#endif
static inline void taint2_delete_ram(uint64_t RamOffset);
static inline void taint2_delete_ram(uint64_t RamOffset) {
    assert(__taint2_delete_ram);
    return __taint2_delete_ram(RamOffset);
}

typedef void(*taint2_delete_reg_t)(int reg_num, int offset);
extern taint2_delete_reg_t __taint2_delete_reg;
#ifdef PLUGIN_MAIN
taint2_delete_reg_t __taint2_delete_reg = NULL;
#endif
static inline void taint2_delete_reg(int reg_num, int offset);
static inline void taint2_delete_reg(int reg_num, int offset) {
    assert(__taint2_delete_reg);
    return __taint2_delete_reg(reg_num,offset);
}

typedef void(*taint2_delete_io_t)(uint64_t ia);
extern taint2_delete_io_t __taint2_delete_io;
#ifdef PLUGIN_MAIN
taint2_delete_io_t __taint2_delete_io = NULL;
#endif
static inline void taint2_delete_io(uint64_t ia);
static inline void taint2_delete_io(uint64_t ia) {
    assert(__taint2_delete_io);
    return __taint2_delete_io(ia);
}

typedef void(*taint2_labelset_addr_iter_t)(Addr addr, int (*app)(uint32_t el, void *stuff1), void *stuff2);
extern taint2_labelset_addr_iter_t __taint2_labelset_addr_iter;
#ifdef PLUGIN_MAIN
taint2_labelset_addr_iter_t __taint2_labelset_addr_iter = NULL;
#endif
static inline void taint2_labelset_addr_iter(Addr addr, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static inline void taint2_labelset_addr_iter(Addr addr, int (*app)(uint32_t el, void *stuff1), void *stuff2) {
    assert(__taint2_labelset_addr_iter);
    return __taint2_labelset_addr_iter(addr,app,stuff2);
}

typedef void(*taint2_labelset_ram_iter_t)(uint64_t RamOffset, int (*app)(uint32_t el, void *stuff1), void *stuff2);
extern taint2_labelset_ram_iter_t __taint2_labelset_ram_iter;
#ifdef PLUGIN_MAIN
taint2_labelset_ram_iter_t __taint2_labelset_ram_iter = NULL;
#endif
static inline void taint2_labelset_ram_iter(uint64_t RamOffset, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static inline void taint2_labelset_ram_iter(uint64_t RamOffset, int (*app)(uint32_t el, void *stuff1), void *stuff2) {
    assert(__taint2_labelset_ram_iter);
    return __taint2_labelset_ram_iter(RamOffset,app,stuff2);
}

typedef void(*taint2_labelset_reg_iter_t)(int reg_num, int offset, int (*app)(uint32_t el, void *stuff1), void *stuff2);
extern taint2_labelset_reg_iter_t __taint2_labelset_reg_iter;
#ifdef PLUGIN_MAIN
taint2_labelset_reg_iter_t __taint2_labelset_reg_iter = NULL;
#endif
static inline void taint2_labelset_reg_iter(int reg_num, int offset, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static inline void taint2_labelset_reg_iter(int reg_num, int offset, int (*app)(uint32_t el, void *stuff1), void *stuff2) {
    assert(__taint2_labelset_reg_iter);
    return __taint2_labelset_reg_iter(reg_num,offset,app,stuff2);
}

typedef void(*taint2_labelset_io_iter_t)(uint64_t ia, int (*app)(uint32_t el, void *stuff1), void *stuff2);
extern taint2_labelset_io_iter_t __taint2_labelset_io_iter;
#ifdef PLUGIN_MAIN
taint2_labelset_io_iter_t __taint2_labelset_io_iter = NULL;
#endif
static inline void taint2_labelset_io_iter(uint64_t ia, int (*app)(uint32_t el, void *stuff1), void *stuff2);
static inline void taint2_labelset_io_iter(uint64_t ia, int (*app)(uint32_t el, void *stuff1), void *stuff2) {
    assert(__taint2_labelset_io_iter);
    return __taint2_labelset_io_iter(ia,app,stuff2);
}

typedef uint32_t(*taint2_num_labels_applied_t)(void);
extern taint2_num_labels_applied_t __taint2_num_labels_applied;
#ifdef PLUGIN_MAIN
taint2_num_labels_applied_t __taint2_num_labels_applied = NULL;
#endif
static inline uint32_t taint2_num_labels_applied(void);
static inline uint32_t taint2_num_labels_applied(void) {
    assert(__taint2_num_labels_applied);
    return __taint2_num_labels_applied();
}

typedef void(*taint2_track_taint_state_t)(void);
extern taint2_track_taint_state_t __taint2_track_taint_state;
#ifdef PLUGIN_MAIN
taint2_track_taint_state_t __taint2_track_taint_state = NULL;
#endif
static inline void taint2_track_taint_state(void);
static inline void taint2_track_taint_state(void) {
    assert(__taint2_track_taint_state);
    return __taint2_track_taint_state();
}

typedef void(*taint2_query_results_iter_t)(QueryResult *qr);
extern taint2_query_results_iter_t __taint2_query_results_iter;
#ifdef PLUGIN_MAIN
taint2_query_results_iter_t __taint2_query_results_iter = NULL;
#endif
static inline void taint2_query_results_iter(QueryResult *qr);
static inline void taint2_query_results_iter(QueryResult *qr) {
    assert(__taint2_query_results_iter);
    return __taint2_query_results_iter(qr);
}

typedef uint32_t(*taint2_query_result_next_t)(QueryResult *qr, bool *done);
extern taint2_query_result_next_t __taint2_query_result_next;
#ifdef PLUGIN_MAIN
taint2_query_result_next_t __taint2_query_result_next = NULL;
#endif
static inline uint32_t taint2_query_result_next(QueryResult *qr, bool *done);
static inline uint32_t taint2_query_result_next(QueryResult *qr, bool *done) {
    assert(__taint2_query_result_next);
    return __taint2_query_result_next(qr,done);
}

typedef void(*taint2_query_reg_full_t)(uint32_t reg_num, uint32_t offset, QueryResult *qr);
extern taint2_query_reg_full_t __taint2_query_reg_full;
#ifdef PLUGIN_MAIN
taint2_query_reg_full_t __taint2_query_reg_full = NULL;
#endif
static inline void taint2_query_reg_full(uint32_t reg_num, uint32_t offset, QueryResult *qr);
static inline void taint2_query_reg_full(uint32_t reg_num, uint32_t offset, QueryResult *qr) {
    assert(__taint2_query_reg_full);
    return __taint2_query_reg_full(reg_num,offset,qr);
}

typedef void(*taint2_query_ram_full_t)(uint64_t RamOffset, QueryResult *qr);
extern taint2_query_ram_full_t __taint2_query_ram_full;
#ifdef PLUGIN_MAIN
taint2_query_ram_full_t __taint2_query_ram_full = NULL;
#endif
static inline void taint2_query_ram_full(uint64_t RamOffset, QueryResult *qr);
static inline void taint2_query_ram_full(uint64_t RamOffset, QueryResult *qr) {
    assert(__taint2_query_ram_full);
    return __taint2_query_ram_full(RamOffset,qr);
}

typedef void(*taint2_query_laddr_full_t)(uint64_t la, uint64_t offset, QueryResult *qr);
extern taint2_query_laddr_full_t __taint2_query_laddr_full;
#ifdef PLUGIN_MAIN
taint2_query_laddr_full_t __taint2_query_laddr_full = NULL;
#endif
static inline void taint2_query_laddr_full(uint64_t la, uint64_t offset, QueryResult *qr);
static inline void taint2_query_laddr_full(uint64_t la, uint64_t offset, QueryResult *qr) {
    assert(__taint2_query_laddr_full);
    return __taint2_query_laddr_full(la,offset,qr);
}

typedef Panda__TaintQuery *(*taint2_query_pandalog_t)(Addr addr, uint32_t offset);
extern taint2_query_pandalog_t __taint2_query_pandalog;
#ifdef PLUGIN_MAIN
taint2_query_pandalog_t __taint2_query_pandalog = NULL;
#endif
static inline Panda__TaintQuery * taint2_query_pandalog(Addr addr, uint32_t offset);
static inline Panda__TaintQuery * taint2_query_pandalog(Addr addr, uint32_t offset) {
    assert(__taint2_query_pandalog);
    return __taint2_query_pandalog(addr,offset);
}

typedef void(*pandalog_taint_query_free_t)(Panda__TaintQuery *tq);
extern pandalog_taint_query_free_t __pandalog_taint_query_free;
#ifdef PLUGIN_MAIN
pandalog_taint_query_free_t __pandalog_taint_query_free = NULL;
#endif
static inline void pandalog_taint_query_free(Panda__TaintQuery *tq);
static inline void pandalog_taint_query_free(Panda__TaintQuery *tq) {
    assert(__pandalog_taint_query_free);
    return __pandalog_taint_query_free(tq);
}

bool init_taint2_api(void);

#ifdef PLUGIN_MAIN
#define API_PLUGIN_NAME "taint2"
#define IMPORT_PPP(module, func_name) { \
    __##func_name = (func_name##_t) dlsym(module, #func_name); \
    char *err = dlerror(); \
    if (err) { \
        printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
        printf("Error: %s\n", err); \
        return false; \
    } \
}
bool init_taint2_api(void) {
    void *module = panda_get_plugin_by_name(API_PLUGIN_NAME);
    if (!module) {
        fprintf(stderr, "Couldn't load %s plugin: %s\n", API_PLUGIN_NAME, dlerror());
        return false;
    }
    IMPORT_PPP(module, taint2_enable_taint)
    IMPORT_PPP(module, taint2_enable_tainted_pointer)
    IMPORT_PPP(module, taint2_enabled)
    IMPORT_PPP(module, taint2_label_addr)
    IMPORT_PPP(module, taint2_label_ram)
    IMPORT_PPP(module, taint2_label_reg)
    IMPORT_PPP(module, taint2_label_io)
    IMPORT_PPP(module, taint2_label_ram_additive)
    IMPORT_PPP(module, taint2_label_reg_additive)
    IMPORT_PPP(module, taint2_label_io_additive)
    IMPORT_PPP(module, taint2_query)
    IMPORT_PPP(module, taint2_query_ram)
    IMPORT_PPP(module, taint2_query_reg)
    IMPORT_PPP(module, taint2_query_io)
    IMPORT_PPP(module, taint2_query_laddr)
    IMPORT_PPP(module, taint2_query_set_a)
    IMPORT_PPP(module, taint2_query_set)
    IMPORT_PPP(module, taint2_query_set_ram)
    IMPORT_PPP(module, taint2_query_set_reg)
    IMPORT_PPP(module, taint2_query_set_io)
    IMPORT_PPP(module, taint2_query_tcn)
    IMPORT_PPP(module, taint2_query_tcn_ram)
    IMPORT_PPP(module, taint2_query_tcn_reg)
    IMPORT_PPP(module, taint2_query_tcn_io)
    IMPORT_PPP(module, taint2_query_cb_mask)
    IMPORT_PPP(module, taint2_delete_ram)
    IMPORT_PPP(module, taint2_delete_reg)
    IMPORT_PPP(module, taint2_delete_io)
    IMPORT_PPP(module, taint2_labelset_addr_iter)
    IMPORT_PPP(module, taint2_labelset_ram_iter)
    IMPORT_PPP(module, taint2_labelset_reg_iter)
    IMPORT_PPP(module, taint2_labelset_io_iter)
    IMPORT_PPP(module, taint2_num_labels_applied)
    IMPORT_PPP(module, taint2_track_taint_state)
    IMPORT_PPP(module, taint2_query_results_iter)
    IMPORT_PPP(module, taint2_query_result_next)
    IMPORT_PPP(module, taint2_query_reg_full)
    IMPORT_PPP(module, taint2_query_ram_full)
    IMPORT_PPP(module, taint2_query_laddr_full)
    IMPORT_PPP(module, taint2_query_pandalog)
    IMPORT_PPP(module, pandalog_taint_query_free)
    return true;
}
#undef API_PLUGIN_NAME
#undef IMPORT_PPP
#endif

#endif
