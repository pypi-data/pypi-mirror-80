#ifndef __WIN2000X86INTRO_EXT_H__
#define __WIN2000X86INTRO_EXT_H__
/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 *
 * Note: Function pointers for API calls are declared as extern.
 * The definition of the pointers is guarded by the PLUGIN_MAIN macro.
 * This plugin is defined only for the compilation unit matching the
 * name of the plugin.
 * This allows us to initialize API function pointers once, in the main
 * compilation unit, rather than in every compilation unit.
 */
#include <dlfcn.h>
#include "panda/plugin.h"

typedef PTR(*get_win2000_kpcr_t)(CPUState *cpu);
extern get_win2000_kpcr_t __get_win2000_kpcr;
#ifdef PLUGIN_MAIN
get_win2000_kpcr_t __get_win2000_kpcr = NULL;
#endif
static inline PTR get_win2000_kpcr(CPUState *cpu);
static inline PTR get_win2000_kpcr(CPUState *cpu) {
    assert(__get_win2000_kpcr);
    return __get_win2000_kpcr(cpu);
}

typedef HandleObject *(*get_win2000_handle_object_t)(CPUState *cpu, uint32_t eproc, uint32_t handle);
extern get_win2000_handle_object_t __get_win2000_handle_object;
#ifdef PLUGIN_MAIN
get_win2000_handle_object_t __get_win2000_handle_object = NULL;
#endif
static inline HandleObject * get_win2000_handle_object(CPUState *cpu, uint32_t eproc, uint32_t handle);
static inline HandleObject * get_win2000_handle_object(CPUState *cpu, uint32_t eproc, uint32_t handle) {
    assert(__get_win2000_handle_object);
    return __get_win2000_handle_object(cpu,eproc,handle);
}

typedef PTR(*get_win2000_kddebugger_data_t)(CPUState *cpu);
extern get_win2000_kddebugger_data_t __get_win2000_kddebugger_data;
#ifdef PLUGIN_MAIN
get_win2000_kddebugger_data_t __get_win2000_kddebugger_data = NULL;
#endif
static inline PTR get_win2000_kddebugger_data(CPUState *cpu);
static inline PTR get_win2000_kddebugger_data(CPUState *cpu) {
    assert(__get_win2000_kddebugger_data);
    return __get_win2000_kddebugger_data(cpu);
}

bool init_win2000x86intro_api(void);

#ifdef PLUGIN_MAIN
#define API_PLUGIN_NAME "win2000x86intro"
#define IMPORT_PPP(module, func_name) { \
    __##func_name = (func_name##_t) dlsym(module, #func_name); \
    char *err = dlerror(); \
    if (err) { \
        printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
        printf("Error: %s\n", err); \
        return false; \
    } \
}
bool init_win2000x86intro_api(void) {
    void *module = panda_get_plugin_by_name(API_PLUGIN_NAME);
    if (!module) {
        fprintf(stderr, "Couldn't load %s plugin: %s\n", API_PLUGIN_NAME, dlerror());
        return false;
    }
    IMPORT_PPP(module, get_win2000_kpcr)
    IMPORT_PPP(module, get_win2000_handle_object)
    IMPORT_PPP(module, get_win2000_kddebugger_data)
    return true;
}
#undef API_PLUGIN_NAME
#undef IMPORT_PPP
#endif

#endif
