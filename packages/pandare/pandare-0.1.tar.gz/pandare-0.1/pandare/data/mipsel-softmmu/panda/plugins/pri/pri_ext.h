#ifndef __PRI_EXT_H__
#define __PRI_EXT_H__
/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 *
 * Note: Function pointers for API calls are declared as extern.
 * The definition of the pointers is guarded by the PLUGIN_MAIN macro.
 * This plugin is defined only for the compilation unit matching the
 * name of the plugin.
 * This allows us to initialize API function pointers once, in the main
 * compilation unit, rather than in every compilation unit.
 */
#include <dlfcn.h>
#include "panda/plugin.h"

typedef int(*pri_get_pc_source_info_t)(CPUState *env, target_ulong pc, SrcInfo *info);
extern pri_get_pc_source_info_t __pri_get_pc_source_info;
#ifdef PLUGIN_MAIN
pri_get_pc_source_info_t __pri_get_pc_source_info = NULL;
#endif
static inline int pri_get_pc_source_info(CPUState *env, target_ulong pc, SrcInfo *info);
static inline int pri_get_pc_source_info(CPUState *env, target_ulong pc, SrcInfo *info) {
    assert(__pri_get_pc_source_info);
    return __pri_get_pc_source_info(env,pc,info);
}

typedef char *(*pri_get_vma_symbol_t)(CPUState *env, target_ulong pc, target_ulong vma);
extern pri_get_vma_symbol_t __pri_get_vma_symbol;
#ifdef PLUGIN_MAIN
pri_get_vma_symbol_t __pri_get_vma_symbol = NULL;
#endif
static inline char * pri_get_vma_symbol(CPUState *env, target_ulong pc, target_ulong vma);
static inline char * pri_get_vma_symbol(CPUState *env, target_ulong pc, target_ulong vma) {
    assert(__pri_get_vma_symbol);
    return __pri_get_vma_symbol(env,pc,vma);
}

typedef void(*pri_all_livevar_iter_t)(CPUState *env, target_ulong pc, liveVarCB f, void *args);
extern pri_all_livevar_iter_t __pri_all_livevar_iter;
#ifdef PLUGIN_MAIN
pri_all_livevar_iter_t __pri_all_livevar_iter = NULL;
#endif
static inline void pri_all_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args);
static inline void pri_all_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args) {
    assert(__pri_all_livevar_iter);
    return __pri_all_livevar_iter(env,pc,f,args);
}

typedef void(*pri_funct_livevar_iter_t)(CPUState *env, target_ulong pc, liveVarCB f, void *args);
extern pri_funct_livevar_iter_t __pri_funct_livevar_iter;
#ifdef PLUGIN_MAIN
pri_funct_livevar_iter_t __pri_funct_livevar_iter = NULL;
#endif
static inline void pri_funct_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args);
static inline void pri_funct_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args) {
    assert(__pri_funct_livevar_iter);
    return __pri_funct_livevar_iter(env,pc,f,args);
}

typedef void(*pri_global_livevar_iter_t)(CPUState *env, target_ulong pc, liveVarCB f, void *args);
extern pri_global_livevar_iter_t __pri_global_livevar_iter;
#ifdef PLUGIN_MAIN
pri_global_livevar_iter_t __pri_global_livevar_iter = NULL;
#endif
static inline void pri_global_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args);
static inline void pri_global_livevar_iter(CPUState *env, target_ulong pc, liveVarCB f, void *args) {
    assert(__pri_global_livevar_iter);
    return __pri_global_livevar_iter(env,pc,f,args);
}

typedef void(*pri_runcb_on_before_line_change_t)(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno);
extern pri_runcb_on_before_line_change_t __pri_runcb_on_before_line_change;
#ifdef PLUGIN_MAIN
pri_runcb_on_before_line_change_t __pri_runcb_on_before_line_change = NULL;
#endif
static inline void pri_runcb_on_before_line_change(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno);
static inline void pri_runcb_on_before_line_change(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno) {
    assert(__pri_runcb_on_before_line_change);
    return __pri_runcb_on_before_line_change(env,pc,file_name,funct_name,lno);
}

typedef void(*pri_runcb_on_after_line_change_t)(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno);
extern pri_runcb_on_after_line_change_t __pri_runcb_on_after_line_change;
#ifdef PLUGIN_MAIN
pri_runcb_on_after_line_change_t __pri_runcb_on_after_line_change = NULL;
#endif
static inline void pri_runcb_on_after_line_change(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno);
static inline void pri_runcb_on_after_line_change(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name, unsigned long long lno) {
    assert(__pri_runcb_on_after_line_change);
    return __pri_runcb_on_after_line_change(env,pc,file_name,funct_name,lno);
}

typedef void(*pri_runcb_on_fn_start_t)(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name);
extern pri_runcb_on_fn_start_t __pri_runcb_on_fn_start;
#ifdef PLUGIN_MAIN
pri_runcb_on_fn_start_t __pri_runcb_on_fn_start = NULL;
#endif
static inline void pri_runcb_on_fn_start(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name);
static inline void pri_runcb_on_fn_start(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name) {
    assert(__pri_runcb_on_fn_start);
    return __pri_runcb_on_fn_start(env,pc,file_name,funct_name);
}

typedef void(*pri_runcb_on_fn_return_t)(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name);
extern pri_runcb_on_fn_return_t __pri_runcb_on_fn_return;
#ifdef PLUGIN_MAIN
pri_runcb_on_fn_return_t __pri_runcb_on_fn_return = NULL;
#endif
static inline void pri_runcb_on_fn_return(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name);
static inline void pri_runcb_on_fn_return(CPUState *env, target_ulong pc, const char *file_name, const char *funct_name) {
    assert(__pri_runcb_on_fn_return);
    return __pri_runcb_on_fn_return(env,pc,file_name,funct_name);
}

bool init_pri_api(void);

#ifdef PLUGIN_MAIN
#define API_PLUGIN_NAME "pri"
#define IMPORT_PPP(module, func_name) { \
    __##func_name = (func_name##_t) dlsym(module, #func_name); \
    char *err = dlerror(); \
    if (err) { \
        printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
        printf("Error: %s\n", err); \
        return false; \
    } \
}
bool init_pri_api(void) {
    void *module = panda_get_plugin_by_name(API_PLUGIN_NAME);
    if (!module) {
        fprintf(stderr, "Couldn't load %s plugin: %s\n", API_PLUGIN_NAME, dlerror());
        return false;
    }
    IMPORT_PPP(module, pri_get_pc_source_info)
    IMPORT_PPP(module, pri_get_vma_symbol)
    IMPORT_PPP(module, pri_all_livevar_iter)
    IMPORT_PPP(module, pri_funct_livevar_iter)
    IMPORT_PPP(module, pri_global_livevar_iter)
    IMPORT_PPP(module, pri_runcb_on_before_line_change)
    IMPORT_PPP(module, pri_runcb_on_after_line_change)
    IMPORT_PPP(module, pri_runcb_on_fn_start)
    IMPORT_PPP(module, pri_runcb_on_fn_return)
    return true;
}
#undef API_PLUGIN_NAME
#undef IMPORT_PPP
#endif

#endif
