#!/usr/bin/env python3

import pickle
import os
import numpy
import torch
from quicksom.som import SOM

import argparse

parser = argparse.ArgumentParser(description='All the indices are starting from 1.')
# In/Out
parser.add_argument("-i", "--in_name", default=None, help="name of the npy file to use")
parser.add_argument("-o", "--out_name", default='out.txt', help="name of txt to dump")
parser.add_argument("-s", "--som_name", default='som.p', help="name of pickle to load")
parser.add_argument("--recompute_cluster", default=False, action='store_true', help="if set, periodic topology is used")
parser.add_argument("--batch", default=100, type=int, help='Batch size')
parser.add_argument("--subset", default=False, action='store_true',
                    help="Use the user defined clusters instead of the expanded partition.")
args, _ = parser.parse_known_args()

device = 'cuda' if torch.cuda.is_available() else 'cpu'
som = pickle.load(open(args.som_name, 'rb'))
som.to_device(device)
if args.recompute_cluster:
    som.cluster_att = None

if args.in_name is not None:
    X = numpy.load(args.in_name)
    X = torch.from_numpy(X)
    X = X.float()
    X = X.to(device)
    predicted_clusts, errors = som.predict_cluster(X, batch_size=args.batch,
                                                   user=args.subset)
else:
    predicted_clusts, errors = som.predict_cluster(batch_size=args.batch,
                                                   user=args.subset)

# numpy.savetxt(args.out_name, predicted_clusts, fmt='%d')
codebook = numpy.asarray(som.codebook)
codebook[codebook != -1] += 1
numpy.savetxt(f"{os.path.splitext(args.out_name)[0]}_codebook.txt", codebook, fmt='%d')
numpy.savetxt(f"{os.path.splitext(args.out_name)[0]}_bmus.txt", numpy.c_[som.bmus, som.error], fmt='%.4f')
with open(f"{os.path.splitext(args.out_name)[0]}_clusters.txt", 'w') as outfile:
    for cid in numpy.unique(predicted_clusts):
        if cid > 0:
            inds = numpy.where(predicted_clusts == cid)[0] + 1
            outfile.write(f"{' '.join(['%d' % e for e in inds])}\n")
