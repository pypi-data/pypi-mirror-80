"create-entity-shape-from-file"
*******************************


Description
===========

Retrieves the data entity shape from the end data system. The input
can specify the data entity to get the shape for. For databases, this
can be retrieved from the database data dictionary. For files, some
hints as to the file properties can also be supplied in the input.


Usage
=====

   oci data-integration data-entity create-entity-shape-from-file [OPTIONS]


Required Parameters
===================

--connection-key [text]

The connection key

--schema-resource-name [text]

Schema resource name used for retrieving schemas

--workspace-id [text]

DIS workspace id


Optional Parameters
===================

--data-format [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--description [text]

Detailed description for the object.

--entity-type [text]

The entity type.

Accepted values are:

   FILE, OTHER, QUEUE, STREAM, TABLE, VIEW

--external-key [text]

The external key for the object.

--foreign-keys [complex type]

An array of foreign keys.

This option is a JSON list with items of type ForeignKey.  For
documentation on ForeignKey please see our API reference: https://doc
s.cloud.oracle.com/api/#/en/dataintegration/20200430/datatypes/Foreig
nKey. This is a complex type whose value must be valid JSON. The value
can be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--from-json [text]

Provide input to this command as a JSON document from a file using the
file://path-to/file syntax.

The "--generate-full-command-json-input" option can be used to
generate a sample json file to be used with this command option. The
key names are pre-populated and match the command option names
(converted to camelCase format, e.g. compartment-id -->
compartmentId), while the values of the keys need to be populated by
the user before using the sample file as an input to this command. For
any command option that accepts multiple values, the value of the key
can be a JSON array.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used.

For examples on usage of this option, please see our "using CLI with
advanced JSON options" link: https://docs.cloud.oracle.com/iaas/Conte
nt/API/SDKDocs/cliusing.htm#AdvancedJSONOptions

--identifier [text]

Value can only contain upper case letters, underscore and numbers. It
should begin with upper case letter or underscore. The value can be
edited by the user.

--if-match [text]

Update and Delete operations should accept an optional If-Match
header, in which clients can send a previously-received ETag. When If-
Match is provided and its value does not exactly match the ETag of the
resource on the server, the request should fail with HTTP response
status code 412

--key [text]

The key of the object.

--model-version [text]

The model version of an object.

--name [text]

Free form text without any restriction on permitted characters. Name
can have letters, numbers, and special characters. The value can be
edited by the user and it is restricted to 1000 characters

--object-status [integer]

The status of an object that can be set to value 1 for shallow
references across objects, other values reserved.

--object-version [integer]

The version of the object that is used to track changes in the object
instance.

--other-type-label [text]

Specifies other type label.

--parent-ref [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--resource-name [text]

The resource name.

--shape [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--shape-id [text]

The shape ID.

--types [complex type]

This is a complex type whose value must be valid JSON. The value can
be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.

--unique-keys [complex type]

An array of unique keys.

This option is a JSON list with items of type UniqueKey.  For
documentation on UniqueKey please see our API reference: https://docs
.cloud.oracle.com/api/#/en/dataintegration/20200430/datatypes/UniqueK
ey. This is a complex type whose value must be valid JSON. The value
can be provided as a string on the command line or passed in as a file
using the file://path/to/file syntax.

The "--generate-param-json-input" option can be used to generate an
example of the JSON which must be provided. We recommend storing this
example in a file, modifying it as needed and then passing it back in
via the file:// syntax.


Global Parameters
=================

Use "oci --help" for help on global parameters.

"--auth-purpose", "--auth", "--cert-bundle", "--cli-rc-file", "--
config-file", "--debug", "--defaults-file", "--endpoint", "--generate-
full-command-json-input", "--generate-param-json-input", "--help", "--
latest-version", "--no-retry", "--opc-client-request-id", "--opc-
request-id", "--output", "--profile", "--query", "--raw-output", "--
region", "--release-info", "--request-id", "--version", "-?", "-d",
"-h", "-v"
