Metadata-Version: 2.1
Name: audioio
Version: 0.9.5
Summary: Platform independent interfacing of numpy arrays of floats with audio files and devices.
Home-page: https://github.com/bendalab/audioio
Author: Jan Benda, Joerg Henninger
Author-email: jan.benda@uni-tuebingen.de
License: GPLv3
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Natural Language :: English
Classifier: Programming Language :: Python
Classifier: Operating System :: OS Independent
Classifier: Topic :: Multimedia :: Sound/Audio
Classifier: Topic :: Multimedia :: Sound/Audio :: Analysis
Classifier: Topic :: Multimedia :: Sound/Audio :: Conversion
Classifier: Topic :: Multimedia :: Sound/Audio :: Editors
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Description-Content-Type: text/markdown
Requires-Dist: numpy


# AudioIO 

Platform independent interfacing of numpy arrays of floats with audio
files and devices.

[Documentation](https://bendalab.github.io/audioio) |
[API Reference](https://bendalab.github.io/audioio/api)

The AudioIO modules try to use whatever audio modules installed on
your system to achieve their tasks. The AudioIO package does not
provide own code for decoding files and accessing audio hardware.

See [installation](https://bendalab.github.io/audioio/installation)
for further instructions.

## Feaures

- Audio data are always *numpy arrays of floats* with values ranging between -1 and 1 ...
- ... independent of how the data are stored in an audio file.
- `load_audio()` function for loading a whole audio file.
- *Blockwise random-access* loading of large audio files (`class AudioLoader`).
- `blocks()` generator for iterating over blocks of data with optional overlap.
- `write_audio()` function for writing data to an audio file. 
- Platform independent playback of numpy arrays (`play()`).
- *Synchronous* (blocking) and *asynchronous* (non blocking) playback.
- *Automatic resampling* of data for playback to match supported sampling rates.
- Detailed and *platform specific installation instructions* (pip, conda, Debian and RPM based Linux packages, homebrew for MacOS) for all supported audio packages.


