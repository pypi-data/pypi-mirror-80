# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import entity_pb2 as entity__pb2


class EventServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Evince = channel.unary_unary(
                '/calixa.domain.entity.EventService/Evince',
                request_serializer=entity__pb2.Entity.SerializeToString,
                response_deserializer=entity__pb2.EvinceResponse.FromString,
                )
        self.EvinceBatch = channel.unary_unary(
                '/calixa.domain.entity.EventService/EvinceBatch',
                request_serializer=entity__pb2.EntityList.SerializeToString,
                response_deserializer=entity__pb2.EvinceResponse.FromString,
                )


class EventServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Evince(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvinceBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Evince': grpc.unary_unary_rpc_method_handler(
                    servicer.Evince,
                    request_deserializer=entity__pb2.Entity.FromString,
                    response_serializer=entity__pb2.EvinceResponse.SerializeToString,
            ),
            'EvinceBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.EvinceBatch,
                    request_deserializer=entity__pb2.EntityList.FromString,
                    response_serializer=entity__pb2.EvinceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.entity.EventService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Evince(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.entity.EventService/Evince',
            entity__pb2.Entity.SerializeToString,
            entity__pb2.EvinceResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EvinceBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.entity.EventService/EvinceBatch',
            entity__pb2.EntityList.SerializeToString,
            entity__pb2.EvinceResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class EntityServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEntity = channel.unary_unary(
                '/calixa.domain.entity.EntityService/GetEntity',
                request_serializer=entity__pb2.GetEntityRequest.SerializeToString,
                response_deserializer=entity__pb2.EntityWithRelationships.FromString,
                )
        self.AddRelationship = channel.unary_unary(
                '/calixa.domain.entity.EntityService/AddRelationship',
                request_serializer=entity__pb2.RelationshipRequest.SerializeToString,
                response_deserializer=entity__pb2.Relationship.FromString,
                )
        self.RemoveRelationship = channel.unary_unary(
                '/calixa.domain.entity.EntityService/RemoveRelationship',
                request_serializer=entity__pb2.RelationshipRequest.SerializeToString,
                response_deserializer=entity__pb2.Relationship.FromString,
                )


class EntityServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetEntity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRelationship(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveRelationship(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EntityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEntity,
                    request_deserializer=entity__pb2.GetEntityRequest.FromString,
                    response_serializer=entity__pb2.EntityWithRelationships.SerializeToString,
            ),
            'AddRelationship': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRelationship,
                    request_deserializer=entity__pb2.RelationshipRequest.FromString,
                    response_serializer=entity__pb2.Relationship.SerializeToString,
            ),
            'RemoveRelationship': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveRelationship,
                    request_deserializer=entity__pb2.RelationshipRequest.FromString,
                    response_serializer=entity__pb2.Relationship.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.entity.EntityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EntityService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.entity.EntityService/GetEntity',
            entity__pb2.GetEntityRequest.SerializeToString,
            entity__pb2.EntityWithRelationships.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRelationship(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.entity.EntityService/AddRelationship',
            entity__pb2.RelationshipRequest.SerializeToString,
            entity__pb2.Relationship.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveRelationship(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.entity.EntityService/RemoveRelationship',
            entity__pb2.RelationshipRequest.SerializeToString,
            entity__pb2.Relationship.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
