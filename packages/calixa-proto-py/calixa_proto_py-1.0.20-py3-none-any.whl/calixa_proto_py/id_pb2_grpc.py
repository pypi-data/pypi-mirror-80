# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import id_pb2 as id__pb2


class IdMappingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOrCreateCanonicalId = channel.unary_unary(
                '/calixa.domain.id.IdMappingService/GetOrCreateCanonicalId',
                request_serializer=id__pb2.GetOrCreateIdRequest.SerializeToString,
                response_deserializer=id__pb2.IdKey.FromString,
                )
        self.GetMapping = channel.unary_unary(
                '/calixa.domain.id.IdMappingService/GetMapping',
                request_serializer=id__pb2.IdKey.SerializeToString,
                response_deserializer=id__pb2.IdMapping.FromString,
                )
        self.AddMapping = channel.unary_unary(
                '/calixa.domain.id.IdMappingService/AddMapping',
                request_serializer=id__pb2.AddMappingRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.DisableAutoMappedId = channel.unary_unary(
                '/calixa.domain.id.IdMappingService/DisableAutoMappedId',
                request_serializer=id__pb2.AutoMappedIdRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.IsAutoMappingEnabled = channel.unary_unary(
                '/calixa.domain.id.IdMappingService/IsAutoMappingEnabled',
                request_serializer=id__pb2.AutoMappedIdRequest.SerializeToString,
                response_deserializer=id__pb2.AutoMappedIdResponse.FromString,
                )


class IdMappingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetOrCreateCanonicalId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableAutoMappedId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsAutoMappingEnabled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IdMappingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOrCreateCanonicalId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrCreateCanonicalId,
                    request_deserializer=id__pb2.GetOrCreateIdRequest.FromString,
                    response_serializer=id__pb2.IdKey.SerializeToString,
            ),
            'GetMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMapping,
                    request_deserializer=id__pb2.IdKey.FromString,
                    response_serializer=id__pb2.IdMapping.SerializeToString,
            ),
            'AddMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMapping,
                    request_deserializer=id__pb2.AddMappingRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DisableAutoMappedId': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableAutoMappedId,
                    request_deserializer=id__pb2.AutoMappedIdRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'IsAutoMappingEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.IsAutoMappingEnabled,
                    request_deserializer=id__pb2.AutoMappedIdRequest.FromString,
                    response_serializer=id__pb2.AutoMappedIdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.id.IdMappingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IdMappingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetOrCreateCanonicalId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.id.IdMappingService/GetOrCreateCanonicalId',
            id__pb2.GetOrCreateIdRequest.SerializeToString,
            id__pb2.IdKey.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.id.IdMappingService/GetMapping',
            id__pb2.IdKey.SerializeToString,
            id__pb2.IdMapping.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.id.IdMappingService/AddMapping',
            id__pb2.AddMappingRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableAutoMappedId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.id.IdMappingService/DisableAutoMappedId',
            id__pb2.AutoMappedIdRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsAutoMappingEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.id.IdMappingService/IsAutoMappingEnabled',
            id__pb2.AutoMappedIdRequest.SerializeToString,
            id__pb2.AutoMappedIdResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
