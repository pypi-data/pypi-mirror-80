# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from vda.grpc import cn_agent_pb2 as vda_dot_grpc_dot_cn__agent__pb2


class CnAgentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SyncupCn = channel.unary_unary(
                '/CnAgent/SyncupCn',
                request_serializer=vda_dot_grpc_dot_cn__agent__pb2.SyncupCnRequest.SerializeToString,
                response_deserializer=vda_dot_grpc_dot_cn__agent__pb2.SyncupCnReply.FromString,
                )
        self.CnHeartbeat = channel.unary_unary(
                '/CnAgent/CnHeartbeat',
                request_serializer=vda_dot_grpc_dot_cn__agent__pb2.CnHeartbeatRequest.SerializeToString,
                response_deserializer=vda_dot_grpc_dot_cn__agent__pb2.CnHeartbeatReply.FromString,
                )


class CnAgentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SyncupCn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CnHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CnAgentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SyncupCn': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncupCn,
                    request_deserializer=vda_dot_grpc_dot_cn__agent__pb2.SyncupCnRequest.FromString,
                    response_serializer=vda_dot_grpc_dot_cn__agent__pb2.SyncupCnReply.SerializeToString,
            ),
            'CnHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.CnHeartbeat,
                    request_deserializer=vda_dot_grpc_dot_cn__agent__pb2.CnHeartbeatRequest.FromString,
                    response_serializer=vda_dot_grpc_dot_cn__agent__pb2.CnHeartbeatReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CnAgent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CnAgent(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SyncupCn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CnAgent/SyncupCn',
            vda_dot_grpc_dot_cn__agent__pb2.SyncupCnRequest.SerializeToString,
            vda_dot_grpc_dot_cn__agent__pb2.SyncupCnReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CnHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CnAgent/CnHeartbeat',
            vda_dot_grpc_dot_cn__agent__pb2.CnHeartbeatRequest.SerializeToString,
            vda_dot_grpc_dot_cn__agent__pb2.CnHeartbeatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
